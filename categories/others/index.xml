<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Others on 清絮的博客</title><link>https://blog.qingxu.live/categories/others/</link><description>Recent content in Others on 清絮的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 29 Nov 2020 13:54:04 +0000</lastBuildDate><atom:link href="https://blog.qingxu.live/categories/others/index.xml" rel="self" type="application/rss+xml"/><item><title>利用 Cloudflare Workers Site 部署静态博客</title><link>https://blog.qingxu.live/posts/deploy-blog-to-cf/</link><pubDate>Sun, 29 Nov 2020 13:54:04 +0000</pubDate><guid>https://blog.qingxu.live/posts/deploy-blog-to-cf/</guid><description>前言 作为一个 很少更新博客 热衷于折腾博客的小白玩家，博客的速度一直是我评估博客必不可少的一个方面。在曾经漫长的 Next 主题使用过程中，最能激发我兴趣的莫过于优化 Next 主题的样式和加载速度。
可对于当时把博客托管 GitHub Pages 的我来说，不可避免的是国内极其尴尬的加载速度。为此，我尝试过把博客迁移到其他静态网站托管平台如 Netlify，但国内访问速度比起 GitHub Pages 也好不了多少，甚至还会出现服务器响应时间慢等问题……寻找一个足够理想的静态托管平台对于我来说是一个非常漫长的过程，即使是加载速度最令我满意的 Vercel 也不可避免网站刷新和域名问题。 （关于静态托管平台我可能会专门写一篇文章总结各大平台优缺点，这些暂且后话）
为什么选择 Cloudflare 引用一句幽默且常被许多站长挂在口中的一句话：「网站的访问速度一直是与光速作斗争。」
当访客访问一个网站的时候，他可能要面临的是与千里之外的某一台服务器建立连接，然后数据跋山涉水横跨千里最后出现在他的浏览器。而这个时间太长了，长到绝大多数访客都不愿意为此等待。因此，为了提升建立连接的速度，有了 HTTP 的升级；为了提升静态数据分发速度，有了 CDN。而 Cloudflare Workers Site 则宣布在此基础上他们再实现了一个重要的突破——将整个站点部署在网络边缘。
Cloudflare 拥有遍布全球的网络节点，200+ 数据中心让它的速度在全球范围内都有极其优秀的表现。与单纯的 CDN 相比，Cloudflare Workers Site 并不是将已缓存的静态资源放在边缘网络，让浏览器笨拙地跳转再跳转然后获取可能的最近最快的静态资源，而是直接将整个网站部署到全球边缘网络，让访客直接访问网站获取数据。于是，在高速访问的基础上，Cloudflare Workers Site 进一步减少了回源时间，让整个站点在数据传输上接近完美。而 Cloudflare Workers Site 自带可编辑的 index.js 更是可以衍生不少实用和有趣的玩法。
在寻找理想的静态托管平台的过程中，Cloudflare Workers Site 无疑让我垂涎已久，只是 $5/Month 起步的订阅费用也让我这个脱贫路上的硬骨头望而却步，最终只能无奈转投他家。
但令我不敢想象的是，Cloudflare 于 2020 年 11 月 28 日正式宣布：Cloudflare Workers KV 向 Workers Free Plan 免费开放。
虽然我知道 Cloudflare 向来慷慨大方（从 Free Plan 的免费额度中就可见一斑了），但也实在没想到它会直接到将 Workers 的核心付费功能 Cloudflare Workers KV 直接免费开放。</description></item><item><title>浅谈手机通知推送</title><link>https://blog.qingxu.live/posts/3/</link><pubDate>Thu, 01 Oct 2020 15:49:01 +0000</pubDate><guid>https://blog.qingxu.live/posts/3/</guid><description>场景如下
QQ/WeChat:
A：我给你发消息你怎么半天没回？ 我：有事请 Telegram 联系，QQ/WeChat 随缘回复。 A：这跟 QQ/WeChat 私聊有什么区别？为什么要这么麻烦？ 我：（此处省略 1000+ 字） 忽然我意识到了，其实大部分人对自己的 IM 软件一无所知，那么一篇有必要的科普文章就应该开始动手了。Telegram 的优点当然不仅在于通知推送，但是我想从通知推送说起……
声明 限于篇幅，这篇文章并不会太多牵扯到手机通知推送的技术细节。（毕竟主要是科普嘛~~） 文章内容仅代表作者个人认知和观点，欢迎发表你的观点。 文章内容限于作者能力可能存在某些错误，欢迎指出。 iOS 的通知推送 说起手机推送，不得不先提的是 iOS 的通知推送。
即使你是一个数码小白，至少也听说过 iOS 通知的及时。当然，你可能看到的是吐槽 Android 通知多么垃圾，这其实是反衬 iOS 通知的强大。
这里简单介绍一下 iOS 通知推送机制。
本地推送 本地推送其实就是 App 的定时推送。App 注册本地推送通知，指定一个时间并在该时间推送通知。
远程推送 前提已满足条件：App 已注册远程推送通知。
Apple 开发者文档给出的推送过程示意图如下： 通知推送示意图
用文字描述过程如下：
软件需要推送通知 软件服务器将通知推送到 Apple Push Notification service（APNs） Apple Push Notification service（APNs） 将通知转发给用户。 可以看到，这全过程都是由 Apple Push Notification service（APNs）完成通知的接收与发送，并且最后的通知推送也是由系统进行统一推送。这一过程中，设备上的软件本身没有参与。</description></item><item><title>欧盟或将仿造中国建网络防火墙</title><link>https://blog.qingxu.live/posts/13/</link><pubDate>Thu, 13 Aug 2020 15:52:45 +0000</pubDate><guid>https://blog.qingxu.live/posts/13/</guid><description> 一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”
上个月，欧盟议会发布了一份关于数字经济未来发展策略的研究报告，提出将建立欧盟的“互联网防火墙”，报告明确指出这个防火墙将“像中国的一样，会封锁一部分支持或者容忍（对欧盟而言的）非法行为的第三方国家的互联网服务。
互联网防火墙可能是有预兆的必然 不禁让我想起了去年俄罗斯开始和中国交流“互联网防火墙”的建设。
所谓“网络主权”正在被越来越多的国家挂在嘴上，而所谓“互联网自由”逐渐变成了一个笑话。一切真如很久以前有人说的，「互联网审查并将成为世界绝大多数国家的共识，互联网自由将随着互联网的发展而有名无实」。
历史总是相似的 此时被无数人想起的莫过于茨威格的《昨日的世界》
自从第一次世界大战以来，世界所经历的能让人感觉到的最大倒退，莫过于对个人行动自由的限制，以及自由权利的缩小。 在1914年以前，地球属于所有的人。每个人可以去他想去的地方，想停留多长时间就停留多长时间。没有所谓的许可，没有准入。 当我跟现在的年轻人讲到我在1914年以前去了印度和美国，没有带护照，也根本没见过护照是什么样子，我总是看到他们脸上的惊奇。 人们上车下车，不需要问什么，也不被人盘问；今天人们被要求填写的上百份表格，当时一份也不用填写。没有居留许可，没有签证，没有刁难。 今天的国界线，因为大家彼此之间病态的不信任，已经被海关、警察、哨所变成了一道铁丝网，而那时的国界线无非是一条象征性的界线，谁都可以不假思索地越过，就如同格林尼治的子午线一样。
　——茨威格 《昨日的世界》
所谓自由只是在管制下的一点漏洞。当制度逐渐完善，自由只剩下狭义的自由，也就是政治中的「真正的自由」。
想起许多年前无数人苦苦追求的“言论自由”，又与无数人把西方某些国家当作自由的标杆，心中自由的圣地，便觉得可笑到了极点，世界总是这样让人意想不到、啼笑皆非。
引用一位博主的一段话：
互联网也曾撕开一个时代的裂缝，现在中文互联网上还有人在怀念上一个十年乃至上上个十年，怀念那时候自由的互联网风气，全世界的网站、服务须臾指间，点击可达——和茨威格一样，他们也认为那是理所当然。
其实我们都不过是见证了裂缝渐渐闭合的过程而已，现在这个过程也要降临到欧洲了。一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”
恍然间，昨日如梦。
参考文章:
逸文笔记</description></item><item><title>GitHub Action 实现 Hexo 博客持续集成</title><link>https://blog.qingxu.live/posts/9/</link><pubDate>Wed, 29 Apr 2020 01:47:09 +0000</pubDate><guid>https://blog.qingxu.live/posts/9/</guid><description>无需配置 Hexo 环境~ 在任何可以打开网页的设备上即可编辑你的 Hexo 博客并部署！
你要先清楚某些东西… 在私有仓库下使用 GitHub Action 是不完全免费的。 对于免费用户，你每个月只能使用 GitHub Action 工作 2000 min。这个数据计算方法特别有意思，详见 GitHub 据我多次测试，对于我的博客，GitHub Action 每次部署大概要耗时 1 min。 假设你每次提交需要耗时 2 min，这意味着你如果使用私有仓库存放后续操作中的源码，你每个月只能提交 1000 次博客。折算下来，也就是说，你每天只能提交 33 次博客。
需要特别说明的，上面的时间计算是在 Linux 环境下的计算。如果你在后续操作中使用的 Operating system 是 Windows 或 macOS ，则 GitHub Action 记录的时间分别是你实际使用时间的 2 倍和 10 倍。
话说，如果你能做到每天提交 33 次博客，请务必留个联系方式让我认识一下。没别的意思，就是想瞻仰一下劳模的风采。
在测试过程中，我发现即使使用 Linux 作为 Operating system， GitHub Action 实际工作时间也和 GitHub 计费时间并不相同。 同时，我在 GitHub Action 界面发现如下文字： This is the workflow execution time which may be different than the billed time.</description></item><item><title>First Blog</title><link>https://blog.qingxu.live/posts/7/</link><pubDate>Tue, 24 Mar 2020 19:01:10 +0000</pubDate><guid>https://blog.qingxu.live/posts/7/</guid><description>第一篇博客，Hello world~~
希望自己删库跑路不要那么快</description></item></channel></rss>