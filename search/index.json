[{"content":"有些话必须放在前面…… 无论从哪个角度看，Arch Linux 都不是一个新手友好型 Linux 发行版。无论你是因为什么原因选择安装 Arch Linux，我都希望你能够满足下条件：\n 具有基本阅读理解水平，至少要能跟着教程来 掌握电脑基础使用，能够正常开关机 对电脑键盘键位和其按钮有基本了解（打字都不会的就不要打扰了。。。） 能够面对满屏的命令行输出保持基本冷静 具有基础的英语水平，至少命令行报错（比如出现 error）的时候，你能反应过来该命令执行出现错误。 有一定自主操作能力，能根据自己实际情况解决相应问题 出现突发情况，能够自行解决或者上网查阅相关资料  必须说明的是，写一篇面向新手的教程本身就是一件非常令人苦恼的事情。我不能确定我眼中的常识是否是新手闻所未闻的新知识，我不能确定我习惯并自以为清晰明了的描述会不会让新手看的云里雾里。因此在教程中我尽可能侧重于讲解而不是一直单调地告诉你如何去做。同时，因为面向新手，教程也会尽量避免其他知识的扩展以减少新手的阅读压力。此外，因为我很少使用 Windows（或者说 Windows 使用经验几乎为零），所以下文关于 Windows 的描述可能会有一些不准确的地方。如有错误还请指正。\n当然，你可以另辟蹊径，通过一些特殊方法（如安装脚本）完成安装过程，但是这样无疑失去了 Arch Linux 安装的意义。这样做最直接的后果是，对于 Arch Linux 这种需要你自己维护的系统，如果你甚至没有自己动手完成你的系统安装过程，那么在系统出现问题的时候你多半无计可施只能重装系统了。\n如果你是一个小白也不用太过担心，安装过程虽然是通过命令行一步一步操作，看似非常复杂繁琐。但是实际操作过程中你会发现，大多数情况下你并不需要理解每一个步骤的原因、每一行命令的意思。一般来说，安装过程也不会出现什么技术难点。\n如果你有一定的 Linux 使用经验，根据本教程，你可以轻松完成 Arch Linux + Windows 双系统的安装，部分命令可以根据你的习惯或者需求改为其他命令，本教程仅供参照。\n如果你并不是想安装双系统，只是单纯安装 Arch Linux 这一个系统，可以根据需求对教程进行改动（教程步骤中也会进行说明）或参阅我单独的 Arch Linux 安装教程（写完了会贴在评论区）。\n我更希望的是，新人们能通过我这篇教程更多地了解 Arch Linux 和 Linux 本身，而不是机械式和目的性地完成一个操作系统的安装。\n正文 确定电脑的启动类型 电脑启动类型可以粗略地分为「传统 BIOS」（简称 BIOS）和「UEFI」。因为两者在启动盘制作上和安装步骤上存在差异，所以必须在安装前对电脑的启动类型进行确认。如果是最近十年生产的设备，使用的一般是 UEFI 引导。\n首先启动进入 Windows 桌面，同时按下 Win+R 打开运行对话框，然后输入 msinfo32 后回车确认打开系统信息，查看「BIOS 模式」是不是 UEFI。如果是，则为 UEFI 引导，反之则为传统 BIOS 引导。\nISO 镜像烧录  Windows 建议使用 Rufus 烧录镜像。   Rufus 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。麻雀虽小，五脏俱全，体积虽小，功能全面。\n  注意，在某些 Linux 可用的软碟通(UItraISO)不适用于 Arch Linux\n   下载完成后，双击打开该文件，允许或不允许 Rufus 联网检查程序更新皆可。\n 检查更新 \n  插入你的 U 盘，在「设备」选项框中选择你的 U 盘（一般会默认选中，以下图片均为示例）。\n  在「引导类型选择」下选择 「镜像文件（请选择）」，然后单击右侧的「选择」来选择你下载好的镜像。\n  「持久分区大小」默认即可。对于「分区类型」，UEFI 引导选择「GPT」，BIOS 引导保持「MBR」即可\n 示例 \n  「格式化选项」保持默认即可，单击开始来进行下一步。\n 示例 \n  选择 「以 ISO 镜像 模式写入（推荐）」，单击「OK」进行下一步。\n \n  单击开始来烧录镜像。\n 示例 \n  等待烧录完成即可。（下图即为烧录完成的一个示例）\n 示例 \n   Linux 使用 dd 命令 ：  dd if=ISO镜像位置 of=/dev/sdX bs=4M /dev/sdX 为用作启动盘的 U 盘标识。\n输入如下命令确定获取电脑硬盘信息，所获取的信息中应该包含 U 盘标识 sudo fdisk -l\n启动前准备工作 为 Arch Linux 准备空闲的硬盘空间 首先打开电脑启动到 Windows。这里我们使用「磁盘管理」来为 Arch Linux 准备一个可用的磁盘空间用以安装。如果你只打算安装 Arch Linux 单系统则可以跳过这步。\n 对于 Windows 7 及以上的 Windows 设备，可以右键「此电脑」(或「我的电脑」及其他可能被你自定义的名字)，然后选择「管理」—「磁盘管理」。 对于 Windows 8 及以上的 Windows 设备，可以直接 Win+X 后选择磁盘管理。  这个界面显示的是你电脑上安装的所有存储设备的情况。\n不止是电脑的硬盘，其余如光驱和 U 盘（如果已经插入）也会在此处显示。\n 示例 \n一般情况下，在该界面中，深蓝色的分区是主分区，浅蓝色的分区是扩展分区，绿色的是空闲没有使用的空间。我们现在要做的是选择一个剩余空间足够大的分区，空出来给我们的 Arch Linux 使用。\n以下分为两种情况处理\n  如果分区空间不是特别充裕，建议把最后一个分区空出来，即把该分区的数据全部备份到其他电脑分区然后把空出来的分区删掉。 注意，是删掉整个分区，不是格式化！！ 虽然说选择其中的任意一个对安装本身没有影响，但是删除分区和格式化分区在后续操作上会有所不同。除非你清楚你在做什么并且知道后续的操作方法，否则请选择删除分区。 删除分区的方法是，右键你要删除的分区，然后点击“删除卷”再确认。注意，该操作会擦除该分区的所有数据，而且过程不可逆。操作完成后该分区就会变成成绿色的“可用空间”。这就是为 Arch Linux 准备好的空间。\n  如果你的 Windows 下的分区空闲空间足够大，则可以从空闲空间里压缩一部分空间来安装 Arch Linux。 步骤是，先在磁盘管理器（上图界面）中该分区上点右键，然后点“压缩卷”，Windows 会让你输入一个数值。这个数值是以 MB 为单位，输入的是你要分割出来的空间大小。这个数值最大不能超过该分区的空闲空间大小。 最后点击确定，接着会有一个整理数据和分割的过程，等它整理完“空闲空间”出现就完成了。\n   友情提醒：不同分区压缩出来的空闲空间不会合并在一起给你用。所以，不要想着从每个分区里拿一个空间出来凑足需要的空闲空间。\n 关于这个空间的大小，我认为对于初步的接触和学习来说，至少要 30G 以上，50G 为基准线。如果小于 30G 但是在 20G 以上，安装当然没有问题，不过基本上没有空间给用户存储数据使用了。\n禁用快速启动和安全启动 Arch Linux 单系统安装可以不禁用 Windows 的快速启动但一定要禁用安全启动。\n该部分建议自行在网上寻找相关教程。一部分原因是因为不同系统版本存在差异不方便统一概括，一部分是因为不同电脑可能存在不同的设置方式（比如进 BIOS），因此最好的办法是在网上找到自己机型对应的教程。\n设置 Windows 时区偏移 Arch Linux 单系统安装可以跳过这步。\nLinux 和 Windows 对硬件时钟的处理方式不同，如果不加以特别设置容易造成两个系统时间混乱。\nArch Wiki 及我个人推荐的方法是设置 Windows 时区偏移。\nWindows 下使用管理员权限执行下列命令即可。\nreg add \u0026#34;HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\TimeZoneInformation\u0026#34; /v RealTimeIsUniversal /d 1 /t REG_DWORD /f 电脑环境确认 进行到这一步时，我们默认你电脑目前处于以下环境中的某一种。\n 电脑使用传统 BIOS 引导+MBR 分区，且电脑已经安装一个运行正常的 Windows。电脑无与 Arch Linux 安装有关的硬件问题。 电脑使用 UEFI 引导+ GPT 分区，且电脑已经安装一个运行正常的 Windows。电脑无与 Arch Linux 安装有关的硬件问题。  启动盘使用 首先让电脑从 U 盘启动。\n 你问怎么从 U 盘启动？？我建议你点击此链接获取帮助\n大多数的电脑都有一个在开机时按下一个按键来选择从哪里启动的选项（例如 Dell 和 Lenovo 是 F12，台式机是 Delete）。\n 如果你的电脑旧到不支持从 U 盘启动…… 建议还是换台电脑吧……\n从U盘启动后电脑会出现一个新界面，传统BIOS启动和UEFI启动在该界面显示结果不一样。\nBIOS 启动界面：\n BIOS \n​\tUEFI 启动界面：\n UEFI \n无论你是哪种启动，用光标选中第一项然后回车即可启动镜像。 启动成功后你应该看到类似如图所示界面：  示例 \n 如果未出现该提示符，则可能是启动盘出现了问题，建议重新烧录镜像…\n 这里先简单地对这个界面（终端）进行介绍，以减少后面重复累赘（当然，这部分不看也行，我觉得可能大部分人现在还看不懂，看得懂的又没必要看\u0026hellip;）。\n首先，包括 Arch Linux 在内的绝大多数 Linux 发行版以及 Windows 都是多用户操作系统。多用户操作系统，顾名思义，一个操作系统上可以存在多个相对独立的用户帐号，就像你熟悉的 QQ 可以同时登录多个 QQ 号。\n为了区分不同的用户，我们需要给不同的用户一个唯一的用户名以对他们进行区分。比如，如果已经存在一个用户他叫 xiaoming，则不能在同一个操作系统存在另一个也叫 xiaoming 的用户，这就像集合内元素的互异性。\n同时，因为存在多个用户，我们需要一个管理员（Admin）作为这个系统的超级用户（Super User）。管理员享有系统内至高无上的管理员权限（Administrator rights），他拥有一个特殊且唯一的用户名：root。\n就像用户有自己的用户名，电脑或者说主机（host）也有自己的主机名（hostname）。考虑到一个操作系统一般不会同时运行在多个设备上，所以主机名一般是给系统和程序看的，你无需特别关心。你可以自定义你电脑的主机名。\n补充一下，上面那段话中括号内的英文不是我矫情作秀所以特意加上去体现我的文化水平（虽然也体现不了啥），而是告诉你这些常见名词的英文称呼。你可能会在系统安装过程中或者日后使用中遇到这些名词所对应的英文单词，了解这些英文称呼能帮助你判断当前系统的情况该从何下手。\n言归正传。经过上面简单解释，我们可以对如下的提示符进行科学的解释。\nroot@archiso ~ # 提示符 @ 前的 root 是当前用户的用户名，@ 后的 archiso 是当前系统（Arch Linux 启动盘）的主机名，～ 符号代表你当前所处的目录（至于 ～ 算啥目录\u0026hellip;这里就不加大新手理解负担了），# 代表当前用户为管理员用户（普通用户为 $），# 后面输入的命令将会以管理员权限无条件执行。\n特别说明，并非终端一定有这个提示符，也不是说提示符一定按照这个格式存在，因为这些都是可以由你自定义的。\n你需要在这个称之为终端的界面输入你的命令完成安装过程，命令输入后必须回车确认，系统才会执行。\n终端的命令需要精确到字符的大小写以及空格。除非你有进行特别配置，否则终端并不能智能地识别你的输入错误。所以，当你终端报错时，第一时间该做的就是检查是否打错了字符或者少了空格。\n终端（特指 zsh 和 bash 这样的 shell）有个特别强大且实用的功能是 Tab 键补全。比如当你需要输入 pacstrap，你可以只输入 pacs 然后按一次键盘的 Tab 键，终端会自动补全 pacstrap。当存在多个可能的补全项，比如你只输入一个 s 就按下了 Tab 键，终端无法做到自动补全，这时它可能会列出所有可能的选项或者报错。当然，就像上面一样，这也可以由你自定义。善用 Tab 补全能极高地提高我们的输入效率。\n我们通过下面一行简单的命令认识一下终端的命令。\nrm -rf /* rm 是英语单词 remove（移除）的简写，在 Linux 下通常指删除文件；短横线 - 后是该命令的参数，r 代表递归，f 代表强制执行；最后的 / 代表根目录，/ 后加 * 是一种常见的匹配方法（姑且先这样解释），代表 / 目录下所有文件的和文件夹。\n所以，根据上面的解释，我们现在可以理解，上面那行命令的意思是，删除 / 目录下所有文件和文件夹。空格将命令 rm 与参数 -rf 隔开，如果不隔开，终端会识别你输入的命令为 rm-rf。显然，这个命令不存在，所以终端会报错。\n连接网络并同步时间  如果你能连接有线网络，最好的办法是直接插网线连接网络。 如果你 如果你电脑有无线网卡的话（绝大多数电脑应该都有），则可以尝试通过 WiFi 连接。我们可以通过 archiso 内置的 iwd 软件完成这一过程。   2020 年 7 月的 ArchISO 砍掉了 netctl，经典的 wifi-menu 已被 iwctl 取代。如果你在某个教程里还看到了「使用 wifi-menu 连接 WiFi」这样的字样，请提醒作者更新教程……\n所以 wpa_supplicant 使用者竟成最后赢家。\n 在使用 iwctl 之前，我们需要先检查一下你的网卡是否被物理禁用或软件禁用。\n物理禁用一般需要你的电脑存在可以物理按键或滑块可以手动关闭或打开网卡（当然，我觉得一般电脑是没有这玩意的）。\n软件禁用则考虑网卡是否被 rfkill 禁用，目前已知 ideapad（联想小新系列）会自动禁用无线网卡和蓝牙。\n对于无线网卡被 rfkill 禁用的用户，输入以下命令解除 block\nrfkill unblock all 在确认无误后，输入 iwctl 进入 iwd 的 shell。\n输入 device list 列出你电脑的无线网络设备（一般就是你电脑的网卡）\n常见的网卡名称是 wlan0 这样的。请根据自己电脑的实际情况判断（如果看不懂上一个命令的输出可以用 wlan0 这个名字试试）。\n输入如下命令列出所有网络，命令中的 device 需要替换为你上一步看到的网卡的名称\nstation device get-networks 比如，如果你的网卡名称是 wlan0，那么你应该输入的命令是\nstation wlan0 get-networks 如果你的电脑无线网卡工作正常的话，此时屏幕上会列出你熟悉的 WiFi 名称。如果没有任何结果或者出现报错的话，则需要你自己检查是否是网卡出现问题或者你打错了某个字符或者少了空格。\n输入如下命令连接 WiFi，就像上面一样，device 需要替换成你电脑网卡的名字，SSID 需要替换成你想要连接且上面已经列出的 WiFi 名称\nstation device connect SSID 如果 WiFi 有密码，此时会提示你输入密码，输入 WiFi 密码后回车即可。\n完成上述操作后，输入 exit 退出 iwd 的 shell。\n为了检测电脑真的是否连接上网络，我们可以输入如下命令\nping www.baidu.com ping 后面的网址可以是任何国内可以直连的网址。\n如果已连接上网络，则电脑会疯狂输出一大堆延迟测试数据。反之则只有简单的Timeout报错或长时间无输出结果。\n此时按 Ctrl+C 以中止输出。\nCtrl+C 的意思是同时按住 Ctrl 键和 C 键。在 Linux 终端下，Ctrl+C 可以近似理解为强行终止当前终端的活动进程。比如上面，ping 这个进程正在运行，我们通过 Ctrl+C 将它强行终止。\n输入如下命令设置时间为 UTC 并完成 NTP 时间同步。\nhwclock --systohc --utc timedatectl set-ntp true 准备硬盘分区  对于双系统而言，最麻烦的一部分无疑就是硬盘分区和双系统引导。完成这部分需要读者拥有发育健全的大脑并且有一定的自主操作能力。\n 你可以先输入fdisk -l查看当前电脑硬盘的状态。\n输出结果中的 /dev/sdX 代表的是你电脑的硬盘。\n （输出结果不可能真的出现/dev/sdX，此处的 X 只是代表如 a、b、c 这样的符号，如数学中用字母代替数的作用）\n  如果你的电脑只有一个硬盘，你的输出结果应该仅含 /dev/sda和/dev/sdb。\n其中，/dev/sda 代表的是你电脑的硬盘，/dev/sdb 代表的是你的启动盘（U 盘）。\n/dev/sda 后的数字，如/dev/sda1，则代表/dev/sda 这个磁盘下的第几个分区。\n如果这是一块新硬盘或者已经清空的硬盘的话，你大概看不到 /dev/sda1 这样的分区。\n  如果你看到了一些其它的东西，比如/dev/nvme0n1 这样的，则代表你的电脑上有一块 NVMe SSD\n如果是/dev/mmcblk0 这样的，则代表你的电脑上有 eMMC 存储。\n此时你的启动盘可能会被归为 /dev/sda ，所以下面要根据你自己实际情况操作\n 再有其他情况我也不知道了\n对硬盘进行分区 在终端输入如下命令进行分区： cfdisk /dev/sdX\n最后一次提醒，/dev/sdX 只是示例，具体命令需要根据你实际情况进行更改，比如 cfdisk /dev/nvme0n1 这样的。\n此时屏幕应该显示你电脑相应的系统硬盘的信息。 同时，屏幕底部会显示几个［xxx］，其中有\n[ Delete ] [ New ] [ Quit ] [ Help ] [ Write ] [ Dump ] 这几个［xxx］的意思分别是\n[删除] [新建] [退出] [帮助] [写入] [转储] 底部的选项的位置可能会随着 cfdisk 的更新发生变化，但是相应选项的功能不会改变。\n 在硬盘信息处，应该出现一个绿色的Free space，这个就是你在 Windows 中压缩给 Arch Linux 的空间。 将光标通过键盘上下方向键移至Free space，再通过键盘左右方向键选择[New]，以新建分区。\n  新建分区需要手动输入分区大小。 例如新建一个 30G 大小的分区，你应该将光标通过键盘上下方向键移至Free space，再通过键盘左右方向键选择[New]，敲回车后输入30G，然后回车确认\n 对于怎么分区以及分多大我先要进行一些说明。你可能在其他 Arch Linux 安装教程或者其他别的 Linux 发行版安装教程中看到他们关于分区大小的各种理论或规范，实际上，如何分区、分区多大是没有固定标准的。当你对 Linux 足够熟悉并清楚该如何操作，不分区都是可以的，只要完成 Windows 的引导要求即可。\n这里介绍一个比较通行的分区方法，同时也建议按照如下顺序进行分区。\n /boot分区，用来存储启动信息，该分区一般400M足够。 UEFI 引导在这时不要分出/boot分区，因为要双系统启动需要把 Windows 的 EFI 分区挂载到/boot上。 /swap分区，交换分区，相当于Windows的虚拟内存。该分区大小视电脑内存大小而定。电脑小于或等于2G内存则建议设为内存大小的2倍及以上，即 4G，不过太大也没有意义。电脑内存大于2G可以设置为 4G。如果你的内存足够大（大于或等于 8G），也可以考虑不分这个区。你也可以设置交换文件代替交换分区，这里不进行介绍。 /home分区（可选），即用户分区，用于存储用户的数据。该分区是用户自己数据存储的地方。如果你不单独分出 home 分区，则你的所有数据将仅存储在 /mnt 分区。你可以将 /mnt 分区理解为 Windows 下的 C 盘，/home 是 Windows 下的 D 盘、E 盘。对于新手，建议不创建单独的 /home 分区；对于有一点经验的用户，建议先创建 /mnt 再创建 /home，并把磁盘剩余的所有空间都留给 /home。 /mnt分区，即根目录，用来存储系统和将来安装的软件等数据，如果你创建单独的 /home 分区，则建议该分区大小不小于 20G，根据你的需求和剩余空间大小而定；如果不创建单独的 /home 分区，请把磁盘所有剩余空间留给 /mnt。   如果电脑是传统BIOS启动，选择[ New ]回车后有可能需要选择建立主分区还是扩展分区。(该情形会在硬盘中没有分区或者主分区不足4个时询问。如果硬盘已经有4个主分区则不会询问，默认建立扩展分区。) EFI启动可以建立无限个主分区，所以不会询问，直接建立主分区。\n  原则上尽量使用主分区。如果主分区用尽，建立扩展分区时注意不要修改分区大小，直接回车。因为扩展分区本身不是一个分区。 回车后会发现扩展分区下的硬盘还是剩余空间，只是被划分到扩展分区下了。\n 按上面建议的分区大小，分别建立四个分区后，选择[ Write ]写入再选择[ Quit ]退出。退出时你需要输入yes确认。输入完整的yes不是输入一个y。\n挂载分区 在终端输入如下命令以检查分区情况：\nfdisk -l 此时屏幕应该显示你当前电脑的硬盘及各硬盘的分区情况。\n分区表应该出现你所新建的分区，且大小与你输入的分区大小一致。\n确认新分区建立无误后，输入如下命令对新建分区进行格式化。这里使用经典的 ext4 文件系统，在你对 Linux 文件系统有一点了解后，你可以换用其他的文件系统，比如 btrfs。\n 下面所有的分区符号如/dev/sda1仅为示例，实际操作时应该结合自己实际情况进行格式化。 假设新建的/mnt分区符号为/dev/sdb3，则应该输入mkfs.ext4 /dev/sdb3以格式化\n   格式化/mnt分区：\nmkfs.ext4 /dev/sda1   格式化/boot分区 为了通用性，建议该分区格式化为fat32格式：\nmkfs.vfat -F32 /dev/sda2 同上，UEFI引导忽略此步\n  初始化/swap分区：\nmkswap /dev/sda3   格式化/home分区（如果有）：\nmkfs.ext4 /dev/sda4    格式化分区为 ext4 分区时通常需要输入y以确认。 其他分区格式化，没有报错则意味着操作成功。\n 接下来挂载分区\n 挂载/mnt分区：  mount /dev/sda1 /mnt 挂载/boot分区： 对于 UEFI 引导，/dev/sda2应该改为 Windows 的 EFI 分区  mkdir -p /mnt/boot mount /dev/sda2 /mnt/boot /swap分区无需挂载，但是需要输入如下命令启用：  swapon /dev/sda3 建立/home分区目录并挂载分区：  mkdir /mnt/home mount /dev/sda4 /mnt/home 至此，硬盘分区和相应目录挂载已经全部完成。\n 建议再次输入lsblk命令检查硬盘分区情况，一般情况下，每个相应的分区后面应该标注其挂载的目录。\n  以上过程中若出现报错不通过的情况，为了节约排查问题时间，可以直接从重新执行cfdisk命令重新分区开始。重新分区前，已经挂载好的目录需要进行卸载。 例，卸载/home分区目录的命令如下： unmount /dev/sda4 /mnt/home\n 安装 Arch Linux 基本系统  Arch Linux 的安装不仅需要连接网络，而且还要从网络下载大量数据。因为 Arch Linux 主服务器在国外，加之某些众所周知的原因，国内网络使用国外服务器下载会非常慢。因此，建议使用国内镜像网站进行下载和安装工作。\n 输入如下命令，利用 reflector 自动替换国内镜像源\nreflector --country \u0026#39;China\u0026#39; --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist 该命令相对来说比较长，请注意不要打错字符或漏空格。\n修改完镜像源之后，输入如下命令刷新镜像源\npacman -Syy 下面开始安装基本系统。\n开始之前，我有必要介绍一下 Linux 的 软件包管理程序（package manager，我简称为包管理）。Linux 的 包管理 是 Linux 发行版中最重要的软件之一（虽然有的 Linux 发行版没有包管理），不同的 Linux 发行版除非存在父子关系否则包管理是不同的，Linux 几乎所有的软件都必须通过 包管理 安装。\n包管理安装软件分为在线安装和本地安装。这里仅介绍在线安装（本地安装大家都懂吧\u0026hellip;）。\n在线安装是绝大多数情况下你使用的安装方法。包管理在当前使用的软件镜像源（mirror）中搜索你想要安装的软件包，然后直接下载安装。为了加快在线下载速度，几乎所有 Linux 包管理都会从镜像源下载软件包列表，这样如果需要安装软件的话，可以直接从本地缓存中搜索软件包的下载链接。也因为本地缓存的机制，我们需要经常刷新本地缓存，上面的 pacman -Syy 就是 Arch Linux 刷新本地缓存的方法。\nArch Linux 的包管理软件叫做 Pacman（没开玩笑，就这名字\u0026hellip;）。Pacman 在线安装软件的命令为 pacman -S 软件包名字 ，关于 Pacman 的更多用法文末会进行介绍。\n输入如下命令借助 pacstrap 脚本完成安装。pacstrap 是 ArchISO 中的一个脚本，可以自动完成基础但繁琐的系统配置如内核的配置。\npacstrap /mnt base base-devel linux linux-firmware nano vim e2fsprogs ntfs-3g 在上述命令中，base 是元软件包（基本系统所需依赖，你可以不知道它是啥但是必须安装），base-devel 是基础软件包组，linux 是内核，linux-firmware 是固件包，nano、vim 是常用编辑器，e2fsprogs 是 ext4 文件系统所需工具，如果你是按照上面教程使用 ext4 文件系统则必须安装该软件包。ntfs-3g 是与 Windows 的 NTFS 有关的软件包，如果是单系统可以不安装。\n这里简单介绍一下软件包组。对于 Linux 用户来说，我们可能需要一次性安装一大堆软件包。虽然我们可以通过包管理批量安装多个软件，但是敲那么多软件的名字无疑非常的枯燥无聊且繁琐。因此，Arch Linux 的打包者将具有相关性的多个软件包归入一个软件包组，虽然软件包组不是一个软件包但是安装操作于一个真正的软件包相同。比如上面的 base-devel 就是将系统基础软件包归入一个软件包组，我们只需要输入软件包组的名字就可以安装这些软件包。\n 你可以将上述命令中的linux替换为 Kernel 页面中介绍的内核软件包。如果知道自己的需求并了解后果，可以不安装 linux-firmware.\n  安装过程中会出现选择软件包的提示，建议“默认=all”，即直接敲回车默认安装，输入一个“y”确认安装。 在网络不佳的情况下，下载过程可能会出现意外断流，此时重复上面的命令即可。\n 当安装停止且成功后，输入如下命令以生成 fstab 文件。fstab 是 file system table 的缩写，你可以不知道它是啥但是它必不可少。\ngenfstab -U -p /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 为了确认文件生成，建议输入如下命令以确认：\nnano /mnt/etc/fstab 确认无误后，输入Ctrl + X退出。\nNano 是 Linux 下一个简单轻量的文本编辑器，适合新手使用，后文还会多次使用该编辑器。如果已经有一定的 Linux 使用经验，建议换用 Vim。\n如果一切正常的话，此时你应该成功在电脑硬盘安装了 Arch Linux 基本系统。\n安装基本系统后的环境配置 输入如下命令进入新安装的系统：\narch-chroot /mnt /bin/bash 现在你进入了电脑硬盘上的 Arch Linux 。\n如果一切正常的话，细心的你会发现提示符由 root@archiso ~ # 变为 [root@archiso /]#。\n上面有提及，Linux 中默认有一个用户叫 root，拥有对系统的一切权力。这意味着，即使让系统删除自己本身也会执行无误，比如著名命令 rm -rf /*，千万不要输入这个命令，否则后果自负。\n现在安装系统默认使用的是 root 用户。\n输入下面命令来设置 root 用户密码：\npasswd  输入密码后需要回车确认，密码需要输入两次。\n密码在输入的时候不会显示，不用担心是自己键盘坏了。\n 因为root用户权力过大大，即使删掉系统本身，也会被执行。为了避免日常使用因为权限过高造成某些不可逆而又本可以避免的损失，Linux 桌面用户需要添加一个普通用户，且该用户可以获取临时root权限。 一般情况下，这个新添加的用户将会是你后续登录 Linux 的主要用户。\n执行以下命令新建一个隶属于 wheel 组的新用户。\nuseradd -m -G wheel -s /bin/bash 你的用户名 这里友情提醒一下，上面所设的用户名必须是小写字母，而且最好短一点（如果你不怕之后使用麻烦的话就随意吧）。\n输入如下命令为新建用户设置密码（修改密码也是这个命令），密码不少于 6 位或 8 位。\npasswd 你的用户名  同上，密码需要输入两次，且密码不会显示。\n因为这个密码在日常使用中可能需要经常输入，所以建议密码不要太长。\n 为了该普通用户能获取临时 root 权限，我们需要修改 wheel 的权限设置。 输入如下命令打开sudoers文件：\nnano /etc/sudoers 在打开的文件中找到以下两行：\n## Uncomment to allow members of group wheel to execute any command # %wheel ALL=(ALL) ALL 确认无误后， 把%wheel前面的注释符号（#）去掉，（%）要留下。 最后的结果应该是下面这样：\n## Uncomment to allow members of group wheel to execute any command %wheel ALL=(ALL) ALL 同时按Ctrl + X，然后保存退出。\n 后续若需要普通用户在执行某条命令时临时获得 root 权限，则在该条命令前加上sudo\n例：sudo pacman -Syu\n　sudo rm -rf /*\n在有密码的情况下，使用 sudo 执行命令需要输入 当前用户的密码 以二次确认。\n 如同用户有一个名字一样，Linux 下电脑也需要一个名字。 输入如下命令配置电脑的主机名：\necho 你电脑的主机名 \u0026gt; /etc/hostname  主机名可以是任何你喜欢的名字，但是不能含空格等字符。\n 下面对系统 host 进行配置（可选，如果嫌麻烦可以跳过这一步，如果不设置可能会在网络变更时出现应用无法启动等问题）。\n输入以下命令：\nnano /etc/hosts 你应该会看到如下符号\n#\u0026lt;ip-address\u0026gt; \u0026lt;hostname.domain.org\u0026gt; \u0026lt;hostname\u0026gt; 你需要添加相应字符，使得界面如下所示：\n127.0.0.1\tlocalhost ::1\tlocalhost 127.0.1.1\t你电脑主机名.localdomain\t你电脑主机名  如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 127.0.1.1。\n 确认无误后，同时按住Ctrl + X，输入y，回车再退出。\n安装微码并配置 Grub 引导 微码安装命令根据处理器选择。\n  Intel 用户输入如下命令\npacman -S intel-ucode   AMD 用户输入如下命令\npacman -S amd-ucode   至于其他型号的处理器比如国产处理器我就不知道怎么安装了\u0026hellip;\n以下操作分为传统 BIOS 引导和 UEFI 引导\n如果不安装双系统，则不需要安装 os-prober。\n  如果你是传统BIOS引导，则输入以下命令：\npacman -S grub os-prober 然后输入以下命令安装到硬盘：\ngrub-install --target=i386-pc /dev/sda --recheck    第二条命令中/dev/sda应该根据你实际情况，改为你自己硬盘名字\n   如果你是UEFI引导，则输入以下命令：\npacman -S grub efibootmgr os-prober 然后输入以下命令安装到硬盘：\n  grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck  如果你未按照上述过程将 EFI 系统分区挂载到 /boot ，请自行修改 \u0026ndash;efi-directory 的值\n Grub 2.06 更新后默认禁用 os-prober。虽然我一时半会也还不知道这样做的意义何在，但是上游有改动，我们用户也只能动手适配了。\n输入下面命令为 Grub 启用 os-prober。\necho \u0026#34;GRUB_DISABLE_OS_PROBER=false\u0026#34; \u0026gt;\u0026gt; /etc/grub/grub.cfg 然后输入如下命令生成必要的配置文件：\ngrub-mkconfig -o /boot/grub/grub.cfg 注意，你一定要确定输入上面命令有输出结果。\n输出结果大致如下：\nGenerating grub configuration file ... Found linux image: /boot/vmlinuz-linux Found initrd image(s) in /boot: initramfs-linux.img Found fallback initrd image(s) in /boot: initramfs-linux-fallback.img done  如果输入上一条命令没有任何输出结果，请务必停下来检查上面所有步骤有没有哪一处出现问题，或者重新进行所有安装步骤！！\n 配置语言和区域 /etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号＃即可。（建议选择带 UTF-8 的项） 输入如下命令修改 locale.gen 文件，配置语言环境： nano /etc/locale.gen\n分别找到以下字符，删除该行最前面的#\n#en_US.UTF-8 UTF-8 #zh_CN.UTF-8 UTF-8 #zh_TW.UTF-8 UTF-8  比如，你看到#en_US.UTF-8 UTF-8时，你需要删除该行最前面的#，使之变成en_US.UTF-8 UTF-8。\n  你也可以根据自己需求，添加其他环境。\n 编辑完成后同时按住Ctrl + X退出。\n退出后输入如下命令刷新区域信息：\nlocale-gen 如果你上一步操作无误的话，命令输出结果应该包含\nen_US.UTF-8 UTF-8 zh_CN.UTF-8 UTF-8 zh_TW.UTF-8 UTF-8 输入如下命令将区域信息写入 locale-conf 文件：\necho LANG=en_US.UTF-8 \u0026gt; /etc/locale.conf  毫无疑问，你可以选择将上一条命令的en_US.UTF-8改为zh_CN.UTF-8。但请谨慎考虑后进行操作。\nlocale.conf 文件是全局设置，如果这里设成中文或者其他非英文环境，桌面环境下字符会正常显示，但是在命令行下会变成乱码。\n如果看不懂请忽略此段。\n 输入如下命令设置时区为亚洲上海：\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 安装桌面环境 没错，对于 Linux 发行版，系统和 GUI 环境是分离的。（GUI 是图形化用户界面的简称）\n一般来说，一个完整的 Linux 操作系统是不需要 GUI 的。如果我们是想将电脑变成一个 Linux 服务器，安装教程可以到此为止，但是对于我们普通的 Linux 桌面用户，则需要安装相应的图形化界面。\nLinux 下的图形化界面可以不严谨地分为窗口管理器（Windows Manager，简称 WM）和桌面环境（Desktop Environment，简称 DE）。虽然有话说“窗口管理器是所有 Linux 用户的归途”，但是对于新手来说，桌面环境要更为友好一点。\n桌面环境可以不严谨地分为由 X11 驱动和由 Wayland 驱动。\n  X11 通常简称为 X，属于 X.Org 项目，也可以粗略地称为 Xorg。Xorg 属于图形化应用程序必备条件，属于无论如何都需要安装地软件包组，是所有桌面环境的依赖（dependence）。几乎所有的桌面环境都支持 X11（之所以说几乎所有而不是全部，是因为我也不知道有没有不支持的\u0026hellip;)。X11 的缺点是太过古老、代码的历史残留太多，对高分辨率屏幕（简称 HiDPI，通常指分辨率在 1920x1080 以上的屏幕）支持不佳。\n  Wayland 是一个用于混成窗口管理器与其客户端对话的协议，也是实现该协议的一个库。Wayland 的显著优点是对 HiDPI 的支持较好，但是目前还并未普及，因此目前表现的稳定性和兼容性较差，游戏性能感人。Xwayland 提供了一个兼容层在 Wayland 上运行 X11 软件。目前绝大多数桌面环境不支持 Wayland 或者使用效果不佳。\n  如果你电脑不属于 HiDPI，这里建议先使用 X11 而不是 Wayland。如果你的电脑属于 HiDPI，这里建议先尝试在 X11 完成 HiDPI 配置，如果配置效果不佳或者不愿动手完成复杂的配置，再尝试 Wayland。\n郑重申明，我不是歧视 Wayland。虽然说 Wayland 很可能是未来 Linux 桌面环境的主流，但是 Wayland 的目前的表现确实有点感人。且不论支持 Wayland 的桌面环境已经是少之又少，在支持 Wayland 的桌面环境中，除了少数桌面环境下表现尚可，其他的桌面环境下表现几乎不能日常桌面环境使用的需求。\n（以上发言来自一名 Wayland 受害者）\n 这里插几句题外话。\n你可能在某些地方看到一些 Linux 狂热粉/半吊子 狂吹 “Linux bug 数量少”、“稳定性吊打 Windows 和 macOS”、“安全性高”之类的鬼话发言。虽然我的观点一直是“系统的稳定性和安全性取决于用户”，但可以肯定的是，Linux 的安全性和稳定性确实很高，前提是没有安装 GUI 环境。。。。\n虽然较之前几年，Linux 的 GUI 环境尤其是桌面环境有了长足发展，从开始“能看个视频就不错”到现在“甚至还能玩游戏”，但是平心而论当前综合体验相较 Windows 和 macOS 来说，功能属于勉强能用，bug 是只多不少。Linux 有很多桌面环境可以选择，但是几乎每一款都很坑。如果你没有感受到桌面的 bug 的话，只能说明你没发现（所以 Linux 用户都去玩窗口管理器了。。。\n 咳咳，言归正传。上面已经说到，Linux 的桌面是独立于系统本身的，也就是说，系统的启动和桌面的启动是完完全全的两码事。如果你不想每次启动系统后都要在黑乎乎的终端手动启动桌面的话，可以借助显示管理器（Display Manager，简称 DM，有些地方叫做登录管理器）。显示管理器同样也有很多个，可以和不同的桌面环境交叉使用。\n没错，显示管理器和桌面环境也是分开的。虽然这看起来让人感觉有点凌乱，但是这不恰恰说明 Linux 的高度自由性吗？（雾）\nArch Linux 可选择的桌面环境很多，这里只介绍相对主流和热门的两个桌面环境，显示管理器会附带介绍。\n不过在安装桌面环境之前，我们需要先安装 Xorg。输入如下命令安装 Xorg 软件包组。\npacman -S xorg 安装过程中，系统会询问你安装其中哪些软件包。如无其他需求或考虑，直接回车即可。\nKDE KDE 被誉为“最像 Windows 的 Linux 桌面”（雾）。基于 Qt 的 KDE 拥有超高的可自定义性、华丽的系统特效、完善的系统功能、人类友好的交互逻辑，以及你熟悉的开始菜单（\n虽然 KDE 默认的样式有点一言难尽，但是 KDE 的高度可自定义性让 KDE 可以变得极其华丽甚至长得和 Windows 或 macOS 接近一模一样。不夸张地说，KDE 几乎可以在外观上做到变成用户想要的任何样子，这一点可以参考 KDE 的美化教程的数量（虽然和 KDE 默认长得太丑也有一点关系）。\n除桌面本身以外，KDE 软件如 Kate 这样的编辑器也是非常简单好用（你之后体会到的），自带的系统组件可以满足绝大多数日常桌面需求。\n由于以上诸多优点，KDE 被认为是最适合新手并且也是最适合人类的 Linux 桌面环境，Arch Linux + KDE 很多时候被认为是一种标配。\n配合 KDE-Plasma 使用的最佳选择是 SDDM 显示管理器， KDE 和 Arch Wiki 都推荐使用此组合。\n输入如下命令安装 SDDM 和 KDE Plasma 桌面和某些 KDE 基础组件：\npacman -S plasma sddm konsole dolphin ark gwenview 你也可以直接输入下面的命令安装 SDDM 和 KDE 全家桶：\npacman -S plasma sddm kde-applications KDE 全家桶内包含了许多小游戏和某些意义不明的软件，适合 KDE 信仰用户。\n 目前为止，KDE 默认使用的是 X11，Wayland 支持尚不完善。如果你想使用 Wayland，则需要安装 plasma-wayland，然后在 SDDM 登录时选择 Wayland 版本 Plasma。\n输入如下命令安装 plasma-wayland：\npacman -S plasma-wayland 如果你使用 Nvida 显卡，则需要额外安装 egl-wayland：\npacman -S egl-wayland  输入如下命令设置 SDDM 开机自启：\nsystemctl enable sddm 输入完命令后，下次开机会直接进入图形界面，而非命令行界面。\nGNOME GNOME 被誉为“超像 macOS 的 Linux 桌面”（不是最像，因为很多桌面比它还像，让人叹为观止）。GNOME 基于 GTK，是 GNU 项目的一部分，虽然前段时间由于某些开源社区的冲突，官方公开声明表示自己不属于 GNU，但是这不改变它最初的性质。因为 GNU 协议，GNOME 是 Ubuntu 等一众 Linux 桌面发行版的默认桌面。\nGNOME 遵循 Material Degisn 设计语言，界面圆润清新，动画优雅舒适，自带功能较少但是扩展插件极多且功能丰富，可自定义性较强，有着先进但是不怎么人类友好的交互逻辑。\nGNOME 默认样式除了图标以外都属于尚可，GTK 的特效和样式丰富的主题让 GNOME 随便配置一下就可以做到简约与美观并存（当然，你可以配置得非常华丽）。\nGNOME 40 正式砍掉了侧边 Dash 栏并将其移动到桌面切换界面的底端，重新定义了 GUI 桌面的操作逻辑，极大地提高了桌面的使用效率。虽然目前骂声一片，但是真金不怕火炼，GNOME 40 一定会在未来彰显它对人类进步做出的巨大贡献。\n因为 GNOME 功能高度依赖扩展，而扩展又大多是非官方人员开发的，所以可能存在各种兼容性问题，也是“GNOME=bug”这个说法的来源之一。\nGNOME 自带软件实用性较差，如果有需求的话，可以使用 KDE 软件作为补充。\nGNOME 有配套的显示管理器 GDM。输入如下命令安装 GNOME 和 GDM。\npacman -S gnome gdm 如果想要 GNOME 全家桶的话，可以安装 gnome-extras 软件包组\npacman -S gnome-extras  GNOME 默认使用 Wayland 且表现基本满足日常使用需求（我没有开玩笑），但是如果你使用 Wayland 出现问题，可以通过在 GDM 禁用 Wayland 以更换为 X11。\n我们需要编辑 /etc/gdm/custom.conf 以禁用 Wayland。输入如下命令打开该文件。\nnano /etc/gdm/custom.conf 在文件中找到以下行：\n#WaylandEnable=false 去除该行开头的 # 注释，然后 Ctrl+X 再输入 y 保存退出。\n重启后下次登录将默认禁用 Wayland。\n 输入如下命令设置 GDM 开机自启：\nsystemctl enable gdm 输入完命令后，下次开机会直接进入图形界面，而非命令行界面。\n对系统进行本地化 安装中文字体 可选的字体含以下几种：\n Google Noto Fonts 系列 noto-fonts noto-fonts-cjk noto-fonts-emoji 思源黑体 adobe-source-han-sans-otc-fonts 文泉驿 wqy-microhei wqy-zenhei  以文泉驿为例，输入如下命令安装文泉驿米黑字体：\npacman -S wqy-microhei 这里建议全部安装以避免字体缺失导致的显示异常。\n 设置中文区域\n输入如下命令新建 .xprofile 文件： nano ~/.xprofile 如果已有此文件，也可以输入如上命令打开此文件 在文件中添加以下内容：\n  export LANG=zh_CN.UTF-8 export LANGUAGE=zh_CN:en_US export LC_CTYPE=en_US.UTF-8 同时按住Ctrl + X，然后保存退出。\n如果你是一步步按照本教程操作，则你此时是在 root 用户目录创建了 .xprofile 文件。因此，此时 .xprofile 只会影响 root 用户。 输入如下命令，将该文件复制到你创建的普通用户目录下：\ncp .xprofile /home/你的用户名 此时，你创建的普通用户区域也配置完成。\nArch Linux 已成功安装在你的电脑上！ 至此，Arch Linux 已经算是安装完成了。但是对于日常桌面用户，我们还有一些东西没有配置，而这些配置能优化我们的桌面体验。以及，你是否还记得 Windows 的引导还没生成呢（\n我们先输入如下命令启用 NetworkManager（注意大小写）。\nsystemctl enable NetworkManager NetworkManager 是一个方便好用的网络管理小组件，大部分桌面环境都内置了该软件。如果你当前使用的桌面环境没有内置该软件，则输入以下命令安装并启用。\npacman -S networkmanager systemctl enable NetworkManager 做完这些，我们先重启到你的桌面环境完成后续步骤。重启到桌面环境的好处是，你可以直接使用鼠标复制我后续的命令。\n如果你是按照我的教程一步一步来的，你现在应该还没有安装浏览器。这里推荐先安装 Firefox 浏览器（Chrome、Edge 之类的由于打包协议不在官方软件仓库中，无法在 Pacman 直接安装，后续会介绍如何安装 Chrome 和 Edge）。\n输入如下命令安装 Firefox：\npacman -S firefox 先输入 exit 退出 chroot，然后输入reboot重启，在屏幕完全黑下来的时候拔掉你的 U 盘。\n启动成功后，登录你的普通用户即可。\n安装完成后的一些基本配置和某些问题的解决 首先在系统设置连接网络（直接插网线的就不需要什么额外操作了）。\n接着找到你桌面环境的虚拟终端（Terminal，KDE 自带的叫做 Konsole，GNOME 自带的叫做 gnome-terminal）。后续命令在这个虚拟终端输入就行。\n安装中文输入法 安装 fcitx 输入法模块：\nsudo pacman -S fcitx-im fcitx5-chinese-addons 配置输入法的环境变量，输入如下命令编辑 /etc/environment\nsudo nano /etc/environment 在文件中添加以下内容：\nGTK_IM_MODULE=fcitx QT_IM_MODULE=fcitx XMODIFIERS=@im=fcitx SDL_IM_MODULE=fcitx 　修改完成后，保存退出。\n 重启电脑后在 fcitx 设置即可选择中文输入法。你也可以根据自己的需求安装其他输入法，如搜狗输入法。\n 添加 Arch Linux CN 源 输入如下命令编辑 pacman.conf 文件：\nsudo nano /etc/pacman.conf 在该文件末尾添加以下内容\n[archlinuxcn] Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 接着输入如下命令刷新源：\nsudo pacman -Syy 然后安装密匙：\nsudo pacman -S archlinuxcn-keyring  若密匙安装出错，则依次输入以下命令解决：\n sudo pacman -Syu haveged systemctl start haveged systemctl enable haveged rm -rf /etc/pacman.d/gnupg sudo pacman-key --init sudo pacman-key --populate archlinux sudo pacman-key --populate archlinuxcn sudo pacman -S archlinuxcn-keyring  Arch Linux 中文社区仓库是由 Arch Linux 中文社区驱动的非官方软件仓库，包含许多官方仓库未提供的额外的软件包，以及已有软件的 git 版本等变种。一部分软件包的打包脚本来源于 AUR，但也有许多包与 AUR 不一样。 详情见 Arch 中文社区\n 安装 yay（没错，就这名字） yay 是目前比较好用的 AUR 助手之一，可以方便快捷地帮助你完成 AUR 软件的安装。 archlinuxcn 中已经包含 yay，可以输入如下命令直接安装 yay：\nsudo pacman -S yay  yay 使用上与 Pacman 大致一致。 应避免以 root 权限运行 yay，即避免sudo yay这样的命令。 你也可以选择其他的 AUR 助手。\n 有了 yay，我们可以直接输入命令安装 AUR 的软件，比如，我们可以输入如下命令安装 Chrome。\nyay -S google-chrome 解决 Windows 加密问题 如果你是双系统安装，则输入以下命令安装 dislocker 。\nyay -S dislocker 然后输入如下命令再次生成配置文件：\nsudo grub-mkconfig -o /boot/grub/grub.cfg 如果一切正常，现在输出结果中应该含有Windows字样 如果没有的话，我也不知道怎么办了\n禁用 reflector 如果你还有印象的话，在安装过程中我们曾使用 reflector 更换替换国内镜像源。之所以使用 reflector 而不是直接修改文件不是因为这个东东多好用，而是这玩意它会未经你同意自动帮你替换镜像源列表，这样的话还不如直接就先用它替换国内镜像源。在日常使用中，我推荐禁用 reflector（默认应该是禁用状态，如果你喜欢也可以启用，不过它的国内体验非常感人\u0026hellip;）。\n输入如下命令禁用并停止 reflector：\nsudo systemctl disable --now reflector.service 输入如下命令启用并启动 reflector：\nsudo systemctl enable --now reflector.service 你还可以选择安装 zsh 和 Yakuake，这里不再介绍。\n安装教程至此可以说已经正式结束。Arch Linux 的配置当然不止于此（显卡驱动之类的还没配置呢），还有许多玩法等待你发现，但是这些内容放在安装教程中肯定不太合适。我后续应该会写一篇专门的优化教程，但是肯定不会像这篇教程一样详细了（实在太累了\u0026hellip;）。\n相关内容补充 Pacman 常用命令：   核心命令\nsudo pacman -Syu ：进行全面系统更新(即通俗意义的“滚”)\nsudo pacman -Sy： 刷新本地镜像源\nsudo pacman -Syy ： 强制刷新本地镜像源\n  安装软件\nsudo pacman -S packagename ： 安装指定软件\nsudo pacman -Sy packagename ： 刷新数据库后安装指定软件\nsudo pacman -Sv packagename ： 显示一些操作信息后安装指定软件\nsudo pacman -U pkg.tar.xz ：安装本地包\nsudo pacman -U link.tar.xz ：安装远程包\n  删除软件\nsudo pacman -R packagename ：删除指定软件，保留其全部已经安装的依赖关系\nsudo pacman -Rs packagename ：删除指定软件，并删除仅与该软件存在依赖关系的其他软件\nsudo pacman -Rsc packagename ：删除指定软件，并删除所有与该软件存在依赖关系的其他软件\nsudo pacman -Rd packagename ：删除指定软件，不检查依赖\n  搜索软件\nsudo pacman -Ss keyword：在仓库中搜索含关键字的软件\nsudo pacman -Qs keyword：在已安装软件中搜索含关键词的软件\nsudo pacman -Qi packagename：搜索指定软件的详细信息\nsudo pacman -Ql packagename：列出指定软件的文件\n  其他命令\nsudo pacman -Sw packagename：只下载指定软件而不安装\nsudo pacman -Sc ：清理未安装的软件包\nsudo pacman -Scc ：清理所有的缓存文件\n  Arch 相关链接   Arch Wiki：Link （推荐所有用户没事就多看看 Arch Wiki，遇到问题先看看 Arch Wiki 有没有解决方案。）\n  Arch 官方软件仓库：Link\n  Arch Linux CN 软件仓库：Link\n  AUR：Link\n  ","date":"2021-07-03T11:28:38Z","permalink":"https://blog.linioi.com/posts/18/","title":"Arch Linux + Windows 双系统安装教程"},{"content":"记 Gnome 的初体验 长期以来，我使用 KDE 而非 Gnome。劝退我的不只网上关于 Gnome 的负面言论诸如“Gnome 资源占用大”、“扩展 bug 多”、“开发线混乱，整个项目四分五裂”等，还有 Linus 在 Google＋ 中描述 Gnome “无可容忍的凌乱”。\n反观 KDE 却是出奇的一致好评，比如“最小的等离子桌面”、“高度可自定义”、“界面统一，新手易使用”等。\n因此，我几乎没有任何纠结地选择了 KDE（重要原因还是当时电脑配置太低，所以后面又换 Xfce 了\u0026hellip;)\n无奈地一次 Gnome 尝试 是的，是“无奈的一次尝试”。\n起因是 KDE 出现“合盖睡死”、“合盖再开盖花屏”等问题。\n强迫症的我当然不能忍受开机就铺面而来的撕裂感。对于不喜欢经常关机的我来说，如果仅 睡眠/挂起 意味着每次开机一片刺眼的条纹，那么继续使用 KDE 基本上可以帮助我戒掉电脑了（强迫症的挣扎）。\n长时间地查教程、社区提问无果后，我逐渐放弃了挣扎，并在纠结很久之后选择装了一个 Windows 10（至少这台电脑的 Windows 支持非常完善，Windows 10 不会开盖花屏）。\n这件事让我很沮丧，第一次因为自己能力不够而被迫选择自己所抗拒的 Windows 到底是一件让人开心不起来的事情。我将我的想法这样传达给了我的一个朋友，那个朋友这样反问，“为什么不试试 Gnome 呢？”\n我当然下意识拒绝了，理由便是开篇那些网上的负面言论。但是拒绝后的那个下午，我反复想起”使用 Gnome“的提议。\n既然别无选择，为什么不给 Gnome 一个机会呢？（态度好像不太对\n意料之外：Gnome 给我的惊喜 经过一番熟练的操作（别问我我为什么这么熟练），我完成了 Arch Linux + Gnome 的安装。\n重启第一眼看到的 GDM 就给了我一个惊喜——精致的 MD 设计，简约大方，一瞬间让我不敢想起 SDDM 那土掉渣的开机界面（我当然知道 SDDM 主题，但是 SDDM 主题很少有能做到 GDM 这般简约与美观并重）。\n在几分钟的试体验中，Gnome 精致的 MD 设计接近颠覆了我对 Linux 桌面一贯的认知。KDE 高自定义当然很好，但是不如 Gnome 这般简直为我的简约向审美量身定制。\n（不要和我说 Gnome 的默认应用图标，那玩意差点弄瞎了我的眼睛）\n比如说大家最熟悉的 VS Code,图标是这样的：\n 你敢相信这个是 VS Code？ \n大概感觉是，看完这默认的图标设计，我感觉我挺有当设计师的天赋。\n在确定 Gnome 合盖不会花屏之后，我可以肯定，Gnome 将会是我未来很长一段时间的 Linux 桌面环境解决方案。\n与 Gnome bug 的搏斗 第一回合：下马威，GDM 的罢工 如上文所说，我不喜欢经常关机，所以直到当我装 VMware 需要重启的时候，我才发现原来这 GDM 是一次性产品，就第一次开机能一睹它尊容（\n具体 bug 表现为内核启动后，电脑一直卡在光标闪动界面而没出现 GDM（显示管理器）。刚开始我寻思可能是 VMware 有点傲娇，重启开机系统的工作量有点大（自欺欺人ing\u0026hellip;)，所以开机稍微慢了了一点。加上这光标一直在闪，而我暂时也不急着用电脑，所以姑且耐心地等了下来，直到半个小时后我与电脑漆黑屏幕里闪动的光标从相顾无言到怒目而向。\n好吧，大概是挂了。没想到自己 Arch Linux 第一次嗝屁居然不是因为滚挂了，而是新系统的第一次重启\u0026hellip;\n我仔细进行了一番思考，简单罗列一下可能的原因，最后得出了结论：可能又要重装了。\n重装就重装吧，在第二次安装过程中，我根据我罗列的原因略微修改了一下我一贯的安装过程（其实就是简化一些安装步骤），并把文件系统从 Btrfs 改为了 ext4（事后我追悔莫及\u0026hellip;)\n在一番熟练的操作下，我两三下完成了 Arch Linux 的安装，接着满怀激动地进入了桌面，然后满怀期待的点击了重启，最后不出所料地又卡在了开机界面。\n我已经准备好加 tag 了，比如 #Gnome无法开机 #GDM无法启动 #ArchLinux卡开机光标\n在此之前，我先进 tty 简单确认了一下日志。嗯，好像是 Gnome 挂了。\n嗯？啥？Gnome 挂了？\n我认识到了这不是我能独立解决的问题，于是我光荣地在 Arch Linux CN 社区再次开展了我的 小白灵魂三问 真挚且虚心的提问。\n经过一番大家都摸不到头脑的瞎折腾之后，我终于得到一句有用（表意明确）的话：“我们也不知道什么情况，你先按照你的想法试试。”（我：？？？）\n于是在遍历 Arch Wiki 之后，我发现 Arch Wiki GDM 的 Troubleshooting 居然有和我情况一模一样的问题解决方案。\nArch Wiki 的描述及解决方案如下：\n GDM shows black screen with blinking white cursor  After booting, GDM may present you with a black screen with a blinking white cursor in the top left. This may be caused by GDM starting before graphics drivers are fully initialized. One possible workaround is to start KMS early. Another possible workaround is to edit the systemd service and either set its type to \u0026ldquo;idle\u0026rdquo; or add a small delay:\n[Service] Type=idle or\n[Service] ExecStartPre=/bin/sleep 2 If a longer delay is required, increase the delay time.\n看完 Wiki 的我猛拍大腿。对啊，提前启动 KMS，我咋没想到呢？？\n于是继续顺着超链接看了下去。\n嗯，在/etc/mkinitcpio.conf添加模块（MODULES），我是 AMD 核显所以应该添加amdgpu。\n所以应该是\nMODULES=(amdgpu) #又不是旧架构，我为啥要加 radeon？ 修改完后保存退出重启，再次开机的时候，我终于看见了我久违的 GDM。\n确保这次开机不是偶然，我特意再重启了一遍，然后\u0026hellip;\u0026hellip;又卡在那个光标了。\n我凭借自己强大的心理素质忍住了想哭的冲动，平复心情后把 Arch Wiki 给出的所有方案操作了一遍，然后基本确定，我上一次开机真的只是偶然事件（\n抱着破罐子破摔的态度，我开始尝试我能想到的玄学方法，比如安装 linux-zen 内核（据说专为 Arch Linux 用户定制，对笔记本有玄学优化的神奇内核）。然后，就真开机了\u0026hellip;\u0026hellip;\n是的，这次不是偶然事件了。截至我先这篇博文，我亲爱的 GDM 都 works very well。感谢 linux-zen 鼎力相助以及 GDM 的手下留情，不然我就真的可能把 GDM 换 SDDM 或 LightDM 试试了（雾）。\n第二回合：下酒菜，薛定谔的桌面动画 考虑到如果要将这次较量完整的记录下来，5000 字可能不够写大纲。因此，我只记录我印象最深刻的 显示应用程序动画。\n起因是每次点击 Dock 栏的抽屉（姑且先这样叫吧），动画都有一种莫名的卡顿感。我是一个很少在意动画的人，但动画明显的不和谐感引发了我的疑惑。仔细想了想，我感觉我电脑配置算不上高但怎么也不至于带不动一个桌面的动画。于是我特意仔细观察了一下点击 Dock 栏抽屉的动画，然后发现了问题所在。\n我觉得我的语言很难向别人表述清楚问题所在，但是考虑到我博客好像只有自己看，那就按照我的感觉描述，自己能懂就好了（bushi\n简单来说，我只点击了抽屉一次，而 Dock 栏抽屉的动画显示了两次。\n具体表现为，桌面在我点击后先显示了应用列表，然后再显示了一个扩散开来的 Dock 栏抽屉点击动画。我猜这可能是扩展动画和桌面自带动画冲突的缘故。不出所料，我在 Dash To Dock 扩展中找到了 动画方式 -显示应用程序 这个选项。\n Dash To Dock-启动项 \n关闭该选项后，动画的不和谐感消失。\n当然，对于内心追求完美的我来说，一切本应还没有结束。考虑到 Gnome 扩展都是为 Gnome 定制的，扩展作者怎么可能加这种明显有问题的功能呢？最可能的情况是，这个功能本应该在某种情况下正常工作，但是我当前环境不满足扩展正常工作所需条件，因此才会出现这个 bug。\n我当然也更喜欢扩展提供的动画，但是在网上找很久都没有找到相关解决方案后，我还是决定放弃该动画，毕竟使用 Linux 不应把过多的时间放在美化上（才不是为自己找借口）。\n第三回合：压轴戏，无尽 bug 无尽 bug，故名思义，即为我对目前 Gnome 使用体验的描述。如果要形象一点表述，我只能说，我感觉我被虫子包围了。\n是的，Gnome 日常使用如果加上扩展的话 bug 太多了\u0026hellip;每天体验不同的 bug或者也是一种乐趣吧？\nGnome 中我的扩展与美化 该节仅为记录备份，请勿照搬安装我截图中的扩展。\n 我的扩展1 \n 我的扩展2 \n 我的扩展3 \n 我的扩展4 \n各人审美不同，请勿照用我使用的主题和字体。\n 我的主题搭配 \n 我的字体搭配 \n最后的桌面效果如图\n 我的桌面 \n有人评价说我的桌面像 Mac。说实话，装扮桌面的时候没有刻意模仿 Mac，完全是自己觉得怎么舒服怎么来。\n直到现在，我对我的图标包还是不算满意，但是换了几套还是找不到称心如意的，索性就将就着用吧。\nDock 放底栏是非高效率的做法！\nDock 放底栏是非高效率的做法！！\nDock 放底栏是非高效率的做法！！！\n正确的高效率布局应该是 Dock 放侧栏（即 Gnome 默认设置）。\n那我为啥把 Dock 放底栏呢？ 因为好看啊～\n使用小结 根据 Typora 的统计结果，这也是一篇 3000 字的长文了。粗略估计一下，我写这篇博文也花了三个多小时。实际上的写作体验由最开始的不知道写啥到后面的停不下来，还是非常舒畅的。我想这也是我这几天使用 Gnome 有很多有意思的体验，也有很多想法想分享给别人（虽然好像写了 3000 字，但实际上啥也没写）。\n其实一开始写这篇博文是想分享一下 Gnome 的效率工具\u0026amp;作业模式，但转念觉得教程性文章未免太没意思了一点，而目前整个博客几乎都是教程性文章，几乎看不出一个博客应有的样子，所以索性水了一篇这样的记录性博文。\n总而言之，希望将来的自己重新审视自己曾经写的博文的时候，能喜欢这篇文章。\n","date":"2021-02-23T01:26:46+08:00","permalink":"https://blog.linioi.com/posts/the-first-gnome-try/","title":"记 Gnome 的初体验"},{"content":"经历一番艰难的抉择与财力上的再三考量，我终于还是着手放弃原博客域名。\n更换域名的原因及旧域名处理方式 更换域名的原因有两个：\n .live 域名续费价格超出我的想象…根据我查询结果，即使是最便宜的域名注册商(境外)的续费价格也是 $16 以上。这大概是两个 .com 域名的续费价格了(按最便宜的域名注册商价格算)。考虑到我对 .live 域名后缀没有特别的需求(当初选择这个纯粹是因为腾讯云域名列表就它最便宜)，似乎没有坚持这个域名的必要了。 因为一系列原因，我对现域名注册商(腾讯云)由原来的略微反感到现在的强烈抵触。大概是不想被国内域名注册商喂💩，即使是国内域名注册商价格明显优势的情况下，我还是选择了国外的域名注册商(当然，是最便宜那种)。  目前对旧域名的处理方案是：\n 暂不出售（我感觉也没人会买） 保留绝大多数原旧域名链接并确保在未来几年里都可以正常访问。 设置部分关键链接的 301 重定向，*.linioi.com 将成为绝对的主域名 修改几乎所有我可编辑的文档中的 *.qingxu.live 为 *.linioi.com 对于以 @qingxu.live 为后缀的邮件地址采取保持收件但停止发件。在未来的几年里逐步把绑定 @qingxu.live 邮件地址的其他帐号换绑为 @linioi.com（那些不能换绑邮箱的平台真让人头疼）。  话说好像还有很多人博客友链也还是指向 *.qingxu.live，我该怎么通知他们呢……\n闲话 更换的新域名其实是思考近半年后的结果了。期间考虑过无数域名前缀，但总不满意字符的美观性(奇怪的审美增加了)及其代表的意义。当然，更关键的原因是我想到的域名都被注册了……最后选择的 linioi 其实是开始被否决了无数次的选项，但最后输入时却不由自主地输入了 linioi。或许是我平常 Linux 敲多了所以打字时有这样的下意识的举动，也或许是注定的奇妙的缘分，总之最后就是它了，凑合着也能用。\n倒是域名后缀几乎没有纠结。之前最心心念念的其实是 .moe 域名后缀，但是 $13.99（最低价格）的购买价格让我不敢多看……其他很多域名都是购买价格还算正常，续费价格高得离谱（比如 .ink 这样本来极其适合做博客的域名…）。在了解域名定价机制之后，我深刻认识到了 .com 域名虽然看起来昂贵（$8.99 起步），但实际上是最靠谱的那个域名——价格波动非常小而且续费价格稳定（泪）。并且 .com 域名是完全意义上的国际通用，换上 .com 域名的博客看起来就靠谱（虽然还是没人看）\n说起来我折腾博客等其他一系列网站已经近一年了，一年前的我或许也从未想过自己竟然为了愿意为了博客破费购买域名吧（当初想要搭建一个静态博客就是因为听说静态博客免费）。自己第一个域名还是 Freenom 上免费领的，当时想到我也有了一个自己的域名而不是用 GitHub 的 github.io 的时候可激动了，现在认识了那些免费域名的套路后不禁因为当时的自己笑了起来。\n所以换了新域名后，博客更新会勤快一点吗？\n","date":"2021-02-13T16:25:19Z","permalink":"https://blog.linioi.com/posts/change-to-new-domain/","title":"博客域名迁移"},{"content":"前言 作为一个 很少更新博客 热衷于折腾博客的小白玩家，博客的速度一直是我评估博客必不可少的一个方面。在曾经漫长的 Next 主题使用过程中，最能激发我兴趣的莫过于优化 Next 主题的样式和加载速度。\n可对于当时把博客托管 GitHub Pages 的我来说，不可避免的是国内极其尴尬的加载速度。为此，我尝试过把博客迁移到其他静态网站托管平台如 Netlify，但国内访问速度比起 GitHub Pages 也好不了多少，甚至还会出现服务器响应时间慢等问题……寻找一个足够理想的静态托管平台对于我来说是一个非常漫长的过程，即使是加载速度最令我满意的 Vercel 也不可避免网站刷新和域名问题。 （关于静态托管平台我可能会专门写一篇文章总结各大平台优缺点，这些暂且后话）\n为什么选择 Cloudflare 引用一句幽默且常被许多站长挂在口中的一句话：「网站的访问速度一直是与光速作斗争。」\n当访客访问一个网站的时候，他可能要面临的是与千里之外的某一台服务器建立连接，然后数据跋山涉水横跨千里最后出现在他的浏览器。而这个时间太长了，长到绝大多数访客都不愿意为此等待。因此，为了提升建立连接的速度，有了 HTTP 的升级；为了提升静态数据分发速度，有了 CDN。而 Cloudflare Workers Site 则宣布在此基础上他们再实现了一个重要的突破——将整个站点部署在网络边缘。\nCloudflare 拥有遍布全球的网络节点，200+ 数据中心让它的速度在全球范围内都有极其优秀的表现。与单纯的 CDN 相比，Cloudflare Workers Site 并不是将已缓存的静态资源放在边缘网络，让浏览器笨拙地跳转再跳转然后获取可能的最近最快的静态资源，而是直接将整个网站部署到全球边缘网络，让访客直接访问网站获取数据。于是，在高速访问的基础上，Cloudflare Workers Site 进一步减少了回源时间，让整个站点在数据传输上接近完美。而 Cloudflare Workers Site 自带可编辑的 index.js 更是可以衍生不少实用和有趣的玩法。\n在寻找理想的静态托管平台的过程中，Cloudflare Workers Site 无疑让我垂涎已久，只是 $5/Month 起步的订阅费用也让我这个脱贫路上的硬骨头望而却步，最终只能无奈转投他家。\n但令我不敢想象的是，Cloudflare 于 2020 年 11 月 28 日正式宣布：Cloudflare Workers KV 向 Workers Free Plan 免费开放。\n虽然我知道 Cloudflare 向来慷慨大方（从 Free Plan 的免费额度中就可见一斑了），但也实在没想到它会直接到将 Workers 的核心付费功能 Cloudflare Workers KV 直接免费开放。\n不仅如此，Cloudflare 还特意把 Workers KV 的单个文件大小限制由 10MB 调整到了 25MB，这无疑更方便了网站静态资源的存放。而每天 Workers 10w 次免费调用次数我想对于绝大多数站长还是绰绰有余的。\n全球边缘网络加速 + 慷慨大方的免费额度，既然找不到拒绝的理由，那么就勉为其难地接受吧~~\n常规部署 准备 CLI 部署工具 开始部署前，我们要先安装 Cloudflare Workers 的 CLI 管理工具 Wrangler。\nWrangler 可以通过 npm 或 cargo 安装。\nnpm i @cloudflare/wrangler -g # 你也可以使用 Yarn 安装 Wrangler # yarn global add @cloudflare/wrangler cargo install wrangler {% note info simple %} 经过实测，Wrangler 可能无法安装在 ARM 架构的设备上。如果可以，尽量使用 x86 设备。 {% endnote %}\n获取 API Token 如果你没有一个 Cloudflare 帐号，则需要先注册一个 Cloudflare 帐号，并绑定你的自定义域名。\n使用 Wrangler 前需要先 申请一个 API Token。\n在 API Token 申请界面选择「Edit Cloudflare Workers」模板。根据「所予权限最小化」的原则，建议删除默认权限模板中不需要的「Account」和「User」权限。\n初始化项目 在博客源码的根目录输入如下命令进行初始化\n# my-static-blog 是目录名称，你可以改成你喜欢的其他名字 wrangler init --site my-static-blog Wrangler 会依照 Cloudflare Workers Site 的模板在项目里新生成 workers-site 目录（默认）和 wrangler.toml 配置文件。我们需要手动对配置文件进行一些简单的自定义编辑。\n先使用文本编辑器打开 wrangler.toml 文件并依照你的需求进行修改\n[site] bucket = \u0026#34;./public\u0026#34; # 生成的 dist 路径，Hexo 和 Hugo 为 public，「.」的意思是当前目录 entry-point = \u0026#34;workers-site\u0026#34; # Cloudflare Workers Site 配置代码目录，默认 workers-site 目录 account_id = \u0026#34;\u0026#34; # Cloudflare Account ID，可在 Cloudflare 仪表盘或个人主页的网址处负责 workers_dev = false # 是否启用 workers.dev 子域名，推荐不启用 route = \u0026#34;blog.linioi.com/*\u0026#34; # Workers 路由配置，请指向你想绑定的自定义域名 zone_id = \u0026#34;\u0026#34; # 域名的 Zone ID，可在 Cloudflare 仪表盘查看 完成 wrangler.toml 的配置后，运行wrangler config命令并依照命令行提示输入上一步获取的 API Token。\n预览与部署 配置完成后，我们可以先输入如下命令预览一下部署效果。\nwrangler preview --watch Wrangler 会上传配置文件中设定的bucket路径的文件至 Cloudflare Workers KV，浏览器会自动打开一个窗口预览。\n确认无误后，输入如下命令进行部署\nwrangler publish 配置域名 DNS 解析 上面的操作只是上传了博客文件，如果想要访客正常访问还需要进行「域名 DNS 解析」。\n 如果你在前面修改配置文件时设置了「workers_dev=true」，则 Cloudflare 会自动分配给你一个三级域名，你可以在 DNS 解析设置处创建你的自定义域名的 CNAME 解析，指向 Cloudflare 分配的三级域名。 如果你在前面修改配置文件时设置了「workers_dev=false」，则在 DNS 解析设置处创建你自定义域名的 A 解析，指向 IP 2.2.2.2。  大功告成！ 如果一切正常，现在你可以输入你的自定义域名即可访问 你的博客。如果你想要实现更多的玩法，可以自己编辑 workers-site 下的 index.js。\n使用 GitHub Action 实现持续集成 如果你从未接触过 GitHub Action 自动部署，建议你先看一下我写的另一篇文章 GitHub Action 实现 Hexo 博客持续集成。\n与我写的另一篇文章略有不同，这里需要将文件推送到 Cloudflare Workers Site。我们可以 Cloudflare 官方 wrangler-action 轻松实现这一过程。\nwrangler-action 的使用同样需要设置 API Token。你可以选择使用上面生成的 API Token，也可以再申请一个 API Token，模板和权限与上面相同。\n然后再 GitHub 存放你博客源码的仓库添加 Secrets 变量 CF_WORKERS_TOKEN，内容为你申请的 API Token。\n最后在 GitHub Action 配置文件末尾加上如下代码进行部署。（注意缩进）\n- name: Deploy to Cloudflare Workers uses: cloudflare/wrangler-action@1.3.0 with: apiToken: ${{ secrets.CF_WORKERS_TOKEN }} 我的 GitHub Action 配置文件（仅供参考） name: GitHub Auto Builder For Blog on: push: branches: - master # schedule: # - cron: \u0026#39;0 21 * * *\u0026#39; env: TZ: Asia/Shanghai jobs: blog-cicd: name: Hexo build and deploy runs-on: ubuntu-latest strategy: matrix: node-version: - 12.x steps: - name: Checkout codes uses: actions/checkout@v2 - name: Use Node.js ${{ matrix.node-version }} uses: actions/setup-node@v1 with: node-version: ${{ matrix.node-version }} - name: Cache Node Dependencies id: cache uses: actions/cache@v1 with: path: .npm key: ${{runner.OS}}-npm-caches-${{ hashFiles(\u0026#39;package-lock.json\u0026#39;) }} - name: Clone themes run: | git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly - name: Install dependencies run: |npm install hexo-cli -g npm install - name: Generate files and gulp run: | hexo clean \u0026amp;\u0026amp; hexo generate \u0026amp;\u0026amp; gulp - name: Deploy to Cloudflare Workers uses: cloudflare/wrangler-action@1.3.0 with: apiToken: ${{ secrets.CF_WORKERS_TOKEN }} ","date":"2020-11-29T13:54:04Z","permalink":"https://blog.linioi.com/posts/deploy-blog-to-cf/","title":"利用 Cloudflare Workers Site 部署静态博客"},{"content":"  教程使用的 Minecraft 服务端程序为官方服务端程序，你可以根据自身需求下载第三方服务端程序以获取更好的插件支持。第三方服务端程序的运行方法可能与官方版不同。 教程不考虑设备可能出现的如性能或内存不足导致无法运行服务端程序、因审查地区网络原因导致的设备无法下载服务端文件程序等问题。如出现以上问题请自己寻找解决方法。 这里仅介绍 Linux 与 Android 的搭建方法。不介绍 Windows 是因为 Windows 搭建太简单了，而且网上教程实在有点多；不介绍 macOS 是因为买不起。   Linux 搭建教程  本节无特殊说明的话，所有 「#」均代表注释，所有可能需要 root 权限执行的命令均会在命令最前面加上 「sudo」。\n Linux 设备获取 你可以在家用电脑上安装 Linux，或者购置一台 Linux 服务器。无论如何，建议服务端设备内存大于 3G 且带宽大于 5M 以确保服务器连接稳定（如果联机人数少则相应配置可以低一点，具体配置需求建议自行测试）。\n如需购买服务器，建议购买按量计费的服务器以减少相应费用。大多数情况下，带宽可能是你首先应该考虑的方面。因此，请尽可能避开那些 1Mbps 带宽的「高性能服务器」，如果你不慎已入手一台，请尽早退款……\n以下是我个人用过的几个性价比较高的云服务厂商，个人评价仅供参考（毕竟我不是玩云主机的）。\n   厂商 优缺点 评价     谷歌云 优点：高速稳定，新用户有 $300 美元赠金（不过现在只有 90 天了）缺点：有点贵… 土豪和白嫖怪的不二之选   Vultr 优点：便宜，价格亲民，支持支付宝支付。缺点：相同价位性能偏低（貌似买它的人也不是奔着性能去的） 看网上多少 Vultr 的邀请链接你就懂了   阿里云 优点：经济实惠，按量付费价格可以接受缺点：国内厂商，使用需要实名…（你为什么不用阿里云国际版呢） 曾经的良心云（   腾讯云 优点：经济实惠，按量付费价格可以接受，最近优惠力度蛮大，大有做一个「良心云」的态度。优惠券：链接（含 AFF）。缺点：国内厂商，使用需要实名… 是不是良心云还需要观察…    SSH 连接服务器(家用设备请跳过)  SSH（Secure Shell）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH 通过在网络中创建安全隧道来实现 SSH 客户端与服务器之间的连接。\n  通过 SSH 连接你的服务器需要你的服务器已启用 SSH 服务并放行 SSH 服务端口(默认为 22)。\n Windows/macOS/Linux 设备 SSH 连接服务器 请根据你的系统类型打开终端 。Windows 为 cmd，同时按下 Win+R 后输入 cmd 并回车即可进入。\n 请确保你系统已安装 OpenSSH。目前已知 Windows 已于 2018 年集成 OpenSSH，macOS 已集成 OpenSSH，部分 Linux 发行版未集成 OpenSSH。\n对于未安装 OpenSSH 的系统，请手动安装 openssh 软件包。\n 在确认已安装 OpenSSH 后，输入如下命令连接你的服务器\nssh -p \u0026lt;port\u0026gt; \u0026lt;username\u0026gt;@\u0026lt;ip\u0026gt; #\u0026lt;port\u0026gt; 为 SSH 进程端口号，如默认端口号 22 可以省略。 #\u0026lt;username\u0026gt; 为服务器用户名，\u0026lt;ip\u0026gt; 为服务器 IP 地址 #以下是示例连接命令 #ssh root@127.0.0.1 输入命令后会要求你输入服务器密码，请输入你设置的服务器密码。建议使用 SSH 密匙登录服务器并禁用密码登录以保证服务器安全。\nAndroid 设备 SSH 连接服务器 请参照 Android 搭建教程-连接 Linux Deploy 容器。\n设置 JRE 下面是几种常见的 Linux 发行版的安装命令\n# Debian/Ubuntu sudo apt-get install -y default-jre-headless #CentOS 8.0+ sudo dnf install -y java-1.8.0-openjdk #对于 CentOS 8.0 以下的服务器，请输入下面的命令 #sudo yum install -y java-1.8.0-openjdk #Arch Linux sudo pacman -S --noconfirm jdk8-openjdk 下载 Minecraft 服务端  下载之前，你首先要了解 Minecraft 客户端 Java 版和基岩版的区别。\n 建议先建立一个专门的文件夹存放服务器数据。 示例命令如下：\nmkdir $HOME/minecraft 根据你的客户端平台，从以下两个链接中选择一个链接下载。\nJava 版请点击 https://www.minecraft.net/en-us/download/server\n基岩版请点击 https://www.minecraft.net/en-us/download/server/bedrock\n示例下载命令如下：\n# 如果创建了 minecraft 文件夹则先转到 minecraft 文件夹 # cd $HOME/minecraft wget https://launcher.mojang.com/v1/objects/f02f4473dbf152c23d7d484952121db0b36698cb/server.jar  注意，请务必将以上链接修改为你设备平台适用的服务端程序下载链接。\n 运行服务器端 确认文件已下载完成后，根据自己服务器端版本输入以下命令\njava -Xmx[初始启动分配内存] -Xms[最大分配内存] -jar [jar 包所在路径] nogui # 如果要使用其图形用户界面启动服务器端，则可以省略「 nogui」部分。 # 运行示例命令 #java -Xmx1024M -Xms1024M -jar minecraft_server.1.16.3.jar nogui # 基岩版下载的默认是 zip 文件，需要解压后使用 unzip bedrock-server*.zip #解压下载的 zip 文件 LD_LIBRARY_PATH=. ./bedrock_server Java 版服务端程序在第一次运行后会生成初始配置文件后自动中止。你可以用任意 Linux 文本编辑器（如 VIM、nano）打开服务器端目录下的eula.txt，然后将 eula=false 改为 eula=true。\n EULA 是 Minecraft 最终用户许可协议，修改为 true 即代表你同意许可协议。\n你当然可以不同意，不过与之对应的是服务端程序无法运行。\n 输入如下命令再次启动服务器端\n# 示例命令 java -Xmx1024M -Xms1024M -jar minecraft_server.1.16.3.jar nogui # 示例命令 LD_LIBRARY_PATH=. ./bedrock_server 如需停止服务端，请直接输入/stop或Ctrl+C。\n官方服务器端配置中默认开启了正版验证，意在禁止盗版客户端连接服务器端，但是在实际操作中可能会出现正版用户也无法连接的情况。如果你在确认配置无误后不能连接服务器，请将 server.properties 中的 online=true 改为 online=false。\n 如果你使用的是诸如谷歌云、微软云、阿里云这样 NAT 服务器，你可能需要进行内网 IP 端口转发才能正常连接服务器。\n 你可以点击这个链接以了解有关 server.properties 的配置。\n为服务器端会话稳定，建议安装 Screen 并在 Screen 会话中运行服务端程序，这是远优于 nohup 的后台运行解决方案。\n#Debian/Ubuntu sudo apt-get install -y screen #CentOS 8.0+ sudo dnf install -y screen #CentOS 8.0 以下请输入以下命令 #sudo yum install -y screen #Arch Linux sudo pacman -S --noconfirm screen 输入如下命令创建一个 screen 会话\nscreen -S mc Screen 其他基础命令：\n 创建会话：screen -S \u0026lt;name\u0026gt; 列出已创建对话：screen -ls 转到某一创建对话：screen -r \u0026lt;name/id\u0026gt;  更多命令可以查看该链接。\nAndroid 搭建教程  Android 搭建 Minecraft 服务器端的思路即先在 Android 上搭建 Linux 环境，然后再在 Linux 环境中运行服务端程序。\n因此，Android 搭建教程与 Linux 搭建教程高度相似。为避免重复，本节只叙述如何在 Android 上搭建一个基本可用 Linux 环境。\n  注意，Android 端搭建 Linux 环境需要 Android 手机已获取 root 权限。\n 配置 Linux Deploy 请从 Google Play Store 下载并安装 Linux Deploy 。\n 你可以尝试在其他渠道下载 Linux Deploy，但请尽可能确保 Linux Deploy 版本为最新版且为官方正版。\n 安装后打开 Linux Deploy，点击右下角的配置按钮，根据你的实际需求修改你的配置信息。\n  目前 Linux Deploy 只有 Debian 系 Linux 发行版可以基本正常使用，因此在配置中建议选择 Debian 系发行版以减少其他不必要的麻烦。 对于国内用户，建议将配置中的「源地址」修改为国内镜像源。 为避免异常，请将默认用户名「android」修改为 「root」。 请在「本地化」配置中修改配置为「zh_CN.UTF-8」。 请务必勾选 SSH 配置中的「启用 SSH 服务器」。   在完成你的自定义配置后，点击右上角菜单后选择「安装」，如果出现 root 权限请求，请「允许」。\n安装结束后，请先点击底部的「停止」停止容器，然后点击底部的「启动」启动容器。\n连接 Linux Deploy 容器 Linux Deploy 仅提供容器而不提供可操作的终端(你能接受浏览器作为终端的话当我没说)，这意味着我们需要自己再下载一个 SSH 客户端以连接容器。\nTermux 这里推荐使用 Termux 作为 SSH 客户端。\nTermux 作为一个强大的终端仿真器，集成了 Linux 环境，可自定义性高，对于有一定 Linux 使用经验的人来说非常方便。\n Termux 默认没有安装 openssh，需要输入pkg in -y openssh手动安装。\n对于审查地区，Termux 默认源的连接速度可能非常慢，可以输入如下命令更换清华源以提速\nsed -i \u0026#39;s@^\\(deb.*stable main\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@\u0026#39; $PREFIX/etc/apt/sources.list sed -i \u0026#39;s@^\\(deb.*games stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@\u0026#39; $PREFIX/etc/apt/sources.list.d/game.list sed -i \u0026#39;s@^\\(deb.*science stable\\)$@#\\1\\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@\u0026#39; $PREFIX/etc/apt/sources.list.d/science.list  安装完 OpenSSH 后，输入以下命令连接 Linux Deploy 容器。\nssh \u0026lt;username\u0026gt;@\u0026lt;ip\u0026gt; #示例 #ssh root@127.0.0.1 输入该命令后会需要你输入密码，请输入你在 Linux Deploy 配置时设置的密码，密码在输入过程中无回显。\nJuice SSH 如果你终端使用经验不足，也可以选择小白友好的 Juice SSH。\n鉴于 Juice SSH 界面简洁易懂，这里不做过多描述。你只需输入在 Linux Deploy 配置时设置的 「用户名」和「密码」及容器的「 IP 地址」。如果是本机连接容器，IP 地址输入 「127.0.0.1」即可；如果是区域网内连接则输入安装容器的设备的「区域网 IP 地址」，区域网 IP 地址可以在手机「设置」查看。\n安装和配置 Minecraft 服务端 请参照 Linux 搭建教程。\n 鉴于手机 CPU 架构及性能，建议不要尝试在手机上搭建 Java 服务器\u0026hellip;\n  官方基岩版服务端程序可能无法在 Linux Deploy 容器中运行，建议改用第三方服务端程序，如 Nukkit。\n 连接服务器端   如果你希望在同一区域网下与其他玩家联机，则只需要处于同一区域网连接下即可。 如果你是在家用设备上搭建 Minecraft 服务器（即无公网 IP），则其他玩家无法在非同一区域网下连接你的 Minecraft 服务器。你可以通过 内网穿透 以实现公网环境连接内网设备。请注意相关安全防护以避免因内网穿透造成内网环境被攻击。Minecraft 基岩版内网穿透协议为 UDP 且需要本地端口与远程端口一致才可以正常连接。 公网设备请注意保护 IP 地址，毕竟某些闲人还是很多的。   如果是区域网内搭建的服务端，则在 IP 地址中填入服务端「区域网 IP 地址」，公网设备与内网穿透设备填写设备的公网 IP。端口填你在服务端配置文件中设置的端口（Java 版默认 25565，基岩版默认 19132）。\n 请注意检查你服务器防火墙设置中是否放行相应端口，未放行相应端口则客户端无法连接服务器端。\n以下给出参考的放行规则，具体操作方式和配置请根据你自己的情况选择。\n 名称：minecraft-rule 目标标记：minecraft-server 来源过滤条件：IP 地址范围 来源 IP 地址范围：0.0.0.0/0 协议或端口：Java 版选择 TCP，基岩版选择 UDP，然后在提供的字段中输入你配置文件中的端口号，Java 版默认 25565，基岩版默认 19132。   End 如果一切正常的话，你已经成功搭建并和你的小伙伴们一起进入游戏了，想不出什么话总结，只能祝你们玩得开心了😂。\n","date":"2020-10-30T22:33:32Z","permalink":"https://blog.linioi.com/posts/minecraft-build/","title":"Minecraft 服务器搭建教程"},{"content":"Aria2 是什么？  Aria2 是一款自由、跨平台命令行界面的下载管理器，该软件根据 GPLv2 许可证进行分发。支持的下载协议有：HTTP、HTTPS、FTP、Bittorrent 和 Metalink。\n\u0026ndash; 摘自 维基百科\n 如上所述，不同于其他下载器（如 IDM+）或闭源或付费，Aria2 在支持多种下载协议的基础上保持开源和免费，是目前最强大的下载器之一。\n为什么会有这篇文章 Aria2 固然强大，但是它的配置和使用并不像其他下载器全 GUI 化，这对某些新手来说非常不友好。即使已经有一众大佬出手降低 Aria2 的使用门槛（如 AriaNg 这样较完善和便利的 GUI 管理界面），但是配置 Aria2 依然足以劝退某些小白。\n为此，又有一众大佬制作 Aria2 Docker 和 Aria2 一键管理脚本，使得即便是小白也可以轻松完成 Aria2 的配置安装。\n遗憾的是，可能是因为大部分 Aria2 用户集中在 Linux 平台，这些 Aria2 一键管理脚本也一直仅支持 Linux 平台。为此，我基于 P3TERX 的 aria2.sh，制作了该一键管理脚本的 Termux 移植版 Aria2-Termux，便于 Android 用户一键安装、配置和管理 Aria2。\n但是考虑到 Termux 在普通 Android 用户中的使用普及度，我想一篇较为详细的说明性文章还是有必要的，于是便自己动手写了这样一篇简略的文章，暂作为 Aria2-Termux 的使用文档。\n下面，让我们开始…\n下载和安装 Termux 目前仅推荐以下两个下载渠道下载 Termux\n ~~Google Play Store： https://play.google.com/store/apps/details?id=com.termux~~   因为这些原因，Google Play 不再是受推荐的下载渠道。\n  F-Droid：https://f-droid.org/packages/com.termux/  如果因为网络原因无法正常访问 F-Droid，也可以在我的分享站下载。\n请勿交叉安装和更新这两个渠道的 Termux！即，如果你是在 Google Play Store 下载和安装 Termux，请勿在 F-Droid 下载安装包并覆盖安装。\n安装后打开 Termux，你会看到如大致下图所示的终端界面\n Termux 界面 \n 你的界面和我的截图会有些许不同，请不要惊慌，这是因为我已经对 Termux 进行了一些自定义。长得不像是正常现象 请不要害怕终端的黑屏白字，实际上你需要操作的东西非常简单，大部分终端里你看不懂的输出，都是你不需要关心的细节。 第一次打开可能会要求进行初始化，请耐心等待初始化完成。  下载和启动脚本 下面的步骤极为简单，你只要复制和粘贴下面我列出的命令并在 Termux 中输入并回车，不需要关心其他的任何细节。如果出现了报错则另说\nbash -c \u0026#34;$(curl -L https://raw.githubusercontent.com/RimuruW/Aria2-Termux/master/aria2.sh)\u0026#34;  输入命令后 Termux 会自动下载脚本，请耐心等待。脚本下载完成后，Termux 会自动启动脚本。  脚本启动成功后如下图\n 脚本启动后界面 \n后续启动脚本，如果你没有手动改变文件位置，则你只需要输入bash aria2.sh即可启动脚本。\n安装 Aria2 脚本启动后，请输入「1」并回车，脚本会自动下载和配置安装 Aria2。\n 输入命令后脚本可能会询问你是否更换 Termux 镜像源，如果你是国内用户，请选择输入「y」确认更换。 Aria2 的下载和安装需要一定时间，请耐心等待并保证 Termux 进程存活。  安装完成后脚本会自动启动 Aria2，安装并启动成功后界面如下图\n Aria2 安装和启动成功图 \n注意，为保证 Aria2 后台存活，脚本在启动 Aria2 会自动开启唤醒锁，这意味你退出 Termux 时需要手动在状态栏点击「Release wakerlock」后才能真正退出。  Release wakelock \n此时你已经完成了 Aria2 安装所需的基本步骤，你的手机上已经成功配置一个可用的 Aria2。\n使用 AriaNg 如上文所说，Aria2 是一个命令行下载工具，命令行的操作方式对于大多数用户来说还是极为不友好。这里我们借助 AriaNg 进行 Aria2 的图形化管理和操作。\n在脚本起始界面输入「7」查看 Aria2 配置信息如下图\n Aria2 配置信息 \n 对于大部分普通用户，你只需要复制下面 AriaNg 后的链接并在浏览器打开即可进入 AriaNg，其他细节属于你无需关心的内容\n  对于已经对 Aria2 有所了解的用户，请明确以下内容\n 大多数情况下，请将 Aria2 的地址设为 127.0.0.1 而非内网 IP，已确保连接在 Aria2 每次启动后都始终可用 如果你需要在其他同区域网设备上连接该设备，Aria2 地址请设为配置信息中的「内网 IP」   进入 AriaNg 并连接成功后界面如图所示\n AriaNg 连接成功 \n点击左上角的「新建」，输入下载链接后点击右上角「立即下载」即可以创建一个下载任务，下载的文件默认保存在 Download 文件夹中。\n 使用文档到此结束，其他细节请参照脚本内说明（我觉得脚本内说明已经很详细了…）。\n如果对 Aria2 其他细节感兴趣，请自行参阅网上文档。\n如果这个项目对你有帮助，请 Star 以让更多人发现这个项目并受益，你的支持是我持续维护和开发的动力！\n\n","date":"2020-10-17T22:19:36Z","permalink":"https://blog.linioi.com/posts/aria2-for-termux/","title":"Android 一键安装配置 Aria2"},{"content":"场景如下\nQQ/WeChat:\n A：我给你发消息你怎么半天没回？ 我：有事请 Telegram 联系，QQ/WeChat 随缘回复。 A：这跟 QQ/WeChat 私聊有什么区别？为什么要这么麻烦？ 我：（此处省略 1000+ 字）  忽然我意识到了，其实大部分人对自己的 IM 软件一无所知，那么一篇有必要的科普文章就应该开始动手了。Telegram 的优点当然不仅在于通知推送，但是我想从通知推送说起……\n声明  限于篇幅，这篇文章并不会太多牵扯到手机通知推送的技术细节。（毕竟主要是科普嘛~~） 文章内容仅代表作者个人认知和观点，欢迎发表你的观点。 文章内容限于作者能力可能存在某些错误，欢迎指出。  iOS 的通知推送 说起手机推送，不得不先提的是 iOS 的通知推送。\n即使你是一个数码小白，至少也听说过 iOS 通知的及时。当然，你可能看到的是吐槽 Android 通知多么垃圾，这其实是反衬 iOS 通知的强大。\n这里简单介绍一下 iOS 通知推送机制。\n本地推送 本地推送其实就是 App 的定时推送。App 注册本地推送通知，指定一个时间并在该时间推送通知。\n远程推送  前提已满足条件：App 已注册远程推送通知。\n Apple 开发者文档给出的推送过程示意图如下：  通知推送示意图 \n用文字描述过程如下：\n 软件需要推送通知 软件服务器将通知推送到 Apple Push Notification service（APNs） Apple Push Notification service（APNs） 将通知转发给用户。  可以看到，这全过程都是由 Apple Push Notification service（APNs）完成通知的接收与发送，并且最后的通知推送也是由系统进行统一推送。这一过程中，设备上的软件本身没有参与。\n也就是说，iOS 通知推送并不需要软件的后台运行。完全由 Apple Push Notification service（APNs）和 系统 完成通知推送的方式实现了最大化的通知效率。别羡慕了，羡慕就去买台果子吧。\nAndroid 的通知推送 这里首先为被风评被害多年的 404 小厂的操作系统辩解一番。人家一个官网都常年打不开的小公司，怎么可能实现像 Apple Push Notification service 这样大体量的通知推送服务。（雾）\n如你所见，由于某些众所周知的原因，Android 的系统推送通知一直处于一个尴尬的情况 (指国内) 。于是在长期以来的 Android 发展中，各大公司群策群力，纷纷贡献自己的金点子银点子，携手解决这一难题。\nGoogle 的 FCM 严格意义上来说，某 404 公司对于自己操作系统的推送服务还是有进行一番 无意义的挣扎 努力。\n 2010 年，在 Apple 推送通知服务发布后，Android 2.2 也马上推出了「云端至设备消息传递（Cloud to Device Messaging」，即 C2DM。\n2012 年 404 小厂推出「Google 云消息传递（Google Cloud Messaging）」，即 GCM。GCM 取代了 C2DM 并实现了更好的功耗表现，且对于开发者更加友好。\n2014 年某 404 小厂收购 Firebase 后，将 GCM 改名为「Firebase 云消息传递（Firebase Cloud Messaging）」，即 FCM。FCM 较之 GCM 则更进一步简化了推送服务相关的开发工作。\n  FCM 示意图 \n从原理上来看，FCM 和 APNs 一致，也是按照 软件服务器 ==\u0026gt; FCM 服务器 ==\u0026gt; 用户 这一流程实现的。\n也就是说，对于 Android 系统 FCM 推送，整个推送过程中的 通知的接收与发送 都由 FCM 完成。这一过程中，设备上的软件本身没有参与。\n虽然可能和你以前想象的不太一样，但是事实如此：Android 系统同样有一套较为完善的推送机制，这个推送机制绿色高效，实现原理类似于 Apple。\n不过想法是美好的，现实是残酷的。因为种种原因，FCM 在国内并不能正常使用，主要原因如下：\n FCM 依赖 Google Play Service 而绝大部分国内 Android 手机都阉割了 Google Play Service。 大部分国内 App 都没有注册 FCM（不支持 FCM）。 FCM 在国内的连接不稳定。  对于已安装 Google Play Service 的用户，可以在手机拨号盘输入 *#*#426#*#* 查看你当前的 FCM 连接状态。\n FCM 已连接示意图 \n各大互联网公司的解决方案 由上面的叙述我们可以知道，404 小厂的 FCM 是靠不住了，关键时刻还是需要我们自力更生，自给自足。\n事实上，这种小问题根本难不倒我们大天朝的互联网公司，以阿里巴巴等互联网巨头为首率先想出一种行之有效的解决方法——团结就是力量。\n可能上一段你看得有点懵，但不要紧，我给这种解决方法换一个更广为人知的名字你就熟了——链式启动。\n互联网公司通过自己的软件全家桶或和其他互联网公司相互合作，以相互唤醒的方式保证自己全家人后台存活，然后团结一致完成通知推送（当然也可能顺便干一点别的东西）。\n简单来说，如果这些软件中有一个不慎倒下了（后台被杀死），其他软件会迅速将其拉起，保证其在后台始终处于唤醒状态，让共用的推送通道保持活跃而不被系统杀死，以便消息能及时送达。\n这一方法简单粗暴，不仅体现了化繁为简这一哲学思想，更是弘扬了社会主义团结互助的精神，再次告诉我们什么叫做团结就是力量！（此处应有掌声）\n当然，这种方法还是有一点点小小的弊端，那就是手机耗电有点快，可能还会有点烫有点卡。但是瑕不掩瑜，这点小问题和这天才般的创意比起来算什么呢？\n手机厂商的推送服务 面对 群魔乱舞的 Android 推送问题，终究还是有手机厂商站了出来，模仿 Apple 和 404 小厂的做法建立了他们自己的推送服务，比如小米的「MiPush」。\n这些推送服务被集成在各厂商高度定制的 Android 系统中，作为系统级推送存在。手机厂商试图通过模仿 Apple 和 404 小厂实现同等程度的通知绿色与时效性。\n但想法是美好的，事实上，开发者不可能兼顾所有的厂商，为每个品牌的手机都适配对应的推送服务，能专门适配其中一家到两家已经是很良心了 (试图为某鹅狡辩) 。除此之外，虽然手机厂商的推送服务也可以在其它品牌的手机上正常使用，但并不能像在自家定制系统上一样实现系统级的推送，推送服务依旧需要后台常驻。\n也许是黎明的曙光——统一推送联盟 不知道你有没有听说过 Android 绿色应用公约。如果没有听说过也没关系，现在你知道了。\n 宗旨\n这是一项旨在推动 Android 生态中的优秀应用共同维护一个更加良性的『设备体验』而发起的开放公约。\n\u0026hellip;\n核心原则\n  完全遵照 Android 本身的演进方向（包括 Android O 所引入的新变化），积极引导和协助应用开发团队平滑完成对接 Android 最新变化的节奏，在确保应用核心功能不受影响的前提下，减少不必要的应用后台行为，并以更加高效、节能的调度机制改善后台行为的调度。\n  公约的必要规约中，只纳入可被明确验证的条款，不接受需要主观裁量或定义模糊的条款（例如涉及交互设计的内容）。\n  所有约束条款均给出推荐的最佳实践或具有可操作性的调整方法。\n  涉及到功能与设备体验之间的潜在冲突时，遵循最终选择权给予用户的原则。\n  ——《Android 绿色应用公约 4.0》\n 虽然在我看来公约里的部分 App 也不怎么绿色。\n我们可以看到，在 Android 绿色应用公约中的互联网大公司的软件屈指可数。（好吧，别自欺欺人了，是基本上没有，有的也不咋绿色）\n这说明了，仅仅靠各公司的自觉或社区推动实现国内 Android 生态 App 绿色化是不现实的，而通知这个关键点更是每个公司都不愿意松手。\n这时候，需要有更强大的力量站出来，整顿当前国内 App 的通知推送乱象。于是，统一推送联盟出现了。\n 　统一推送联盟成立于2017年10月，挂靠单位是电信终端产业协会（TAF），接受工业和信息化部业务指导，住所设在北京。联盟核心任务是：探索推送行业创新，促进终端生产厂商、应用开发厂商和第三方服务提供商等进行深入合作，整合行业资源，助推形成统一的推送体系，创造绿色环境，减少与终端用户的利益冲突，提升整体行业形象，降低整体行业的实现成本，形成自律基础上的产业链协同发展，实现产业的共同繁荣。\n　统一推送联盟是在自愿、平等、互利、合作的基础上，由国内外消息推送产业相关的企、事业单位、社团组织、高等院校、科研院所等自愿结成的跨行业、开放性、非营利性的社会组织。本联盟旨在促进相关主体之间的交流和深度合作，促进供需对接和知识共享，形成优势互补，有效推进消息推送产业的发展，切实解决产业现实问题。\n——统一推送联盟《关于我们》\n 事实证明统一推送联盟是实现了巨大的影响的。\n不到两年时间里，统一推送联盟就实现了由「全民讨论统一推送后 Android 美好的幸福生活」到「全民讨论 统一推送联盟 到底黄没黄」的巨大转变。\n但是，我们要客观、发展性地看待问题，统一推送联盟一直在时刻努力着，前段时间还发表了一篇名为 《统一推送能给手机带来什么？》 的科普性文章。文章底部留言中，官方更是回复「推必达将于近期上线」。  官方回复「近期上线」 \n我也不知道我有生之年能不能等到这天了。\n题外话：让我们回头看看 QQ/WeChat 看到这里，你大概对手机系统推送有了比较全面的了解。\n那么你一定好奇，国民级软件 QQ 和 WeChat 是怎么实现手机通知推送的。\niOS 当然没有任何疑问，通过 Apple Push Notification service。\nAndroid 上则一言难尽，因为这两个 App 都没有注册任何一个推送服务。忘了 Google Play 版 WeChat 的 FCM 吧，它能不能推送完全看脸\n没有注册推送服务意味着 QQ 和 WeChat 在 Android 上实现通知推送全靠后台常驻。微信尤甚，某个进程挂了，整个 App 都收不到通知。\n保证 QQ 和 WeChat 的通知时效性一直是困扰大部分开发者和所有国内手机厂商的难题。对此大部份国内手机厂商的解决方法都是对 QQ 和 WeChat 后台无限制以最大程度保活，实现通知推送正常。\n而此时，Telegram 支持 FCM 的优点就体现出来了——对于我来说，我能第一时间收到你发给我的消息并回复，而 QQ 和 WeChat 还得等上一阵子。我希望私聊我的人用 Telegram 而不是 QQ 和 WeChat 的原因很简单：\n 我不想浪费我的时间在无意义的事情上，比如保证 QQ 和 WeChat 能及时收到消息。\n 如果你用某一品牌的手机，QQ 和 WeChat 经常收不到消息，请不要咒骂这个手机厂商。如果可以的话，请劝告你身边的人也不要这样做。手机厂商也在尽自己最大的努力，只不过他们只能尽人事听天命。\n 参考链接： 太多了，有缘再整理吧…\n","date":"2020-10-01T15:49:01Z","permalink":"https://blog.linioi.com/posts/3/","title":"浅谈手机通知推送"},{"content":" Redmi Note 7 Pro 第一个非 Port Android 11，再怎么垃圾也不得不忍啊…\n 前言 待会再补上\n刷入步骤  注意：以下为 hentaiOS 作者 Dyneteve 给出的官方刷入步骤。其他刷机方法待更新。\n如果你无法理解本文的某些内容，你可以参照这篇教程。\n 你需要准备什么？  一台电脑 (Windows 和 Linux 皆可) 一台能正常工作的 Redmi Note 7 Pro (Violet) 一双能照着教程操作的手 下载 hentaiOS 刷机包 和 AOSP Recovery ROM Flasher V4.zip 至电脑； 对于 Linux 用户，你还需要下载 linux_flash.zip   现已搬运 hentaiOS 刷机包和 AOSP Recovery 至我网盘。\n上面连接无法访问的可以试试下面的链接。\nhentaiOS 刷机包：Link\nAOSP Recovery：Link\n 那么，让我们开始…  备份你的数据，准备好相应的救砖工具以备不时之需。 关机下长按电源键和音量-进入 fastboot 模式。 使用 USB 数据线连接手机和电脑。如果可以，请尽量使用原装数据线。 输入fastboot devices检查设备是否已正常连接。如果你电脑没有配置 ADB 环境，建议参照这篇教程配置 ADB 环境。对于 Linux 用户，请自行查阅你使用的发行版所需要安装的软件包。 解压你下载的 AOSP Recovery ROM Flasher V4.zip 。 解压后文件夹目录如下  AOSP Recovery ROM Flasher V4 ├── flashme.bat ├── images ├── sideload └── windows 你可能需要手动将你下载的 hentaiOS 刷机包放入解压后的 sideload 文件夹。\n 对于 Windows 用户，请打开你解压后的文件夹，双击 flashme.bat 并等待刷入结束；对于 Linux 用户，请解压你下载的linux_flash.zip到 AOSP Recovery ROM Flasher V4.zip解压后的文件夹中。\n  长按电源键和音量+进入 AOSP Recovery。如果屏幕显示 no comand 或者 没有指令，请按一次音量+。\n  使用音量键和电源键选中Apply update from ADB。\n  电脑在命令行回车，脚本会自动刷入 ROM。进度到 49% 时可能需要你手动确认，选择 Yes 即可。\n  输入过程结束后，使用电源键和音量键选中Factory Reset，等待清除完成。\n  使用电源键和音量键选中Reboot to system，等待手机开机。\n  至此，hentaiOS 已刷入完成\n某些问题的简单解答（待更新）  Magisk 所有版本不能正常工作 TWRP 及 TWRP 魔改版本(如 OrangeFox)无法正常工作 ROM 无法解密，解密会导致The system has been destroyed 目前仅 AOSP Recovery 可以完全正常刷入 ROM，其他方式待验证  后记 待会再补上\n","date":"2020-09-17T13:05:37Z","permalink":"https://blog.linioi.com/posts/12/","title":"Violet 机型 HT OS 刷入教程"},{"content":" 一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”\n  上个月，欧盟议会发布了一份关于数字经济未来发展策略的研究报告，提出将建立欧盟的“互联网防火墙”，报告明确指出这个防火墙将“像中国的一样，会封锁一部分支持或者容忍（对欧盟而言的）非法行为的第三方国家的互联网服务。\n 互联网防火墙可能是有预兆的必然 不禁让我想起了去年俄罗斯开始和中国交流“互联网防火墙”的建设。\n所谓“网络主权”正在被越来越多的国家挂在嘴上，而所谓“互联网自由”逐渐变成了一个笑话。一切真如很久以前有人说的，「互联网审查并将成为世界绝大多数国家的共识，互联网自由将随着互联网的发展而有名无实」。\n历史总是相似的 此时被无数人想起的莫过于茨威格的《昨日的世界》\n 自从第一次世界大战以来，世界所经历的能让人感觉到的最大倒退，莫过于对个人行动自由的限制，以及自由权利的缩小。 在1914年以前，地球属于所有的人。每个人可以去他想去的地方，想停留多长时间就停留多长时间。没有所谓的许可，没有准入。 当我跟现在的年轻人讲到我在1914年以前去了印度和美国，没有带护照，也根本没见过护照是什么样子，我总是看到他们脸上的惊奇。 人们上车下车，不需要问什么，也不被人盘问；今天人们被要求填写的上百份表格，当时一份也不用填写。没有居留许可，没有签证，没有刁难。 今天的国界线，因为大家彼此之间病态的不信任，已经被海关、警察、哨所变成了一道铁丝网，而那时的国界线无非是一条象征性的界线，谁都可以不假思索地越过，就如同格林尼治的子午线一样。\n　——茨威格 《昨日的世界》\n 所谓自由只是在管制下的一点漏洞。当制度逐渐完善，自由只剩下狭义的自由，也就是政治中的「真正的自由」。\n想起许多年前无数人苦苦追求的“言论自由”，又与无数人把西方某些国家当作自由的标杆，心中自由的圣地，便觉得可笑到了极点，世界总是这样让人意想不到、啼笑皆非。\n引用一位博主的一段话：\n 互联网也曾撕开一个时代的裂缝，现在中文互联网上还有人在怀念上一个十年乃至上上个十年，怀念那时候自由的互联网风气，全世界的网站、服务须臾指间，点击可达——和茨威格一样，他们也认为那是理所当然。\n其实我们都不过是见证了裂缝渐渐闭合的过程而已，现在这个过程也要降临到欧洲了。一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”\n 恍然间，昨日如梦。\n参考文章:\n 逸文笔记  ","date":"2020-08-13T15:52:45Z","permalink":"https://blog.linioi.com/posts/13/","title":"欧盟或将仿造中国建网络防火墙"},{"content":" 没有其他发行版的一键脚本/运维面板 Arch Linux 用它的方式体现着它的超凡脱俗 其实就是用的人太少，没人写脚本\n 对 Arch Linux 进行一次全面更新 话说，这不是每天开机第一件事吗\nsudo pacman -Syu 安装 Nginx Arch Linux 软件库中有两个版本的 Nginx，分别是 nginx 和 nginx-mainline，与 Nginx 官方的两个版本对应。nginx 理论上更加稳定，但版本比较旧， 而 nginx-mainline 是 Nginx 最新的版本。 但这并不表示 nginx-mainline = 不稳定。实际上 nginx.org 官网说明，如果没有非常必要的原因，则推荐使用 nginx mainline。 输入如下命令安装旧版本 Nginx。\nsudo pacman -S nginx 安装 nginx-mainline。（本教程安装的是 mainline）\nsudo pacman -S nginx-mainline 以上两条命令默认会自动安装 geoip 和 geoip-database 两个软件包。安装完成后，使用 systemctl 来查看其状态。\nsystemctl status nginx 输出：\n● nginx.service - A high performance web server and a reverse proxy server Loaded: loaded (/usr/lib/systemd/system/nginx.service; enabled; vendor preset: disabled) Active: active (running) since Tue 2016-04-12 13:10:57 CST; 1 day 7h ago Main PID: 2010 (nginx) Tasks: 2 (limit: 512) CGroup: /system.slice/nginx.service ├─2010 nginx: master process /usr/bin/nginx -g pid /run/nginx.pid; daemon on; master_process on └─2011 nginx: worker process 如果 Nginx 未运行，则输入以下的命令启动它。\nsudo systemctl start nginx #启动 Nginx sudo systemctl enable nginx #设置 Nginx 开机自启动 输入如下命令可查看 Nginx 的版本号\n[user@arch ~]$ nginx -v nginx version: nginx/1.9.14 在浏览器中输入 Arch Linux 服务器的 IP 地址，如果看见如下文字，则说明 Nginx 在正常运行。 如果你不知道服务器公网 IP，可以输入这条命令查看。\ncurl http://icanhazip.com 如果你是在本地主机安装，那么直接在浏览器地址栏输入 127.0.0.1 即可。\n安装 MariaDB 2013 年开始，Arch Linux 将 MariaDB 作为默认的 SQL 数据库软件，Oracle 的 MySQL 则被丢进 AUR（（（\n输入如下命令安装 MariaDB\nsudo pacman -S mariadb 在启动 MariaDB 服务之前，需要使用用 mysql_install_db命令初始化 MariaDB 的数据目录\nsudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql 启动 MariaDB 服务。\nsudo systemctl start mysqld 查看 MariaDB 状态。\nsystemctl status mysqld 输出：\n● mysqld.service - MariaDB database server Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled) Active: active (running) since Wed 2016-04-13 21:09:45 CST; 5s ago Process: 8373 ExecStartPost=/usr/bin/mysqld-post (code=exited, status=0/SUCCESS) Main PID: 8372 (mysqld) Tasks: 26 (limit: 512) CGroup: /system.slice/mysqld.service └─8372 /usr/bin/mysqld --pid-file=/run/mysqld/mysqld.pid 设置 MariaDB 开机自启动。\nsudo systemclt enable mysqld 运行安全安装脚本。\nsudo mysql_secure_installation 它会询问你 MariaDB 的 root 密码，因为我们没有设置密码，所以按 Enter 键，再设置一个 root 密码。然后选择删除 test 数据库，anonymous 用户以及禁用 root 用户远程登录。\n查看 MariaDB 的版本。\n[user@arch ~]$ mysql --version mysql Ver 15.1 Distrib 10.1.13-MariaDB, for Linux (x86_64) using readline 5.1 默认的配置文件位置为 /etc/mysql/my.cnf。\n第 4 步：安装 PHP7 Arch Linux 软件库的 PHP 一般都是最新版本（目前是 7.4 版本）\nsudo pacman -S php-fpm 安装后，修改 Nginx 配置文件以使 Nginx 使用 php-fpm 来运行 PHP。编辑/etc/nginx/nginx.conf 文件。\nsudo nano /etc/nginx/nginx.conf 找到 location ~ .php$这部分的配置，将这部分配置修改成如下。\nlocation ~ \\.php$ { root /usr/share/nginx/html; fastcgi_pass unix:/run/php-fpm/php-fpm.sock; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; } 保存文件。然后启动 php-fpm，并设置开机自启动。\nsudo systemctl start php-fpm sudo systemctl enable php-fpm 第 5 步：测试 PHP 在网站根目录创建一个 test.php 文件。默认的网站根目录是/usr/share/nginx/html。\nsudo nano /usr/share/nginx/html/test.php 在文件中添加如下 PHP 代码。\n\u0026lt;?php phpinfo(); ?\u0026gt;保存文件。重新加载 Nginx。\nsudo systemctl reload nginx 然后在浏览器地址栏输入 http://你服务器或本地主机IP/test.php。将 server-ip 替换成 Arch Linux 服务器或本地主机 IP。 此时，浏览器会显示有关 PHP 到底信息，这意味着你已修改成功。\ntest.php 文件只是用来测试 PHP 的，为了不让他人看见服务器的信息，测试之后要将它删除。\nsudo rm /usr/share/nginx/html/test.php 启用 PHP 扩展 编辑 /etc/php/php.ini 配置文件。\nsudo nano /etc/php/php.ini 找到如下两行文字，去掉前面的#符号以启用 mysqli 和 pdo_mysql。\n;extension=mysqli.so ;extension=pdo_mysql.so mysqli.do 用来建立数据库连接。pdo_mysql.so 是 drupal 内容管理系统所必要的 PHP 扩展。如果需要在 WordPress, Drupal 内容管理系统中剪裁、旋转图片，那么需要启用 imagemagick 这个扩展。\n安装教程到此结束。\n转载自\n Install Nginx, MariaDB, PHP7 (LEMP) on Arch Linux Server in 2019 转载略有修改  ","date":"2020-05-30T20:31:49Z","permalink":"https://blog.linioi.com/posts/5/","title":"Arch Linux 服务器安装 LNMP"},{"content":" 无需配置 Hexo 环境~ 在任何可以打开网页的设备上即可编辑你的 Hexo 博客并部署！\n 你要先清楚某些东西…  在私有仓库下使用 GitHub Action 是不完全免费的。 对于免费用户，你每个月只能使用 GitHub Action 工作 2000 min。这个数据计算方法特别有意思，详见 GitHub   据我多次测试，对于我的博客，GitHub Action 每次部署大概要耗时 1 min。 假设你每次提交需要耗时 2 min，这意味着你如果使用私有仓库存放后续操作中的源码，你每个月只能提交 1000 次博客。折算下来，也就是说，你每天只能提交 33 次博客。\n需要特别说明的，上面的时间计算是在 Linux 环境下的计算。如果你在后续操作中使用的 Operating system 是 Windows 或 macOS ，则 GitHub Action 记录的时间分别是你实际使用时间的 2 倍和 10 倍。\n话说，如果你能做到每天提交 33 次博客，请务必留个联系方式让我认识一下。没别的意思，就是想瞻仰一下劳模的风采。\n  在测试过程中，我发现即使使用 Linux 作为 Operating system， GitHub Action 实际工作时间也和 GitHub 计费时间并不相同。 同时，我在 GitHub Action 界面发现如下文字：  This is the workflow execution time which may be different than the billed time.  如果你需要自定义域名，你的CNAME文件应放在 Hexo 源码仓库的 source 文件夹下。 hexo-action@v1.0.0 会自动删除项目仓库下的.deploy_git文件。即每次提交源码后，部署 Hexo 的那个仓库的所有历史提交将会被清空。这个问题在 hexo-action@1.0.1 被修复。我认为这个修复是不合理的。 如果需要添加额外的 node module，则在package.json中添加相应依赖。  默认已满足的条件  已注册 GitHub 账号 已有一个部署到 GitHub 且工作正常的 Hexo 博客 有一定动手能力   接下来，让我们开始……\n方法一  部署集成环境  GitHub 建立一个新的仓库，公有还是私有，取决于你的选择。建议此时生成 SSH 密匙简化后续提交过程。   特别提醒，对于 GitHub 免费用户，私有仓库每个月的数据传输上限为 1GB。 \u0026lt;===该部分内容源自 GitHub 文档，但是实际操作中并未发现该现象，目前还在考证中。 GitHub Actions 部署时使用的数据不会计入数据传输上限。\n 在博客源码中新建.github/workflows/hexo.yml文件，在文件添加如下内容：  name: Deploy # workflow 名字 on: [push] # 触发事件 jobs: build: # Job 1 ID runs-on: ubuntu-latest # 设定运行环境为最新版 Ubuntu，如果你有把握的话，你也可以改成其它运行环境。参见文末备注。 name: Deploy blog. steps: - name: Checkout # Step 1 获取源码 uses: actions/checkout@v1 # 使用 actions/checkout@v1 with: # 条件 submodules: true ## Checkout private submodules(themes or something else).参见文末备注。 # Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。 - name: Cache node modules # Step 2 uses: actions/cache@v1 id: cache with: path: node_modules key: ${{ runner.os }}-node-${{ hashFiles(\u0026#39;**/package-lock.json\u0026#39;) }} restore-keys: | ${{ runner.os }}-node- - name: Install Dependencies # Step 3  if: steps.cache.outputs.cache-hit != \u0026#39;true\u0026#39; # 如果变量 cache-hit 不等于 true run: npm install # 安装 NPM 相关依赖 # Deploy hexo blog website. - name: Deploy # Step 4 id: deploy uses: sma11black/hexo-action@v1.0.1 with: deploy_key: ${{ secrets.DEPLOY_KEY }} user_name: your github name #你 GitHub 用户名。如果去除该行则使用 bot。去除该行是不推荐行为。 user_email: yourgithubemail@example.com #你 GitHub 邮箱。如果去除该行则使用 bot。去除该行是不推荐行为。 commit_msg: ${{ github.event.head_commit.message }} #Hexo 部署博客的自动提交备注 部分内容需要根据你实际情况修改为相应内容\npush 你的博客源码到刚刚新建的仓库。   建议在 push 前进行一次 hexo clean。且在每一次hexo g后准备 push，都应该进行一次 hexo clean\n 输入如下命令再生成一对 SSH 密匙。  ssh-keygen -t rsa -f ~/.ssh/id_rsa_a -C \u0026#34;example@example.com\u0026#34; 如果你使用的是未预安装 OpenSSH 软件的 Linux 发行版，你需要先安装 OpenSSH 再进行如下步骤。 命令中的邮箱填自己 GitHub 的邮箱。此时会在本地生成一对公匙和私匙。\n 打开你 GitHub 存放源码的那个仓库，转到Settings \u0026gt; Secrets，创建一个名为DEPLOY_KEY的Secret，复制上面生成的私匙内容。复制内容应该包含私匙开始的\u0026mdash;\u0026ndash;BEGIN OPENSSH PRIVATE KEY\u0026mdash;\u0026ndash; 和结束的 \u0026mdash;\u0026ndash;END OPENSSH PRIVATE KEY\u0026mdash;\u0026ndash;\n  打开你部署博客的那个仓库，即仓库名为 yourgithubname.github.io 的那个仓库，转到Settings \u0026gt; Deploy Keys，输入上面生成的公匙，勾选 “Allow write access”并确定。\n  享受你的 GitHub CI 吧~\n  备注内容（可以不看）  其他可选的运行环境请参见 GitHub 关于 Submodules 参见 GitHub  方法二   打开 github.com\n  在 Settings - Developer settings - Personal access tokens - Generate new token 中创建密钥，勾选 Repo，拉到最下面，Generate token，接着将生成的 Token 保存下来（Token 只会出现一次，请务必妥善保管）\n  在你 Hexo 博客文件仓库/分支所在的仓库 的 Settings - Secrets - Add a new secret 创建俩个变量分别是 GH_REF 和 GH_TOKEN。 GH_REF 内容为你 GitHub Pages 仓库的地址（不需要包含 https） GH_TOKEN 内容为上面所获取的 Token。\n  如果你对自动部署细节不感兴趣，可以直接跳转 成品 复制并根据自己情况修改即可。\n配置内容 1.名称(这个随意取)\nname: Hexo Blog Deploy 2.指定触发 workflow 的事件，这里选择的是推送至指定分支的事件\non: push: # 这里是推送事件 branches: - master # 这里指定了推送的分支 3.设置时区，这里设置的是上海的\nenv: TZ: Asia/Shanghai 4.指定 workflow 所运行的系统，此处设置的是最新 Ubuntu。\nblog-cicd: name: Hexo build runs-on: ubuntu-latest 5.检出代码，设置 Node 环境\n- name: Checkout codes uses: actions/checkout@v2 - name: Setup node uses: actions/setup-node@v1.1.0 with: node-version: \u0026#34;12.x\u0026#34; # Node 的版本 6.同步子模块。如果没有使用子模块的话，这一步可以忽略。\n- name: Checkout submodules run: |auth_header=\u0026#34;$(git config --local --get http.https://github.com/.extraheader)\u0026#34; git submodule sync --recursive git -c \u0026#34;http.extraheader=$auth_header\u0026#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1 7.缓存 .npm 目录，加快构建速度\n- name: Cache Node Dependencies # Npm 缓存，这一步报错的话，把这部分删掉即可 id: cache uses: actions/cache@v1 with: path: .npm key: ${{runner.OS}}-npm-caches-${{ hashFiles(\u0026#39;package-lock.json\u0026#39;) }} 8.安装依赖。我建议，如果可以，请每次都执行以下步骤。\n- name: Install dependencies run: |npm install hexo-cli -g npm install 9.生成文件。\n- name: Generate files run: | hexo clean \u0026amp;\u0026amp; hexo generate 10.将 GitHub Pages 仓库克隆下来，并将 .git 目录移动到生成文件的文件夹文件夹中（这样可以保留之前的 commit 记录），然后再将其推送到 GitHub Pages\n- name: Deploy blog run: |git clone \u0026#34;https://${{ secrets.GH_REF }}\u0026#34; deploy_git mv ./deploy_git/.git ./public/ cd ./public git config --local user.email \u0026#34;your@email\u0026#34; # 你的邮箱 git config --local user.name \u0026#34;yourname\u0026#34; # 你的用户名 git add . git commit -m \u0026#34;GitHub Actions Auto Builder at $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push --force \u0026#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}\u0026#34; master:master 成品 最后的 workflow\nname: Blog Deploy on: push: branches: - master env: TZ: Asia/Shanghai jobs: blog-cicd: name: Hexo build and deploy runs-on: ubuntu-latest steps: - name: Checkout codes uses: actions/checkout@v2 - name: Setup node uses: actions/setup-node@v1.1.0 with: node-version: \u0026#34;12.x\u0026#34; # 若需要同步子模块的话，将下面的注释删掉即可 # # - name: Checkout submodules # run: | # auth_header=\u0026#34;$(git config --local --get http.https://github.com/.extraheader)\u0026#34; # git submodule sync --recursive # git -c \u0026#34;http.extraheader=$auth_header\u0026#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1 - name: Cache Node Dependencies # Npm 缓存，这一步报错的话，把这部分删掉即可 id: cache uses: actions/cache@v1 with: path: .npm key: ${{runner.OS}}-npm-caches-${{ hashFiles(\u0026#39;package-lock.json\u0026#39;) }} - name: Install dependencies run: |npm install hexo-cli -g npm install - name: Generate files run: | hexo clean \u0026amp;\u0026amp; hexo generate - name: Deploy blog run: |git clone \u0026#34;https://${{ secrets.GH_REF }}\u0026#34; deploy_git mv ./deploy_git/.git ./public/ cd ./public git config --local user.email \u0026#34;your@email\u0026#34; # 你的邮箱 git config --local user.name \u0026#34;yourname\u0026#34; # 你的用户名 git add . git commit -m \u0026#34;GitHub Actions Auto Builder at $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push --force \u0026#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}\u0026#34; master:master 我的配置文件 如果你还是无法理解的话，可以直接复制我的配置文件，然后修改用户名和邮箱为自己 GitHub 的用户名和邮箱。\n Note：请注意修改 Clone themes 中的主题链接为你所用的主题的 URL\n name: GitHub Auto Buider For Blog on: push: branches: - master schedule: - cron: \u0026#39;0 21 * * *\u0026#39; env: TZ: Asia/Shanghai jobs: blog-cicd: name: Hexo build and deploy runs-on: ubuntu-latest steps: - name: Checkout codes uses: actions/checkout@v2 - name: Setup node uses: actions/setup-node@v1.1.0 with: node-version: \u0026#34;12.x\u0026#34; - name: Clone themes run: | git clone -b dev https://github.com/YunYouJun/hexo-theme-yun.git themes/yun - name: Cache Node Dependencies id: cache uses: actions/cache@v1 with: path: .npm key: ${{runner.OS}}-npm-caches-${{ hashFiles(\u0026#39;package-lock.json\u0026#39;) }} - name: Install dependencies run: |npm install hexo-cli -g npm install npm audit fix - name: Generate files run: | hexo clean \u0026amp;\u0026amp; hexo generate - name: Deploy blog run: |git clone \u0026#34;https://${{ secrets.GH_REF }}\u0026#34; deploy_git mv ./deploy_git/.git ./public/ cd ./public git config --local user.email \u0026#34;xxxx\u0026#34; # 你的邮箱 git config --local user.name \u0026#34;RimuruW\u0026#34; # 你的用户名 git add . git commit -m \u0026#34;GitHub Actions Auto Builder at $(date +\u0026#39;%Y-%m-%d %H:%M:%S\u0026#39;)\u0026#34; git push --force \u0026#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}\u0026#34; master:master 参考文档：\n Hexo-Action Lufs\u0026rsquo;s blog  ","date":"2020-04-29T01:47:09Z","permalink":"https://blog.linioi.com/posts/9/","title":"GitHub Action 实现 Hexo 博客持续集成"},{"content":" 对于大多数刷机用户而言，好用的第三方 Recovery 可以无疑可以带来许多便利\n 刷入适合你机型的第三方 Recovery 目前推荐的第三方 Recovery 有 OrangeFox 和 TeamWinRecoveryProject （即 TWRP）\nWindows 操作系统下 ADB 环境配置请参阅该链接\n OrangeFox 是基于 TWRP 制作的。你可以理解为 TWRP 的魔改版本\n 刷入步骤   手机关机，长按 音量减键 + 电源键 进入 FASTBOOT 模式。用数据线把手机和电脑连接起来。\n  以 OrangeFox 为示例。在上述步骤的下载后会得到一个压缩包，打开该压缩包，解压其中的 recovery.img 到任意一个位置。(压缩包是为了在有第三方 Recovery 的情况下刷入/更新 OrangeFox ，但是我们目前并没有，所以我们需要解压其中的 recovery.img 来使用 fastboot 刷入。)\n如果你选择使用 LR.Team 定制版 TWRP，可以选择一键刷入版，就不会有下一步复杂的操作。\n  打开 cmd （或者其它终端），输入 fastboot flash recovery 上一步解压的 recovery.img 的文件地址 。以下是一个示例：\nC:\\Users\\XXXX\u0026gt;fastboot flash recovery D:\\recovery.img Sending 'recovery' (65536 KB) OKAY [ 2.040s] Writing 'recovery' OKAY [ 0.368s] Finished. Total time: 2.427s 如果出现\n'fastboot' 不是内部或外部命令，也不是可运行的程序或批处理文件。 说明你没有配置好 ADB 环境。\n  在上一步的状态下，长按 音量加键 + 电源键 进入 Recovery 模式。（当然你也可以使用 fastboot reboot recovery 来进入 Recovery 模式，但是我没成功过（\n  一般情况下，会出现一个英文界面，从上往下依次写着 Mount Dectypt ，这是让你解密 Data 。输入你的锁屏密码即可，记得输入完后点击右下角的勾。\n  经过十秒左右秒钟的解密后，不出意外会显示欢迎界面，点击屏幕下方勾即可。然后就是挂载 System 的界面，滑动下方滑块即可。最后就进入了主界面。下图依次是 欢迎界面 \u0026ndash;\u0026gt; 挂载 System 界面 \u0026ndash;\u0026gt; 主界面。\n  如果需要改简体中文，点击底部的 Menu \u0026ndash;\u0026gt; 右上角的齿轮图标 \u0026ndash;\u0026gt; Regional \u0026ndash;\u0026gt; 点击 Language 下的 English ，选择 Chinese Simplified 。\n  一点小小的补充   给手机刷入 Recovery ，电脑不必是 Windows 系统。Linux 发行版同样可以安装相应软件包然后输入上述指令安装，这里不再赘述，请参阅 Google 开发者文档。注意，Linux 下执行 fastboot 需要在 ROOT 用户下执行。\n  给手机刷入 Recovery 其实也不需要电脑，用另一部手机借助 Termux 也是同样可以的。在 Termux 配置好 ADB 环境后，照上述步骤刷入即可。安装 Termux 的那部手机无需 ROOT。\n  ","date":"2020-04-13T11:46:44Z","permalink":"https://blog.linioi.com/posts/8/","title":"通过 ADB 给手机刷入第三方 Recovery"},{"content":" PE 即 Pixel Experience。Violet 为 Redmi Note 7 Pro 的机型代号，同时，该机型也是 PE 现维护机型之一。\n  注意：由于 Violet 机型 PE/Plus 已更换维护者，本教程刷入方法已作废，现 PE/Plus 刷入方法请参照 Violet 通用刷机教程\n PE/Plus 刷入教程又更新了！！ 原先的刷入教程因为 Dyneteve 一番操作，目前已经完全没有作用……\n之所以写这篇教程，是因为我发现 PE/Plus 这么优秀的 ROM 推出后竟鲜见人上车…故此，我决定再写一篇刷入教程，拖你们下水 带你们上车\n 对于有一定英语水平的用户，直接看 Dyneteve 的 Flash Guide 即可。\n 刷前需知  刷入 ROM 前，请确保你的设备已解锁 Bootloader。 建议在刷入前退出 Google 帐号和小米帐号，以免卡 Google 开机验证。   本文会提供两种刷入方式，请根据自己需求选择。 阅读本教程建议搭配这篇教程，食用效果更佳\n 方法一：  如果你电脑是 Linux 发行版，请忽略此方法。\n  下载 AOSP Recovery Flasher v4 和 PE/Plus 刷机包 如果你不使用 Telegram，可以从以下两个链接中选择一个下载。   GitHub （推荐） Google Drive （不推荐，需要审核）   解压上面下载的 AOSP Recovery Flasher v4 至电脑某个不含中文的目录。\n  复制下载好的刷机包至第 2 步解压后生成文件夹中 sideload 文件夹下。\n  手机长按电源键和音量-进入 Fastboot 模式并用数据线连接电脑。\n  打开第 2 步解压后生成的文件夹，双击 flashme.bat。\n  坐和放宽，等待 Recovery 和 Vendor 刷入完成。\n  刷入完成后，长按电源键和音量+ 进入 AOSP Recovery。若手机显示 no command 或者没有指令，请按一次音量 + 。\n  使用音量键控制光标，使用电源键选择 Apply update from ADB 。\n  在 Windows 命令行窗口回车后，选择要 sideload 的文件，输入文件前面的数字，回车，等待刷入到 47%，以下是一个示例。\n  Press POWER + VOL UP till you get to the redmi screen after you get there release after 2s Press enter after you put your recovery into sideload and the rom into the sideload folder Check your device you might need to press yes to continue flashing after 47 To select the file press press the number in front of it [1]. PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip Enter a file to load: 1 You selected PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip  输入到 47% 时，AOSP Recovery 会提示验证失败，是否继续刷入。使用手机的音量键和电源键，在上方的选项中选择 Yes，等待刷入完成。\n  刷入完成后，在 AOSP Recovery 中选择 Wipe data/factory reset ,选择 Factory data reset 。\n  Factory Reset 完成后，选择 Reboot system now 开机。\n  至此，刷入完成。\n方法二：  下载 AOSP Recovery Flasher v4 和 PE/Plus 刷机包 如果你不使用 Telegram，可以从以下两个链接中选择一个下载。   GitHub （推荐） Google Drive （不推荐，需要审核）   解压 AOSP Recovery Flasher v4 到手机任意一个你可以找到的目录。\n  打开你第 2 步解压得到的文件夹。 文件夹前几层结构大致如下：\n  ├── flashme.bat ├── images │ ├── BTFM.bin │ ├── NON-HLOS.bin │ ├── abl.elf │ ├── aop.mbn │ ├── cmnlib.mbn │ ├── cmnlib64.mbn │ ├── devcfg.mbn │ ├── dspso.bin │ ├── dtbo.img │ ├── hyp.mbn │ ├── imagefv.elf │ ├── km4.mbn │ ├── multi_image.mbn │ ├── qupv3fw.elf │ ├── recovery.img │ ├── storsec.mbn │ ├── tz.mbn │ ├── uefi_sec.mbn │ ├── vbmeta.img │ ├── vendor.img │ ├── xbl.elf │ └── xbl_config.elf ├── sideload ├── t.md └── windows ├── AdbWinApi.dll ├── AdbWinUsbApi.dll ├── NOTICE.txt ├── adb.exe ├── api ├── dmtracedump.exe ├── etc1tool.exe ├── fastboot.exe ├── hprof-conv.exe ├── lib64 ├── libwinpthread-1.dll ├── make_f2fs.exe ├── mke2fs.conf ├── mke2fs.exe ├── sideload.bat ├── source.properties ├── sqlite3.exe └── systrace 找到 images 文件夹下 vendor.img 文件，并解压至任意一个你可以找到的目录下。\n手机参照此教程刷入第三方 Recovery   据反馈，使用 TWRP 刷入可能出现不开机情况。 建议使用 OrangeFox 刷入。\n  手机长按音量+和电源键进入第三方 Recovery。\n  在第三方 Recovery 中点击清除-高级清除。勾选 Davilk Cache + Cache + Data + System，滑动清除。\n  按返回键返回主界面，选择安装，找到你解压的 vendor.img 刷入到 Vendor 分区。\n  返回到安装界面，找到你下载的 PE/Plus 刷机包，滑动刷入。不要勾选签名校验和自动重启\n  按返回键回到主界面，选择清除-格式化 Data。输入 yes 确定。\n  PE/Plus 会将 Recovery 替换成 AOSP Recovery。如果不想 Recovery 被替换，请在开机前刷入 Magisk。\n  刷入教程至此结束。\nAOSP Recovery 现证实可以刷入 Magisk Installer 如果需要刷入 Magisk，直接在 AOSP Recovery 中刷入即可\n不借助 Recovery 刷入 Magisk 解压 PE 刷机包，结构大致如下：\n├── META-INF │ └── com │ ├── android │ │ ├── metadata │ │ └── otacert │ └── google │ └── android │ ├── update-binary │ └── updater-script ├── boot.img ├── firmware-update │ ├── BTFM.bin │ ├── NON-HLOS.bin │ ├── abl.elf │ ├── aop.mbn │ ├── cmnlib.mbn │ ├── cmnlib64.mbn │ ├── devcfg.mbn │ ├── dspso.bin │ ├── dtbo.img │ ├── hyp.mbn │ ├── imagefv.elf │ ├── km4.mbn │ ├── multi_image.mbn │ ├── qupv3fw.elf │ ├── storsec.mbn │ ├── tz.mbn │ ├── uefi_sec.mbn │ ├── vbmeta.img │ ├── xbl.elf │ └── xbl_config.elf ├── install │ └── bin │ ├── backuptool.functions │ └── backuptool.sh ├── system.new.dat.br ├── system.patch.dat └── system.transfer.list  找到其中的 boot.img 文件，复制至手机任何一个你可以找到的目录。 下载并安装 Magisk Manager，打开 Magisk Manager，点击 Magisk 旁的安装，点击“修补一个文件”。 选择你解压的 boot.img 文件，等待 Magisk Manager 修补完成。修补后的文件会自动存放于 Download 文件夹中。你需要将该文件传输至电脑任意一个你可以找到的目录。 配置 ADB 环境，手机进入 Fastboot 模式并连接电脑，电脑输入 fastboot flash boot boot.img。输入完后回车。 其中， boot.img 需要替换为你 boot.img 的文件地址。 如果你不知道怎么获取文件地址，或者觉得太过麻烦，你其实只需要将文件用鼠标拖入命令框。 手机开机，享受你的 Magisk 吧~~  ","date":"2020-04-13T11:44:52Z","permalink":"https://blog.linioi.com/posts/10/","title":"Violet 机型 PE/Plus 刷入教程"},{"content":"拿到手机后干什么？刷机！\n 如果你的设备出现损坏，我不会对你的设备负责！\n如果你的设备出现损坏，我不会对你的设备负责！\n如果你的设备出现损坏，我不会对你的设备负责！\n 刷机前请先看看最下面的乱七八糟的问题（\n由于 Dyneteve 的骚操作，本篇文章不针对 PE 进行说明。如果你是为了刷入 PE ，请点击此链接来刷入。\n Redmi Note 7 Pro，是 Redmi 于 2019-3-18 发布的手机。机型代号为 violet 。\n 一、得到这部手机 小米商城已经没有了，去其它地方看看吧（\n二、解锁 Bootloader 前往小米官方解锁页面申请权限并根据提示解锁。\n三、下载刷机所需文件   Android Debug Bridge\n Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。来自 Google 官方页面。\n 具体下载和配置可参考少数派的这篇文章。\n如果你使用一键刷入之类的应用，则不需要此操作。\n  Recovery\n目前我只推荐两个 Recovery：OrangeFox 和 LR.Team 定制版 TWRP（提取码：xipd）\n  底包\n前往这里下载。一般来说，选择最新的开发版底包即可，除非 ROM 作者有特殊要求。\n有的系统自带底包，我们可以不刷入底包。\n如图，在 Device 那搜索并选择 violet ，点击 Download ，在跳转的页面中选择你需要的底包，点击 Download 来下载。\n  刷机包\n看各位喜好啦~~\n  四、刷入 Recovery   手机关机，长按 音量减键 + 电源键 进入 FASTBOOT 模式。用数据线把手机和电脑连接起来。\n  这里我以 OrangeFox 为示例。在上述步骤的下载后会得到一个压缩包，打开该压缩包，解压其中的 recovery.img 到任意一个位置。(压缩包是为了在有第三方 Recovery 的情况下刷入/更新 OrangeFox ，但是我们目前并没有，所以我们需要解压其中的 recovery.img 来使用 fastboot 刷入。)\n如果你选择使用 LR.Team 定制版 TWRP，可以选择一键刷入版，就不会有下一步复杂的操作。\n  打开 cmd （或者其它终端），输入 fastboot flash recovery 上一步解压的 recovery.img 的文件地址 。以下是一个示例：\n  C:\\Users\\XXXX\u0026gt;fastboot flash recovery D:\\recovery.img Sending 'recovery' (65536 KB) OKAY [ 2.040s] Writing 'recovery' OKAY [ 0.368s] Finished. Total time: 2.427s  如果出现 'fastboot' 不是内部或外部命令，也不是可运行的程序或批处理文件。 说明你没有配置好 ADB 环境。\n  在上一步的状态下，长按 音量加键 + 电源键 进入 Recovery 模式。（当然你也可以使用 fastboot reboot recovery 来进入 Recovery 模式，但是我没成功过（\n  一般情况下，会出现一个英文界面，从上往下依次写着 Mount Dectypt ，这是让你解密 Data 。输入你的锁屏密码即可，记得输入完后点击右下角的勾。\n  经过十秒左右秒钟的解密后，不出意外会显示欢迎界面，点击屏幕下方勾即可。然后就是挂载 System 的界面，滑动下方滑块即可。最后就进入了主界面。下图依次是 欢迎界面 \u0026ndash;\u0026gt; 挂载 System 界面 \u0026ndash;\u0026gt; 主界面。\n  如果需要改简体中文，点击底部的 Menu \u0026ndash;\u0026gt; 右上角的齿轮图标 \u0026ndash;\u0026gt; Regional \u0026ndash;\u0026gt; 点击 Language 下的 English ，选择 Chinese Simplified 。\n  五、刷入 ROM   在上一步的状态下，返回主界面，点击下方的 Menu \u0026ndash;\u0026gt; Manage Parttions \u0026ndash;\u0026gt; 选择 Data \u0026ndash;\u0026gt; 点击右下方的勾 \u0026ndash;\u0026gt; 点击 Format Data \u0026ndash;\u0026gt; 输入 yes 来格式化 Data 。\n  在上一步的状态下，回到主界面，点击下方的 Menu \u0026ndash;\u0026gt; Reboot \u0026ndash;\u0026gt; Recovery 来重启一次 Recovery 。\n  重启到 Recovery 后，点击下方的 Wipe \u0026gt; 选择你想选择清除的分区（以下是一个示例） \u0026gt; 滑动下方滑块来清除数据。清除完成后再次重启一次 Recovery 。\n  通过数据线将刷机包，底包传到手机。先选择底包，滑动下方滑块来刷入，再刷入系统（有的系统自带底包，我们不需要额外刷入底包）。刷入完成后就可以重启到系统。\n  六、φ(゜▽゜*)♪ 不出意外，我们已经成功刷入了一个系统！！！\n七、乱七八糟的问题   重启到 Recovery 后显示 The system has been destoryed （可能只会出现在官方 MIUI 系统上）？\n这个与 AVB 2.0 有关。具体请参见 Google 官方说明。\n解决方法是打开你下载的刷机包（只要不是官方 MIUI 的刷机包），解压 vbmeta.img （可能在 /firmware-update 下）到任意一个位置。手机进入 FASTBOOT 模式，电脑打开 cmd 输入 fastboot flash vbmeta 解压的 vbmeta.img 的文件地址 ，等待刷入完成，重启到 Recovery 即可。以下是一条示例命令：\nC:\\Users\\XXXX\u0026gt;fastboot flash vbmeta D:\\vbmeta.img   发现 Recovery 被替换？\n刷入 Magisk 。（如果你不想使用 Magisk，可以试试 OrangeFox 的防止还原 Recovery 的功能，在 设置 \u0026ndash;\u0026gt; OTA 下。\n  Google 开机向导无法跳过？\n看这里。（在刷机前退出原先系统登录的 Google 账户就行啦~\n  从 Dyneteve 的系统线刷到 MIUI 出现 The system has destoryed ？\n找售后！！！\n你可能线刷选择了上锁（\n所以说，刷过 Dyneteve 的系统后，回 MIUI 千万不能上锁（（（（（\n  刷机后第一次开机无限重启到 Recovery ？\n大概率是你没格式化 Data （建议去格式化一下\n  Recovery 乱码？\n 格式化 Data 换 Recovery    Google Camera 一直停止运行？\n如果你用的是基于 LOS 的系统的话，那么停止运行可能是因为你的系统中没有 GApps 。选择以下的其中之一从 Recovery 刷入即可：\n  OpenGApps，选择 ARM64 pico ，Android 那一列根据你的系统的安卓版本选择。\n  NikGApps\n  BiTGApps\n  MicroG\n  如果你确定已经安装了 GApps，仍然停止运行，那么可以换一个 Google Camera 的版本试试。\n  ","date":"2020-04-03T11:56:06Z","permalink":"https://blog.linioi.com/posts/11/","title":"如何在 Redmi Note 7 Pro 上刷机？"},{"content":" 平常用 dd 命令用的比较少，干脆记一点关于 dd 命令的笔记，自己之后可以看看\n dd 指令的解释 dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。\n 注意：指定数字的地方若以下列字符结尾，则乘以相应的数字 例如b=512；c=1；k=1024；w=2\n 参数注释：\n if=\u0026lt;文件名\u0026gt;：输入文件名，缺省为标准输入。即指定源文件。\u0026lt; if=input file \u0026gt; of=\u0026lt;文件名\u0026gt;：输出文件名，缺省为标准输出。即指定目的文件。\u0026lt; of=output file \u0026gt; ibs=：一次读入bytes个字节，即指定一个块大小为bytes个字节。 obs=：一次输出bytes个字节，即指定一个块大小为bytes个字节。 bs=：同时设置读入/输出的块大小为bytes个字节。 cbs=：一次转换bytes个字节，即指定转换缓冲区大小。 skip=：从输入文件开头跳过blocks个块后再开始复制。 seek=：从输出文件开头跳过blocks个块后再开始复制。   注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。\n  count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。 conv=conversion：用指定的参数转换文件。   ascii：转换ebcdic为ascii ebcdic：转换ascii为ebcdic ibm：转换ascii为alternate ebcdic block：把每一行转换为长度为cbs，不足部分用空格填充 unblock：使每一行的长度都为cbs，不足部分用空格填充 lcase：把大写字符转换为小写字符 ucase：把小写字符转换为大写字符 swab：交换输入的每对字节 noerror：出错时不停止 notrunc：不截短输出文件 sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。\n dd指令应用实例  将本地的/dev/hdb整盘备份到/dev/hdd #dd if=/dev/hdb of=/dev/hdd 将/dev/hdb全盘数据备份到指定路径的image文件 #dd if=/dev/hdb of=/root/image 将备份文件恢复到指定盘 #dd if=/root/image of=/dev/hdb 备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径 #dd if=/dev/hdb | gzip \u0026gt; /root/image.gz 将压缩的备份文件恢复到指定盘 #gzip -dc /root/image.gz | dd of=/dev/hdb 备份与恢复MBR 备份磁盘开始的512个字节大小的MBR信息到指定文件： #dd if=/dev/hda of=/root/image count=1 bs=512 恢复： #dd if=/root/image of=/dev/had 将备份的MBR信息写到磁盘开始部分   count=1指仅拷贝一个块；bs=512指块大小为512个字节。\n  备份软盘 #dd if=/dev/fd0 of=disk.img count=1 bs=1440k (即块大小为1.44M) 拷贝内存内容到硬盘 #dd if=/dev/mem of=/root/mem.bin bs=1024 (指定块大小为1k) 拷贝光盘内容到指定文件夹，并保存为cd.iso文件 #dd if=/dev/cdrom(hdc) of=/root/cd.iso 增加swap分区文件大小 第一步：创建一个大小为256M的文件： #dd if=/dev/zero of=/swapfile bs=1024 count=262144 第二步：把这个文件变成swap文件： #mkswap /swapfile 第三步：启用这个swap文件： #swapon /swapfile 第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件： swapfile swap swap default 0 0 销毁磁盘数据 #dd if=/dev/urandom of=/dev/hda1   注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。\n  测试硬盘的读写速度  dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file` dd if=/root/1Gb.file bs=64k | dd of=/dev/null 通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。\n 确定硬盘的最佳块大小：  dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file 通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。\n 修复硬盘： #dd if=/dev/sda of=/dev/sda或dd if=/dev/hda of=/dev/hda   若硬盘较长时间(一年以上)放置不使用，磁盘上会产生magnetic flux point。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。 当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。并且这个过程是安全、高效的。\n  利用netcat远程备份 #dd if=/dev/hda bs=16065b | netcat \u0026lt; targethost-IP \u0026gt; 1234 在源主机上执行此命令备份/dev/hda #netcat -l -p 1234 | dd of=/dev/hdc bs=16065b 在目的主机上执行此命令来接收数据并写入/dev/hdc  netcat -l -p 1234 | bzip2 \u0026gt; partition.img netcat -l -p 1234 | gzip \u0026gt; partition.img 以上两条指令是目的主机指令的变化分别采用bzip2、gzip对数据进行压缩，并将备份文件保存在当前目录。\n 将一个大视频文件的第i个字节的值改成0x41（大写字母A的ASCII值） #echo A | dd of=bigfile seek=$i bs=1 count=1 conv=notrunc 建立linux虚拟盘，用文件模拟磁盘   在进行linux的实验中，如果没有多余的硬盘来做测试。则可以在linux下使用文件来模拟磁盘，以供测试目的。 其模拟过程如下所示，摘录自《Oracle数据库核心技术与实务详解－教你如何成为Oracle 10g OCP》一书。\n 1)以root用户创建一个ASM磁盘所在的目录。\n#mkdir –p /u01/asmdisks\n2)通过dd命令创建6个400M大小的文件，每个文件代表一块磁盘。\n[root@book u01]# cd asmdisks [root@book asmdisks]# dd if=/dev/zero of=asm_disk1 bs=1024k count=400 [root@book asmdisks]# dd if=/dev/zero of=asm_disk2 bs=1024k count=400 [root@book asmdisks]# dd if=/dev/zero of=asm_disk3 bs=1024k count=400 [root@book asmdisks]# dd if=/dev/zero of=asm_disk4 bs=1024k count=400 [root@book asmdisks]# dd if=/dev/zero of=asm_disk5 bs=1024k count=400 [root@book asmdisks]# dd if=/dev/zero of=asm_disk6 bs=1024k count=400 3)将这些文件与裸设备关联。\n[root@book asmdisks]# chmod 777 asm_disk* [root@book asmdisks]# losetup /dev/loop1 asm_disk1 [root@book asmdisks]# losetup /dev/loop2 asm_disk2 [root@book asmdisks]# losetup /dev/loop3 asm_disk3 [root@book asmdisks]# losetup /dev/loop4 asm_disk4 [root@book asmdisks]# losetup /dev/loop5 asm_disk5 [root@book asmdisks]# losetup /dev/loop6 asm_disk6  注意：如果要删除通过dd模拟出的虚拟磁盘文件的话，直接删除模拟出的磁盘文件 （也就是asm_disk1、asm_disk2…asm_disk6）还不够，还必须执行losetup -d /dev/loopN，在这里N从1到6。否则，磁盘文件所占用的磁盘空间不能释放\n ","date":"2020-03-29T23:42:43Z","permalink":"https://blog.linioi.com/posts/6/","title":"DD 指令用法详解"},{"content":"第一篇博客，Hello world~~\n 希望自己删库跑路不要那么快\n ","date":"2020-03-24T19:01:10Z","permalink":"https://blog.linioi.com/posts/7/","title":"First Blog"}]