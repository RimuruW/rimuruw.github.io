<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>清絮的博客</title><link>https://blog.linioi.com/</link><description>Recent content on 清絮的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 13 Feb 2021 16:25:19 +0000</lastBuildDate><atom:link href="https://blog.linioi.com/index.xml" rel="self" type="application/rss+xml"/><item><title>博客域名迁移</title><link>https://blog.linioi.com/posts/change-to-new-domain/</link><pubDate>Sat, 13 Feb 2021 16:25:19 +0000</pubDate><guid>https://blog.linioi.com/posts/change-to-new-domain/</guid><description>&lt;p>经历一番艰难的抉择与财力上的再三考量，我终于还是着手放弃&lt;a class="link" href="qingxu.live" >原博客域名&lt;/a>。&lt;/p>
&lt;h3 id="更换域名的原因及旧域名处理方式">更换域名的原因及旧域名处理方式&lt;/h3>
&lt;p>更换域名的原因有两个：&lt;/p>
&lt;ul>
&lt;li>.live 域名续费价格超出我的想象…根据我查询结果，即使是最便宜的域名注册商(境外)的续费价格也是 $16 以上。这大概是两个 .com 域名的续费价格了(按最便宜的域名注册商价格算)。考虑到我对 .live 域名后缀没有特别的需求(&lt;del>当初选择这个纯粹是因为腾讯云域名列表就它最便宜&lt;/del>)，似乎没有坚持这个域名的必要了。&lt;/li>
&lt;li>因为一系列原因，我对现域名注册商(腾讯云)由原来的略微反感到现在的强烈抵触。大概是不想被&lt;del>国内域名注册商喂💩&lt;/del>，即使是国内域名注册商价格明显优势的情况下，我还是选择了国外的域名注册商(当然，是最便宜那种)。&lt;/li>
&lt;/ul>
&lt;p>目前对旧域名的处理方案是：&lt;/p>
&lt;ul>
&lt;li>暂不出售（&lt;del>我感觉也没人会买&lt;/del>）&lt;/li>
&lt;li>保留绝大多数原旧域名链接并确保在未来几年里都可以正常访问。&lt;/li>
&lt;li>设置部分关键链接的 301 重定向，*.linioi.com 将成为绝对的主域名&lt;/li>
&lt;li>修改几乎所有我可编辑的文档中的 *.qingxu.live 为 *.linioi.com&lt;/li>
&lt;li>对于以 @qingxu.live 为后缀的邮件地址采取保持收件但停止发件。在未来的几年里逐步把绑定 @qingxu.live 邮件地址的其他帐号换绑为 @linioi.com（那些不能换绑邮箱的平台真让人头疼）。&lt;/li>
&lt;/ul>
&lt;p>话说好像还有很多人博客友链也还是指向 *.qingxu.live，我该怎么通知他们呢……&lt;/p>
&lt;h3 id="闲话">闲话&lt;/h3>
&lt;p>更换的&lt;a class="link" href="linioi.com" >新域名&lt;/a>其实是思考近半年后的结果了。期间考虑过无数域名前缀，但总不满意字符的美观性(&lt;del>奇怪的审美增加了&lt;/del>)及其代表的意义。当然，更关键的原因是我想到的域名都被注册了……最后选择的 linioi 其实是开始被否决了无数次的选项，但最后输入时却不由自主地输入了 linioi。或许是我平常 Linux 敲多了所以打字时有这样的下意识的举动，也或许是注定的奇妙的缘分，总之最后就是它了，凑合着也能用。&lt;/p>
&lt;p>倒是域名后缀几乎没有纠结。之前最心心念念的其实是 .moe 域名后缀，但是 $13.99（最低价格）的购买价格让我不敢多看……其他很多域名都是购买价格还算正常，续费价格高得离谱（比如 .ink 这样本来极其适合做博客的域名…）。在了解域名定价机制之后，我深刻认识到了 .com 域名虽然看起来昂贵（$8.99 起步），但实际上是最靠谱的那个域名——价格波动非常小而且续费价格稳定（泪）。并且 .com 域名是完全意义上的国际通用，换上 .com 域名的博客看起来就靠谱（&lt;del>虽然还是没人看&lt;/del>）&lt;/p>
&lt;p>说起来我折腾博客等其他一系列网站已经近一年了，一年前的我或许也从未想过自己竟然为了愿意为了博客破费购买域名吧（当初想要搭建一个静态博客就是因为听说静态博客免费）。自己第一个域名还是 Freenom 上免费领的，当时想到我也有了一个自己的域名而不是用 GitHub 的 github.io 的时候可激动了，现在认识了那些免费域名的套路后不禁因为当时的自己笑了起来。&lt;/p>
&lt;p>&lt;del>所以换了新域名后，博客更新会勤快一点吗？&lt;/del>&lt;/p></description></item><item><title>利用 Cloudflare Workers Site 部署静态博客</title><link>https://blog.linioi.com/posts/deploy-blog-to-cf/</link><pubDate>Sun, 29 Nov 2020 13:54:04 +0000</pubDate><guid>https://blog.linioi.com/posts/deploy-blog-to-cf/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>作为一个 &lt;del>很少更新博客&lt;/del> 热衷于折腾博客的小白玩家，博客的速度一直是我评估博客必不可少的一个方面。在曾经漫长的 Next 主题使用过程中，最能激发我兴趣的莫过于优化 Next 主题的样式和加载速度。&lt;/p>
&lt;p>可对于当时把博客托管 GitHub Pages 的我来说，不可避免的是国内极其尴尬的加载速度。为此，我尝试过把博客迁移到其他静态网站托管平台如 Netlify，但国内访问速度比起 GitHub Pages 也好不了多少，甚至还会出现服务器响应时间慢等问题……寻找一个足够理想的静态托管平台对于我来说是一个非常漫长的过程，即使是加载速度最令我满意的 Vercel 也不可避免网站刷新和域名问题。
（关于静态托管平台我可能会专门写一篇文章总结各大平台优缺点，这些暂且后话）&lt;/p>
&lt;h3 id="为什么选择-cloudflare">为什么选择 Cloudflare&lt;/h3>
&lt;p>引用一句幽默且常被许多站长挂在口中的一句话：「网站的访问速度一直是与光速作斗争。」&lt;/p>
&lt;p>当访客访问一个网站的时候，他可能要面临的是与千里之外的某一台服务器建立连接，然后数据跋山涉水横跨千里最后出现在他的浏览器。而这个时间太长了，长到绝大多数访客都不愿意为此等待。因此，为了提升建立连接的速度，有了 HTTP 的升级；为了提升静态数据分发速度，有了 CDN。而 Cloudflare Workers Site 则宣布在此基础上他们再实现了一个重要的突破——将整个站点部署在网络边缘。&lt;/p>
&lt;p>Cloudflare 拥有遍布全球的网络节点，200+ 数据中心让它的速度在全球范围内都有极其优秀的表现。与单纯的 CDN 相比，Cloudflare Workers Site 并不是将已缓存的静态资源放在边缘网络，让浏览器笨拙地跳转再跳转然后获取可能的最近最快的静态资源，而是&lt;strong>直接将整个网站部署到全球边缘网络，让访客直接访问网站获取数据&lt;/strong>。于是，在高速访问的基础上，Cloudflare Workers Site 进一步减少了回源时间，让整个站点在数据传输上接近完美。而 Cloudflare Workers Site 自带可编辑的 index.js 更是可以衍生不少实用和有趣的玩法。&lt;/p>
&lt;p>在寻找理想的静态托管平台的过程中，Cloudflare Workers Site 无疑让我垂涎已久，只是 $5/Month 起步的订阅费用也让我这个脱贫路上的硬骨头望而却步，最终只能无奈转投他家。&lt;/p>
&lt;p>但令我不敢想象的是，Cloudflare 于 2020 年 11 月 28 日正式宣布：&lt;a class="link" href="https://blog.cloudflare.com/workers-kv-free-tier/" target="_blank" rel="noopener"
>Cloudflare Workers KV 向 Workers Free Plan 免费开放&lt;/a>。&lt;/p>
&lt;p>虽然我知道 Cloudflare 向来慷慨大方（从 Free Plan 的免费额度中就可见一斑了），但也实在没想到它会直接到将 Workers 的核心付费功能 Cloudflare Workers KV 直接免费开放。&lt;/p>
&lt;p>不仅如此，Cloudflare 还特意把 Workers KV 的单个文件大小限制由 10MB 调整到了 25MB，这无疑更方便了网站静态资源的存放。而每天 Workers 10w 次免费调用次数我想对于绝大多数站长还是绰绰有余的。&lt;/p>
&lt;p>全球边缘网络加速 + 慷慨大方的免费额度，既然找不到拒绝的理由，那么就勉为其难地接受吧~~&lt;/p>
&lt;h2 id="常规部署">常规部署&lt;/h2>
&lt;h3 id="准备-cli-部署工具">准备 CLI 部署工具&lt;/h3>
&lt;p>开始部署前，我们要先安装 Cloudflare Workers 的 CLI 管理工具 &lt;a class="link" href="https://github.com/cloudflare/wrangler" target="_blank" rel="noopener"
>Wrangler&lt;/a>。&lt;/p>
&lt;p>Wrangler 可以通过 &lt;code>npm&lt;/code> 或 &lt;code>cargo&lt;/code> 安装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">npm i @cloudflare/wrangler -g
&lt;span class="c1"># 你也可以使用 Yarn 安装 Wrangler&lt;/span>
&lt;span class="c1"># yarn global add @cloudflare/wrangler&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">cargo install wrangler
&lt;/code>&lt;/pre>&lt;/div>&lt;p>{% note info simple %}
经过实测，Wrangler 可能无法安装在 ARM 架构的设备上。如果可以，尽量使用 x86 设备。
{% endnote %}&lt;/p>
&lt;h3 id="获取-api-token">获取 API Token&lt;/h3>
&lt;p>如果你没有一个 Cloudflare 帐号，则需要先&lt;a class="link" href="https://dash.cloudflare.com/sign-up" target="_blank" rel="noopener"
>注册一个 Cloudflare 帐号&lt;/a>，并绑定你的自定义域名。&lt;/p>
&lt;p>使用 Wrangler 前需要先 &lt;a class="link" href="https://dash.cloudflare.com/profile/api-tokens" target="_blank" rel="noopener"
>申请一个 API Token&lt;/a>。&lt;/p>
&lt;p>在 API Token 申请界面选择「Edit Cloudflare Workers」模板。根据「所予权限最小化」的原则，建议删除默认权限模板中不需要的「Account」和「User」权限。&lt;/p>
&lt;h3 id="初始化项目">初始化项目&lt;/h3>
&lt;p>在博客源码的根目录输入如下命令进行初始化&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># my-static-blog 是目录名称，你可以改成你喜欢的其他名字&lt;/span>
wrangler init --site my-static-blog
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wrangler 会依照 Cloudflare Workers Site 的模板在项目里新生成 workers-site 目录（默认）和 wrangler.toml 配置文件。我们需要手动对配置文件进行一些简单的自定义编辑。&lt;/p>
&lt;p>先使用文本编辑器打开 wrangler.toml 文件并依照你的需求进行修改&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="p">[&lt;/span>&lt;span class="nx">site&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nx">bucket&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;./public&amp;#34;&lt;/span> &lt;span class="c"># 生成的 dist 路径，Hexo 和 Hugo 为 public，「.」的意思是当前目录&lt;/span>
&lt;span class="nx">entry&lt;/span>&lt;span class="err">-&lt;/span>&lt;span class="nx">point&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;workers-site&amp;#34;&lt;/span> &lt;span class="c"># Cloudflare Workers Site 配置代码目录，默认 workers-site 目录&lt;/span>
&lt;span class="nx">account_id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c"># Cloudflare Account ID，可在 Cloudflare 仪表盘或个人主页的网址处负责&lt;/span>
&lt;span class="nx">workers_dev&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="c"># 是否启用 workers.dev 子域名，推荐不启用&lt;/span>
&lt;span class="nx">route&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;blog.linioi.com/*&amp;#34;&lt;/span> &lt;span class="c"># Workers 路由配置，请指向你想绑定的自定义域名&lt;/span>
&lt;span class="nx">zone_id&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> &lt;span class="c"># 域名的 Zone ID，可在 Cloudflare 仪表盘查看&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完成 wrangler.toml 的配置后，运行&lt;code>wrangler config&lt;/code>命令并依照命令行提示输入上一步获取的 API Token。&lt;/p>
&lt;h3 id="预览与部署">预览与部署&lt;/h3>
&lt;p>配置完成后，我们可以先输入如下命令预览一下部署效果。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wrangler preview --watch
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wrangler 会上传配置文件中设定的&lt;code>bucket&lt;/code>路径的文件至 Cloudflare Workers KV，浏览器会自动打开一个窗口预览。&lt;/p>
&lt;p>确认无误后，输入如下命令进行部署&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">wrangler publish
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="配置域名-dns-解析">配置域名 DNS 解析&lt;/h3>
&lt;p>上面的操作只是上传了博客文件，如果想要访客正常访问还需要进行「域名 DNS 解析」。&lt;/p>
&lt;ul>
&lt;li>如果你在前面修改配置文件时设置了「workers_dev=true」，则 Cloudflare 会自动分配给你一个三级域名，你可以在 DNS 解析设置处创建你的自定义域名的 CNAME 解析，指向 Cloudflare 分配的三级域名。&lt;/li>
&lt;li>如果你在前面修改配置文件时设置了「workers_dev=false」，则在 DNS 解析设置处创建你自定义域名的 A 解析，指向 IP &lt;code>2.2.2.2&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="大功告成">大功告成！&lt;/h3>
&lt;p>如果一切正常，现在你可以输入你的自定义域名即可访问
你的博客。如果你想要实现更多的玩法，可以自己编辑 workers-site 下的 index.js。&lt;/p>
&lt;h2 id="使用-github-action-实现持续集成">使用 GitHub Action 实现持续集成&lt;/h2>
&lt;p>如果你从未接触过 GitHub Action 自动部署，建议你先看一下我写的另一篇文章 &lt;a class="link" href="https://blog.linioi.com/archives/9/" target="_blank" rel="noopener"
>GitHub Action 实现 Hexo 博客持续集成&lt;/a>。&lt;/p>
&lt;p>与我写的另一篇文章略有不同，这里需要将文件推送到 Cloudflare Workers Site。我们可以 Cloudflare 官方 &lt;a class="link" href="https://github.com/cloudflare/wrangler-action" target="_blank" rel="noopener"
>wrangler-action&lt;/a> 轻松实现这一过程。&lt;/p>
&lt;p>wrangler-action 的使用同样需要设置 API Token。你可以选择使用上面生成的 API Token，也可以再申请一个 API Token，模板和权限与上面相同。&lt;/p>
&lt;p>然后再 GitHub 存放你博客源码的仓库添加 Secrets 变量 &lt;code>CF_WORKERS_TOKEN&lt;/code>，内容为你申请的 API Token。&lt;/p>
&lt;p>最后在 GitHub Action 配置文件末尾加上如下代码进行部署。（注意缩进）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy to Cloudflare Workers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloudflare/wrangler-action@1.3.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiToken&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.CF_WORKERS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="我的-github-action-配置文件仅供参考">我的 GitHub Action 配置文件（仅供参考）&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub Auto Builder For Blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># schedule:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># - cron: &amp;#39;0 21 * * *&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">blog-cicd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hexo build and deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">strategy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">matrix&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="m">12.&lt;/span>&lt;span class="l">x&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout codes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Use Node.js ${{ matrix.node-version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ matrix.node-version }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cache Node Dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cache&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/cache@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.npm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{runner.OS}}-npm-caches-${{ hashFiles(&amp;#39;package-lock.json&amp;#39;) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Clone themes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> npm install hexo-cli -g
&lt;/span>&lt;span class="sd"> npm install&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Generate files and gulp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hexo clean &amp;amp;&amp;amp; hexo generate &amp;amp;&amp;amp; gulp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy to Cloudflare Workers&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cloudflare/wrangler-action@1.3.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">apiToken&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.CF_WORKERS_TOKEN }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Minecraft 服务器搭建教程</title><link>https://blog.linioi.com/posts/minecraft-build/</link><pubDate>Fri, 30 Oct 2020 22:33:32 +0000</pubDate><guid>https://blog.linioi.com/posts/minecraft-build/</guid><description>&lt;blockquote>
&lt;ol>
&lt;li>教程使用的 Minecraft 服务端程序为&lt;strong>官方服务端程序&lt;/strong>，你可以根据自身需求下载第三方服务端程序以获取更好的插件支持。第三方服务端程序的运行方法可能与官方版不同。&lt;/li>
&lt;li>教程不考虑设备可能出现的如&lt;strong>性能或内存不足导致无法运行服务端程序&lt;/strong>、&lt;strong>因审查地区网络原因导致的设备无法下载服务端文件程序&lt;/strong>等问题。如出现以上问题请自己寻找解决方法。&lt;/li>
&lt;li>这里仅介绍 Linux 与 Android 的搭建方法。不介绍 Windows 是因为 Windows 搭建太简单了，而且网上教程实在有点多；&lt;del>不介绍 macOS 是因为买不起。&lt;/del>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h2 id="linux-搭建教程">Linux 搭建教程&lt;/h2>
&lt;blockquote>
&lt;p>本节无特殊说明的话，所有 「#」&lt;strong>均代表注释&lt;/strong>，所有可能需要 root 权限执行的命令&lt;strong>均会在命令最前面加上 「sudo」&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="linux-设备获取">Linux 设备获取&lt;/h3>
&lt;p>你可以在家用电脑上安装 Linux，或者购置一台 Linux 服务器。无论如何，建议服务端设备内存大于 3G 且带宽大于 5M 以确保服务器连接稳定（如果联机人数少则相应配置可以低一点，具体配置需求建议自行测试）。&lt;/p>
&lt;p>如需购买服务器，建议购买按量计费的服务器以减少相应费用。&lt;strong>大多数情况下，带宽可能是你首先应该考虑的方面&lt;/strong>。因此，请尽可能&lt;strong>避开&lt;/strong>那些 1Mbps 带宽的「高性能服务器」，如果你不慎已入手一台，请尽早退款……&lt;/p>
&lt;p>以下是我个人用过的几个性价比较高的云服务厂商，个人评价仅供参考（毕竟我不是玩云主机的）。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">厂商&lt;/th>
&lt;th style="text-align:center">优缺点&lt;/th>
&lt;th style="text-align:center">评价&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://cloud.google.com/" target="_blank" rel="noopener"
>谷歌云&lt;/a>&lt;/td>
&lt;td style="text-align:center">优点：高速稳定，新用户有 $300 美元赠金（不过现在只有 90 天了）&lt;!-- raw HTML omitted -->缺点：有点贵…&lt;/td>
&lt;td style="text-align:center">土豪和白嫖怪的不二之选&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://www.vultr.com/" target="_blank" rel="noopener"
>Vultr&lt;/a>&lt;/td>
&lt;td style="text-align:center">优点：便宜，价格亲民，支持支付宝支付。&lt;!-- raw HTML omitted -->缺点：相同价位性能偏低（貌似买它的人也不是奔着性能去的）&lt;/td>
&lt;td style="text-align:center">看网上多少 Vultr 的邀请链接你就懂了&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://cn.aliyun.com/" target="_blank" rel="noopener"
>阿里云&lt;/a>&lt;/td>
&lt;td style="text-align:center">优点：经济实惠，按量付费价格可以接受&lt;!-- raw HTML omitted -->缺点：国内厂商，使用需要实名…&lt;!-- raw HTML omitted -->（你为什么不用&lt;a class="link" href="https://aliyun.com/" target="_blank" rel="noopener"
>阿里云国际版&lt;/a>呢）&lt;/td>
&lt;td style="text-align:center">曾经的良心云（&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;a class="link" href="https://cloud.tencent.com/" target="_blank" rel="noopener"
>腾讯云&lt;/a>&lt;/td>
&lt;td style="text-align:center">优点：经济实惠，按量付费价格可以接受，最近优惠力度蛮大，大有做一个「良心云」的态度。优惠券：&lt;a class="link" href="https://curl.qcloud.com/SplOD4rQ" target="_blank" rel="noopener"
>链接（含 AFF）&lt;/a>。&lt;!-- raw HTML omitted -->缺点：国内厂商，使用需要实名…&lt;/td>
&lt;td style="text-align:center">是不是良心云还需要观察…&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="ssh-连接服务器家用设备请跳过">SSH 连接服务器(家用设备请跳过)&lt;/h3>
&lt;blockquote>
&lt;p>SSH（Secure Shell）是一种加密的网络传输协议，可在不安全的网络中为网络服务提供安全的传输环境。SSH 通过在网络中创建安全隧道来实现 SSH 客户端与服务器之间的连接。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>通过 SSH 连接你的服务器需要你的服务器已启用 SSH 服务并放行 SSH 服务端口(默认为 22)。&lt;/p>
&lt;/blockquote>
&lt;h4 id="windowsmacoslinux-设备-ssh-连接服务器">Windows/macOS/Linux 设备 SSH 连接服务器&lt;/h4>
&lt;p>请根据你的系统类型打开终端 。Windows 为 cmd，同时按下 Win+R 后输入 cmd 并回车即可进入。&lt;/p>
&lt;blockquote>
&lt;p>请确保你系统已安装 OpenSSH。目前已知 Windows 已于 2018 年集成 OpenSSH，macOS 已集成 OpenSSH，部分 Linux 发行版未集成 OpenSSH。&lt;/p>
&lt;p>对于未安装 OpenSSH 的系统，请手动安装 &lt;code>openssh&lt;/code> 软件包。&lt;/p>
&lt;/blockquote>
&lt;p>在确认已安装 OpenSSH 后，输入如下命令连接你的服务器&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ssh -p &amp;lt;port&amp;gt; &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt;
&lt;span class="c1">#&amp;lt;port&amp;gt; 为 SSH 进程端口号，如默认端口号 22 可以省略。&lt;/span>
&lt;span class="c1">#&amp;lt;username&amp;gt; 为服务器用户名，&amp;lt;ip&amp;gt; 为服务器 IP 地址&lt;/span>
&lt;span class="c1">#以下是示例连接命令&lt;/span>
&lt;span class="c1">#ssh root@127.0.0.1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入命令后会要求你输入服务器密码，请输入你设置的服务器密码。&lt;strong>建议使用 SSH 密匙登录服务器并禁用密码登录以保证服务器安全。&lt;/strong>&lt;/p>
&lt;h4 id="android-设备-ssh-连接服务器">Android 设备 SSH 连接服务器&lt;/h4>
&lt;p>请参照 &lt;a class="link" href="https://blog.linioi.com/posts/minecraft-build/#%E8%BF%9E%E6%8E%A5-linux-deploy-%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener"
>Android 搭建教程-连接 Linux Deploy 容器&lt;/a>。&lt;/p>
&lt;h3 id="设置-jre">设置 JRE&lt;/h3>
&lt;p>下面是几种常见的 Linux 发行版的安装命令&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># Debian/Ubuntu&lt;/span>
sudo apt-get install -y default-jre-headless
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#CentOS 8.0+&lt;/span>
sudo dnf install -y java-1.8.0-openjdk
&lt;span class="c1">#对于 CentOS 8.0 以下的服务器，请输入下面的命令&lt;/span>
&lt;span class="c1">#sudo yum install -y java-1.8.0-openjdk&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#Arch Linux&lt;/span>
sudo pacman -S --noconfirm jdk8-openjdk
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="下载-minecraft-服务端">下载 Minecraft 服务端&lt;/h3>
&lt;blockquote>
&lt;p>下载之前，你首先要了解 Minecraft 客户端 &lt;a class="link" href="https://minecraft-zh.gamepedia.com/Java%E7%89%88" target="_blank" rel="noopener"
>Java 版&lt;/a>和&lt;a class="link" href="https://minecraft-zh.gamepedia.com/%E5%9F%BA%E5%B2%A9%E7%89%88" target="_blank" rel="noopener"
>基岩版&lt;/a>的区别。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>建议先建立一个专门的文件夹存放服务器数据。&lt;/strong>
示例命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir &lt;span class="nv">$HOME&lt;/span>/minecraft
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据你的客户端平台，从以下两个链接中选择一个链接下载。&lt;/p>
&lt;p>Java 版请点击 &lt;a href="https://www.minecraft.net/en-us/download/server">https://www.minecraft.net/en-us/download/server&lt;/a>&lt;/p>
&lt;p>基岩版请点击 &lt;a href="https://www.minecraft.net/en-us/download/server/bedrock">https://www.minecraft.net/en-us/download/server/bedrock&lt;/a>&lt;/p>
&lt;p>示例下载命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 如果创建了 minecraft 文件夹则先转到 minecraft 文件夹&lt;/span>
&lt;span class="c1"># cd $HOME/minecraft&lt;/span>
wget https://launcher.mojang.com/v1/objects/f02f4473dbf152c23d7d484952121db0b36698cb/server.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意，请务必将以上链接修改为&lt;strong>你设备平台适用的服务端程序下载链接&lt;/strong>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="运行服务器端">运行服务器端&lt;/h3>
&lt;p>确认文件已下载完成后，根据自己服务器端版本输入以下命令&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">java -Xmx&lt;span class="o">[&lt;/span>初始启动分配内存&lt;span class="o">]&lt;/span> -Xms&lt;span class="o">[&lt;/span>最大分配内存&lt;span class="o">]&lt;/span> -jar &lt;span class="o">[&lt;/span>jar 包所在路径&lt;span class="o">]&lt;/span> nogui
&lt;span class="c1"># 如果要使用其图形用户界面启动服务器端，则可以省略「 nogui」部分。&lt;/span>
&lt;span class="c1"># 运行示例命令&lt;/span>
&lt;span class="c1">#java -Xmx1024M -Xms1024M -jar minecraft_server.1.16.3.jar nogui&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 基岩版下载的默认是 zip 文件，需要解压后使用&lt;/span>
unzip bedrock-server*.zip &lt;span class="c1">#解压下载的 zip 文件&lt;/span>
&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>. ./bedrock_server
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Java 版服务端程序在第一次运行后会生成初始配置文件后自动中止。你可以用任意 Linux 文本编辑器（如 VIM、nano）打开服务器端目录下的&lt;code>eula.txt&lt;/code>，然后将 &lt;code>eula=false&lt;/code> 改为 &lt;code>eula=true&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>EULA 是 &lt;a class="link" href="https://account.mojang.com/documents/minecraft_eula" target="_blank" rel="noopener"
>Minecraft 最终用户许可协议&lt;/a>，修改为 true 即代表你同意许可协议。&lt;/p>
&lt;p>你当然可以不同意，不过与之对应的是服务端程序无法运行。&lt;/p>
&lt;/blockquote>
&lt;p>输入如下命令再次启动服务器端&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 示例命令&lt;/span>
java -Xmx1024M -Xms1024M -jar minecraft_server.1.16.3.jar nogui
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 示例命令&lt;/span>
&lt;span class="nv">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>. ./bedrock_server
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如需停止服务端，请直接输入&lt;code>/stop&lt;/code>或&lt;code>Ctrl+C&lt;/code>。&lt;/p>
&lt;p>官方服务器端配置中默认开启了正版验证，意在禁止盗版客户端连接服务器端，但是在实际操作中可能会出现正版用户也无法连接的情况。如果你在确认配置无误后不能连接服务器，请将 &lt;code>server.properties&lt;/code> 中的 &lt;code>online=true&lt;/code> 改为 &lt;code>online=false&lt;/code>。&lt;/p>
&lt;blockquote>
&lt;p>如果你使用的是诸如谷歌云、微软云、阿里云这样 NAT 服务器，你可能需要进行内网 IP 端口转发才能正常连接服务器。&lt;/p>
&lt;/blockquote>
&lt;p>你可以点击这个&lt;a class="link" href="https://minecraft-zh.gamepedia.com/Server.properties" target="_blank" rel="noopener"
>链接&lt;/a>以了解有关 &lt;code>server.properties&lt;/code> 的配置。&lt;/p>
&lt;p>为服务器端会话稳定，建议安装 Screen 并在 Screen 会话中运行服务端程序，这是远优于 nohup 的后台运行解决方案。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#Debian/Ubuntu&lt;/span>
sudo apt-get install -y screen
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#CentOS 8.0+&lt;/span>
sudo dnf install -y screen
&lt;span class="c1">#CentOS 8.0 以下请输入以下命令&lt;/span>
&lt;span class="c1">#sudo yum install -y screen&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#Arch Linux&lt;/span>
sudo pacman -S --noconfirm screen
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入如下命令创建一个 screen 会话&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">screen -S mc
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Screen 其他基础命令：&lt;/p>
&lt;ul>
&lt;li>创建会话：&lt;code>screen -S &amp;lt;name&amp;gt;&lt;/code>&lt;/li>
&lt;li>列出已创建对话：&lt;code>screen -ls&lt;/code>&lt;/li>
&lt;li>转到某一创建对话：&lt;code>screen -r &amp;lt;name/id&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>更多命令可以查看该&lt;a class="link" href="https://wiki.archlinux.org/index.php/GNU_Screen_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener"
>链接&lt;/a>。&lt;/p>
&lt;h2 id="android-搭建教程">Android 搭建教程&lt;/h2>
&lt;blockquote>
&lt;p>Android 搭建 Minecraft 服务器端的思路即&lt;strong>先在 Android 上搭建 Linux 环境，然后再在 Linux 环境中运行服务端程序&lt;/strong>。&lt;/p>
&lt;p>因此，Android 搭建教程与 Linux 搭建教程高度相似。为避免重复，本节只叙述如何在 Android 上搭建一个基本可用 Linux 环境。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>注意，Android 端搭建 Linux 环境需要 Android 手机已获取 root 权限。&lt;/p>
&lt;/blockquote>
&lt;h3 id="配置-linux-deploy">配置 Linux Deploy&lt;/h3>
&lt;p>请从 Google Play Store 下载并安装 &lt;a class="link" href="https://play.google.com/store/apps/details?id=ru.meefik.linuxdeploy" target="_blank" rel="noopener"
>Linux Deploy&lt;/a> 。&lt;/p>
&lt;blockquote>
&lt;p>你可以尝试在其他渠道下载 Linux Deploy，但请尽可能确保 Linux Deploy 版本为最新版且为官方正版。&lt;/p>
&lt;/blockquote>
&lt;p>安装后打开 Linux Deploy，点击右下角的配置按钮，根据你的实际需求修改你的配置信息。&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>目前 Linux Deploy 只有 Debian 系 Linux 发行版可以基本正常使用，因此在配置中建议选择 Debian 系发行版以减少其他不必要的麻烦。&lt;/li>
&lt;li>对于国内用户，建议将配置中的「源地址」修改为国内镜像源。&lt;/li>
&lt;li>为避免异常，请将默认用户名「android」修改为 「root」。&lt;/li>
&lt;li>请在「本地化」配置中修改配置为「zh_CN.UTF-8」。&lt;/li>
&lt;li>请务必勾选 SSH 配置中的「启用 SSH 服务器」。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>在完成你的自定义配置后，点击右上角菜单后选择「安装」，如果出现 root 权限请求，请「允许」。&lt;/p>
&lt;p>安装结束后，请先点击底部的「停止」停止容器，然后点击底部的「启动」启动容器。&lt;/p>
&lt;h3 id="连接-linux-deploy-容器">连接 Linux Deploy 容器&lt;/h3>
&lt;p>Linux Deploy 仅提供容器而不提供可操作的终端(你能接受浏览器作为终端的话当我没说)，这意味着我们需要自己再下载一个 SSH 客户端以连接容器。&lt;/p>
&lt;h4 id="termux">Termux&lt;/h4>
&lt;p>这里推荐使用 &lt;a class="link" href="https://play.google.com/store/apps/details?id=com.termux" target="_blank" rel="noopener"
>Termux&lt;/a> 作为 SSH 客户端。&lt;/p>
&lt;p>Termux 作为一个强大的终端仿真器，集成了 Linux 环境，可自定义性高，对于有一定 Linux 使用经验的人来说非常方便。&lt;/p>
&lt;blockquote>
&lt;p>Termux 默认没有安装 &lt;code>openssh&lt;/code>，需要输入&lt;code>pkg in -y openssh&lt;/code>手动安装。&lt;/p>
&lt;p>对于审查地区，Termux 默认源的连接速度可能非常慢，可以输入如下命令更换清华源以提速&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sed -i &lt;span class="s1">&amp;#39;s@^\(deb.*stable main\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/termux-packages-24 stable main@&amp;#39;&lt;/span> &lt;span class="nv">$PREFIX&lt;/span>/etc/apt/sources.list
sed -i &lt;span class="s1">&amp;#39;s@^\(deb.*games stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/game-packages-24 games stable@&amp;#39;&lt;/span> &lt;span class="nv">$PREFIX&lt;/span>/etc/apt/sources.list.d/game.list
sed -i &lt;span class="s1">&amp;#39;s@^\(deb.*science stable\)$@#\1\ndeb https://mirrors.tuna.tsinghua.edu.cn/termux/science-packages-24 science stable@&amp;#39;&lt;/span> &lt;span class="nv">$PREFIX&lt;/span>/etc/apt/sources.list.d/science.list
&lt;/code>&lt;/pre>&lt;/div>&lt;/blockquote>
&lt;p>安装完 OpenSSH 后，输入以下命令连接 Linux Deploy 容器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">ssh &amp;lt;username&amp;gt;@&amp;lt;ip&amp;gt;
&lt;span class="c1">#示例&lt;/span>
&lt;span class="c1">#ssh root@127.0.0.1&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入该命令后会需要你输入密码，请输入你在 Linux Deploy 配置时设置的密码，密码在输入过程中无回显。&lt;/p>
&lt;h4 id="juice-ssh">Juice SSH&lt;/h4>
&lt;p>如果你终端使用经验不足，也可以选择小白友好的 &lt;a class="link" href="https://play.google.com/store/apps/details?id=com.sonelli.juicessh" target="_blank" rel="noopener"
>Juice SSH&lt;/a>。&lt;/p>
&lt;p>鉴于 Juice SSH 界面简洁易懂，这里不做过多描述。你只需输入在 Linux Deploy 配置时设置的 「用户名」和「密码」及容器的「 IP 地址」。如果是本机连接容器，IP 地址输入 「127.0.0.1」即可；如果是区域网内连接则输入安装容器的设备的「区域网 IP 地址」，区域网 IP 地址可以在手机「设置」查看。&lt;/p>
&lt;h3 id="安装和配置-minecraft-服务端">安装和配置 Minecraft 服务端&lt;/h3>
&lt;p>请参照 &lt;a class="link" href="https:///blog.linioi.com/posts/minecraft-build/#linux-%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B" target="_blank" rel="noopener"
>Linux 搭建教程&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>注意，官方基岩版服务端程序可能无法在 Linux Deploy 容器中运行，建议改用第三方服务端程序，如 &lt;a class="link" href="https://github.com/CloudburstMC/Nukkit" target="_blank" rel="noopener"
>Nukkit&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="连接服务器端">连接服务器端&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>如果你希望在同一区域网下与其他玩家联机，则只需要处于同一区域网连接下即可。&lt;/li>
&lt;li>如果你是在家用设备上搭建 Minecraft 服务器（即无公网 IP），则其他玩家无法在非同一区域网下连接你的 Minecraft 服务器。你可以通过 &lt;a class="link" href="https://zh.m.wikipedia.org/zh-hans/NAT%E7%A9%BF%E9%80%8F" target="_blank" rel="noopener"
>内网穿透&lt;/a> 以实现公网环境连接内网设备。&lt;strong>请注意相关安全防护以避免因内网穿透造成内网环境被攻击&lt;/strong>。&lt;strong>Minecraft 基岩版内网穿透协议为 UDP 且需要本地端口与远程端口一致才可以正常连接&lt;/strong>。&lt;/li>
&lt;li>公网设备请注意保护 IP 地址，毕竟某些&lt;strong>闲人&lt;/strong>还是很多的。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果是区域网内搭建的服务端，则在 IP 地址中填入服务端「区域网 IP 地址」，公网设备与内网穿透设备填写设备的公网 IP。端口填你在服务端配置文件中设置的端口（Java 版默认 25565，基岩版默认 19132）。&lt;/p>
&lt;blockquote>
&lt;p>请注意检查你服务器防火墙设置中是否放行相应端口，未放行相应端口则客户端无法连接服务器端。&lt;/p>
&lt;p>以下给出参考的放行规则，具体操作方式和配置请根据你自己的情况选择。&lt;/p>
&lt;ul>
&lt;li>名称：&lt;code>minecraft-rule&lt;/code>&lt;/li>
&lt;li>目标标记：&lt;code>minecraft-server&lt;/code>&lt;/li>
&lt;li>来源过滤条件：IP 地址范围&lt;/li>
&lt;li>来源 IP 地址范围：&lt;code>0.0.0.0/0&lt;/code>&lt;/li>
&lt;li>协议或端口：Java 版选择 TCP，基岩版选择 UDP，然后在提供的字段中输入你配置文件中的端口号，Java 版默认 25565，基岩版默认 19132。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="end">End&lt;/h2>
&lt;p>如果一切正常的话，你已经成功搭建并和你的小伙伴们一起进入游戏了，想不出什么话总结，只能祝你们玩得开心了😂。&lt;/p></description></item><item><title>Android 一键安装配置 Aria2</title><link>https://blog.linioi.com/posts/aria2-for-termux/</link><pubDate>Sat, 17 Oct 2020 22:19:36 +0000</pubDate><guid>https://blog.linioi.com/posts/aria2-for-termux/</guid><description>&lt;h2 id="aria2-是什么">Aria2 是什么？&lt;/h2>
&lt;blockquote>
&lt;p>Aria2 是一款自由、跨平台命令行界面的下载管理器，该软件根据 GPLv2 许可证进行分发。支持的下载协议有：HTTP、HTTPS、FTP、Bittorrent 和 Metalink。&lt;/p>
&lt;p>&amp;ndash; 摘自 &lt;a class="link" href="https://zh.wikipedia.org/zh-hans/Aria2?wprov=sfla1" target="_blank" rel="noopener"
>维基百科&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如上所述，不同于其他下载器（如 IDM+）或闭源或付费，Aria2 在支持多种下载协议的基础上保持开源和免费，是目前最强大的下载器之一。&lt;/p>
&lt;h2 id="为什么会有这篇文章">为什么会有这篇文章&lt;/h2>
&lt;p>Aria2 固然强大，但是它的配置和使用并不像其他下载器全 GUI 化，这对某些新手来说非常不友好。即使已经有一众大佬出手降低 Aria2 的使用门槛（如 &lt;a class="link" href="https://github.com/mayswind/AriaNg" target="_blank" rel="noopener"
>AriaNg&lt;/a> 这样较完善和便利的 GUI 管理界面），但是配置 Aria2 依然足以劝退某些小白。&lt;/p>
&lt;p>为此，又有一众大佬制作 Aria2 Docker 和 Aria2 一键管理脚本，使得即便是小白也可以轻松完成 Aria2 的配置安装。&lt;/p>
&lt;p>遗憾的是，可能是因为大部分 Aria2 用户集中在 Linux 平台，这些 Aria2 一键管理脚本也一直仅支持 Linux 平台。为此，我基于 P3TERX 的 &lt;a class="link" href="https://github.com/P3TERX/aria2.sh" target="_blank" rel="noopener"
>aria2.sh&lt;/a>，制作了该一键管理脚本的 Termux 移植版 &lt;a class="link" href="https://github.com/RimuruW/Aria2-Termux" target="_blank" rel="noopener"
>Aria2-Termux&lt;/a>，便于 Android 用户一键安装、配置和管理 Aria2。&lt;/p>
&lt;p>但是考虑到 &lt;a class="link" href="https://termux.com/" target="_blank" rel="noopener"
>Termux&lt;/a> 在普通 Android 用户中的使用普及度，我想一篇较为详细的说明性文章还是有必要的，于是便自己动手写了这样一篇简略的文章，暂作为 Aria2-Termux 的使用文档。&lt;/p>
&lt;p>下面，让我们开始…&lt;/p>
&lt;h2 id="下载和安装-termux">下载和安装 Termux&lt;/h2>
&lt;p>&lt;strong>目前仅推荐以下两个下载渠道下载 Termux&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Google Play Store： &lt;a href="https://play.google.com/store/apps/details?id=com.termux">https://play.google.com/store/apps/details?id=com.termux&lt;/a>&lt;/li>
&lt;li>F-Droid：https://f-droid.org/packages/com.termux/&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>请勿交叉安装和更新这两个渠道的 Termux&lt;/strong>！即，如果你是在 Google Play Store 下载和安装 Termux，&lt;strong>请勿在 F-Droid 下载安装包并覆盖安装&lt;/strong>。&lt;/p>
&lt;p>安装后打开 Termux，你会看到如大致下图所示的终端界面&lt;/p>
&lt;p>&lt;figure style="flex-grow: 77; flex-basis: 186px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/4b9fd56fc248e0308f60c1dc4db74b87.jpg" data-size="1080x1390">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/4b9fd56fc248e0308f60c1dc4db74b87.jpg"
srcset="https://blog.linioi.com/posts/aria2-for-termux/4b9fd56fc248e0308f60c1dc4db74b87_hubf0545f270cb54537e367a96641fe598_45258_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/aria2-for-termux/4b9fd56fc248e0308f60c1dc4db74b87_hubf0545f270cb54537e367a96641fe598_45258_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="1390"
loading="lazy"
alt="Termux 界面">
&lt;/a>
&lt;figcaption>Termux 界面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>你的界面和我的截图会有些许不同，&lt;strong>请不要惊慌&lt;/strong>，这是因为我已经对 Termux 进行了一些自定义。&lt;del>长得不像是正常现象&lt;/del>&lt;/li>
&lt;li>请不要害怕终端的黑屏白字，实际上你需要操作的东西&lt;strong>非常简单&lt;/strong>，大部分终端里你看不懂的输出，&lt;strong>都是你不需要关心的细节&lt;/strong>。&lt;/li>
&lt;li>第一次打开可能会要求进行初始化，请耐心等待初始化完成。&lt;/li>
&lt;/ul>
&lt;h2 id="下载和启动脚本">下载和启动脚本&lt;/h2>
&lt;p>下面的步骤极为简单，你只要复制和粘贴下面我列出的命令并在 Termux 中输入并回车，不需要关心其他的任何细节。&lt;del>如果出现了报错则另说&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">bash -c &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>curl -L https://raw.githubusercontent.com/RimuruW/Aria2-Termux/master/aria2.sh&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>输入命令后 Termux 会自动下载脚本，请耐心等待。脚本下载完成后，Termux 会自动启动脚本。&lt;/li>
&lt;/ul>
&lt;p>脚本启动成功后如下图&lt;/p>
&lt;p>&lt;figure style="flex-grow: 131; flex-basis: 316px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/f51fbae04df03b5a4ee1f0e1a1d87f89.jpg" data-size="1073x814">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/f51fbae04df03b5a4ee1f0e1a1d87f89.jpg"
srcset="https://blog.linioi.com/posts/aria2-for-termux/f51fbae04df03b5a4ee1f0e1a1d87f89_hub014e4fdc2d696f23c153731f5275b9b_130933_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/aria2-for-termux/f51fbae04df03b5a4ee1f0e1a1d87f89_hub014e4fdc2d696f23c153731f5275b9b_130933_1024x0_resize_q75_box.jpg 1024w"
width="1073"
height="814"
loading="lazy"
alt="脚本启动后界面">
&lt;/a>
&lt;figcaption>脚本启动后界面&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>后续启动脚本，如果你没有手动改变文件位置，则你只需要输入&lt;code>bash aria2.sh&lt;/code>即可启动脚本。&lt;/p>
&lt;h2 id="安装-aria2">安装 Aria2&lt;/h2>
&lt;p>脚本启动后，请输入「1」并回车，脚本会自动下载和配置安装 Aria2。&lt;/p>
&lt;ul>
&lt;li>输入命令后脚本可能会询问你是否更换 Termux 镜像源，&lt;strong>如果你是国内用户，请选择输入「y」确认更换&lt;/strong>。&lt;/li>
&lt;li>Aria2 的下载和安装需要一定时间，请耐心等待并保证 Termux 进程存活。&lt;/li>
&lt;/ul>
&lt;p>安装完成后脚本会自动启动 Aria2，安装并启动成功后界面如下图&lt;/p>
&lt;p>&lt;figure style="flex-grow: 109; flex-basis: 263px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/2987f46b9989121d49fde4389adfef06.jpg" data-size="1080x984">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/2987f46b9989121d49fde4389adfef06.jpg"
srcset="https://blog.linioi.com/posts/aria2-for-termux/2987f46b9989121d49fde4389adfef06_hubeff830a76e125a50838be37410b6f23_196302_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/aria2-for-termux/2987f46b9989121d49fde4389adfef06_hubeff830a76e125a50838be37410b6f23_196302_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="984"
loading="lazy"
alt="Aria2 安装和启动成功图">
&lt;/a>
&lt;figcaption>Aria2 安装和启动成功图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>注意，为保证 Aria2 后台存活，脚本在启动 Aria2 会自动开启&lt;a class="link" href="https://developer.android.com/training/scheduling/wakelock?hl=zh_cn" target="_blank" rel="noopener"
>唤醒锁&lt;/a>，这意味你退出 Termux 时需要手动在状态栏点击「Release wakerlock」后才能真正退出。
&lt;figure style="flex-grow: 263; flex-basis: 632px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/c8f5978d2e0dad424b82bcdca8934e04.png" data-size="1080x410">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/c8f5978d2e0dad424b82bcdca8934e04.png"
srcset="https://blog.linioi.com/posts/aria2-for-termux/c8f5978d2e0dad424b82bcdca8934e04_hub2d913ed3da81b2c3b0481b906365d25_44396_480x0_resize_box_2.png 480w, https://blog.linioi.com/posts/aria2-for-termux/c8f5978d2e0dad424b82bcdca8934e04_hub2d913ed3da81b2c3b0481b906365d25_44396_1024x0_resize_box_2.png 1024w"
width="1080"
height="410"
loading="lazy"
alt="Release wakelock">
&lt;/a>
&lt;figcaption>Release wakelock&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>此时你已经完成了 Aria2 安装所需的基本步骤，你的手机上已经成功配置一个可用的 Aria2。&lt;/p>
&lt;h2 id="使用-ariang">使用 AriaNg&lt;/h2>
&lt;p>如上文所说，Aria2 是一个命令行下载工具，命令行的操作方式对于大多数用户来说还是极为不友好。这里我们借助 AriaNg 进行 Aria2 的图形化管理和操作。&lt;/p>
&lt;p>在脚本起始界面输入「7」查看 Aria2 配置信息如下图&lt;/p>
&lt;p>&lt;figure style="flex-grow: 207; flex-basis: 497px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/b5ed855aea5dcb1ae103be819b723fc3.jpg" data-size="1080x521">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/b5ed855aea5dcb1ae103be819b723fc3.jpg"
srcset="https://blog.linioi.com/posts/aria2-for-termux/b5ed855aea5dcb1ae103be819b723fc3_hu642dc4ae64e2fefbea4fc0008fa92649_169879_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/aria2-for-termux/b5ed855aea5dcb1ae103be819b723fc3_hu642dc4ae64e2fefbea4fc0008fa92649_169879_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="521"
loading="lazy"
alt="Aria2 配置信息">
&lt;/a>
&lt;figcaption>Aria2 配置信息&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;blockquote>
&lt;p>对于大部分普通用户，你只需要复制下面 &lt;code>AriaNg&lt;/code> 后的链接并在浏览器打开即可进入 AriaNg，其他细节属于你无需关心的内容&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>对于已经对 Aria2 有所了解的用户，请明确以下内容&lt;/p>
&lt;ul>
&lt;li>大多数情况下，请将 Aria2 的地址设为 127.0.0.1 而非内网 IP，已确保连接在 Aria2 每次启动后都始终可用&lt;/li>
&lt;li>如果你需要在其他同区域网设备上连接该设备，Aria2 地址请设为配置信息中的「内网 IP」&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>进入 AriaNg 并连接成功后界面如图所示&lt;/p>
&lt;p>&lt;figure style="flex-grow: 46; flex-basis: 110px">
&lt;a href="https://blog.linioi.com/posts/aria2-for-termux/945faa0bd9be7d37683142a2814d3006.jpg" data-size="1080x2340">&lt;img src="https://blog.linioi.com/posts/aria2-for-termux/945faa0bd9be7d37683142a2814d3006.jpg"
srcset="https://blog.linioi.com/posts/aria2-for-termux/945faa0bd9be7d37683142a2814d3006_hu813a54d6cf66b87b4dd078cc79959334_103266_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/aria2-for-termux/945faa0bd9be7d37683142a2814d3006_hu813a54d6cf66b87b4dd078cc79959334_103266_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="2340"
loading="lazy"
alt="AriaNg 连接成功">
&lt;/a>
&lt;figcaption>AriaNg 连接成功&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>点击左上角的「新建」，输入下载链接后点击右上角「立即下载」即可以创建一个下载任务，下载的文件默认保存在 Download 文件夹中。&lt;/p>
&lt;hr>
&lt;p>使用文档到此结束，其他细节请参照脚本内说明（我觉得脚本内说明已经很详细了…）。&lt;/p>
&lt;p>如果对 Aria2 其他细节感兴趣，请自行参阅网上文档。&lt;/p>
&lt;p>如果这个项目对你有帮助，请 Star 以让更多人发现这个项目并受益，你的支持是我持续维护和开发的动力！&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/RimuruW/Aria2-Termux" target="_blank" rel="noopener"
>&lt;img src="https://github-readme-stats.linioi.com/api/pin?username=RimuruW&amp;amp;repo=Aria2-Termux" alt="Aria2-Termux" />&lt;/a>&lt;/p></description></item><item><title>浅谈手机通知推送</title><link>https://blog.linioi.com/posts/3/</link><pubDate>Thu, 01 Oct 2020 15:49:01 +0000</pubDate><guid>https://blog.linioi.com/posts/3/</guid><description>&lt;p>场景如下&lt;/p>
&lt;p>QQ/WeChat:&lt;/p>
&lt;ul>
&lt;li>A：我给你发消息你怎么半天没回？&lt;/li>
&lt;li>我：有事请 Telegram 联系，QQ/WeChat 随缘回复。&lt;/li>
&lt;li>A：这跟 QQ/WeChat 私聊有什么区别？为什么要这么麻烦？&lt;/li>
&lt;li>我：（此处省略 1000+ 字）&lt;/li>
&lt;/ul>
&lt;p>忽然我意识到了，其实大部分人对自己的 IM 软件一无所知，那么一篇有必要的科普文章就应该开始动手了。Telegram 的优点当然不仅在于通知推送，但是我想从通知推送说起……&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="声明">声明&lt;/h2>
&lt;ul>
&lt;li>限于篇幅，这篇文章并不会太多牵扯到手机通知推送的&lt;em>技术细节&lt;/em>。（毕竟主要是科普嘛~~）&lt;/li>
&lt;li>文章内容仅代表作者个人认知和观点，欢迎发表你的观点。&lt;/li>
&lt;li>文章内容限于作者能力可能存在某些错误，欢迎指出。&lt;/li>
&lt;/ul>
&lt;h2 id="ios-的通知推送">iOS 的通知推送&lt;/h2>
&lt;p>说起手机推送，不得不先提的是 iOS 的通知推送。&lt;/p>
&lt;p>即使你是一个数码小白，至少也听说过 iOS 通知的及时。&lt;del>当然，你可能看到的是吐槽 Android 通知多么垃圾，这其实是反衬 iOS 通知的强大。&lt;/del>&lt;/p>
&lt;p>这里简单介绍一下 iOS 通知推送机制。&lt;/p>
&lt;h3 id="本地推送">本地推送&lt;/h3>
&lt;p>本地推送其实就是 App 的定时推送。App 注册本地推送通知，指定一个时间并在该时间推送通知。&lt;/p>
&lt;h3 id="远程推送">远程推送&lt;/h3>
&lt;blockquote>
&lt;p>前提已满足条件：App 已注册远程推送通知。&lt;/p>
&lt;/blockquote>
&lt;p>Apple 开发者文档给出的推送过程示意图如下：
&lt;figure style="flex-grow: 338; flex-basis: 811px">
&lt;a href="https://blog.linioi.com/posts/3/f70fd156eda99becc550aa1e97bc87d6.png" data-size="1329x393">&lt;img src="https://blog.linioi.com/posts/3/f70fd156eda99becc550aa1e97bc87d6.png"
srcset="https://blog.linioi.com/posts/3/f70fd156eda99becc550aa1e97bc87d6_hu30575964ae671bcf8a4d96116d3f4a35_29820_480x0_resize_box_2.png 480w, https://blog.linioi.com/posts/3/f70fd156eda99becc550aa1e97bc87d6_hu30575964ae671bcf8a4d96116d3f4a35_29820_1024x0_resize_box_2.png 1024w"
width="1329"
height="393"
loading="lazy"
alt="通知推送示意图">
&lt;/a>
&lt;figcaption>通知推送示意图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>用文字描述过程如下：&lt;/p>
&lt;ol>
&lt;li>软件需要推送通知&lt;/li>
&lt;li>软件服务器将通知推送到 Apple Push Notification service（APNs）&lt;/li>
&lt;li>Apple Push Notification service（APNs） 将通知转发给用户。&lt;/li>
&lt;/ol>
&lt;p>可以看到，这全过程都是由 Apple Push Notification service（APNs）完成通知的接收与发送，并且最后的通知推送也是由系统进行统一推送。这一过程中，设备上的软件&lt;strong>本身没有参与&lt;/strong>。&lt;/p>
&lt;p>也就是说，&lt;strong>iOS 通知推送并不需要软件的后台运行&lt;/strong>。完全由 Apple Push Notification service（APNs）和 系统 完成通知推送的方式实现了最大化的通知效率。&lt;del>别羡慕了，羡慕就去买台果子吧。&lt;/del>&lt;/p>
&lt;h2 id="android-的通知推送">Android 的通知推送&lt;/h2>
&lt;p>这里首先为被风评被害多年的 404 小厂的操作系统辩解一番。人家一个官网都常年打不开的小公司，怎么可能实现像 Apple Push Notification service 这样大体量的通知推送服务。（雾）&lt;/p>
&lt;p>如你所见，由于某些众所周知的原因，Android 的系统推送通知一直处于一个尴尬的情况 &lt;del>(指国内)&lt;/del> 。于是在长期以来的 Android 发展中，各大公司群策群力，纷纷贡献自己的金点子银点子，携手解决这一难题。&lt;/p>
&lt;h3 id="google-的-fcm">Google 的 FCM&lt;/h3>
&lt;p>严格意义上来说，某 404 公司对于自己操作系统的推送服务还是有进行一番 &lt;del>无意义的挣扎&lt;/del> 努力。&lt;/p>
&lt;blockquote>
&lt;p>2010 年，在 Apple 推送通知服务发布后，Android 2.2 也马上推出了「云端至设备消息传递（Cloud to Device Messaging」，即 C2DM。&lt;/p>
&lt;p>2012 年 404 小厂推出「Google 云消息传递（Google Cloud Messaging）」，即 GCM。GCM 取代了 C2DM 并实现了更好的功耗表现，且对于开发者更加友好。&lt;/p>
&lt;p>2014 年某 404 小厂收购 Firebase 后，将 GCM 改名为「Firebase 云消息传递（Firebase Cloud Messaging）」，即 FCM。FCM 较之 GCM 则更进一步简化了推送服务相关的开发工作。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;figure style="flex-grow: 80; flex-basis: 193px">
&lt;a href="https://blog.linioi.com/posts/3/430ad3ada8a599674eb6136131587ad7.png" data-size="1120x1387">&lt;img src="https://blog.linioi.com/posts/3/430ad3ada8a599674eb6136131587ad7.png"
srcset="https://blog.linioi.com/posts/3/430ad3ada8a599674eb6136131587ad7_hu9339029dbf8895be1313aca3cb059381_173150_480x0_resize_box_2.png 480w, https://blog.linioi.com/posts/3/430ad3ada8a599674eb6136131587ad7_hu9339029dbf8895be1313aca3cb059381_173150_1024x0_resize_box_2.png 1024w"
width="1120"
height="1387"
loading="lazy"
alt="FCM 示意图">
&lt;/a>
&lt;figcaption>FCM 示意图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>从原理上来看，FCM 和 APNs 一致，也是按照 &lt;code>软件服务器&lt;/code> ==&amp;gt; &lt;code>FCM 服务器&lt;/code> ==&amp;gt; &lt;code>用户&lt;/code> 这一流程实现的。&lt;/p>
&lt;p>也就是说，对于 Android 系统 FCM 推送，整个推送过程中的 通知的接收与发送 都由 FCM 完成。这一过程中，设备上的软件&lt;strong>本身没有参与&lt;/strong>。&lt;/p>
&lt;p>虽然可能和你以前想象的不太一样，但是事实如此：&lt;strong>Android 系统同样有一套较为完善的推送机制，这个推送机制绿色高效，实现原理类似于 Apple。&lt;/strong>&lt;/p>
&lt;p>不过想法是美好的，现实是残酷的。因为种种原因，FCM 在国内并不能正常使用，主要原因如下：&lt;/p>
&lt;ul>
&lt;li>FCM 依赖 Google Play Service 而绝大部分国内 Android 手机都阉割了 Google Play Service。&lt;/li>
&lt;li>大部分国内 App 都没有注册 FCM（不支持 FCM）。&lt;/li>
&lt;li>FCM 在国内的连接不稳定。&lt;/li>
&lt;/ul>
&lt;p>对于已安装 Google Play Service 的用户，可以在手机拨号盘输入 &lt;code>*#*#426#*#*&lt;/code> 查看你当前的 FCM 连接状态。&lt;/p>
&lt;p>&lt;figure style="flex-grow: 210; flex-basis: 504px">
&lt;a href="https://blog.linioi.com/posts/3/6f4d17b500537aebf393b3e47377dfc3.jpg" data-size="1080x514">&lt;img src="https://blog.linioi.com/posts/3/6f4d17b500537aebf393b3e47377dfc3.jpg"
srcset="https://blog.linioi.com/posts/3/6f4d17b500537aebf393b3e47377dfc3_hu48ff6f5453c2e459a0d882e130c6a750_34715_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/3/6f4d17b500537aebf393b3e47377dfc3_hu48ff6f5453c2e459a0d882e130c6a750_34715_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="514"
loading="lazy"
alt="FCM 已连接示意图">
&lt;/a>
&lt;figcaption>FCM 已连接示意图&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;h3 id="各大互联网公司的解决方案">各大互联网公司的解决方案&lt;/h3>
&lt;p>由上面的叙述我们可以知道，404 小厂的 FCM 是靠不住了，关键时刻还是需要我们自力更生，自给自足。&lt;/p>
&lt;p>事实上，这种小问题根本难不倒我们大天朝的互联网公司，以阿里巴巴等互联网巨头为首率先想出一种行之有效的解决方法——&lt;strong>团结就是力量&lt;/strong>。&lt;/p>
&lt;p>可能上一段你看得有点懵，但不要紧，我给这种解决方法换一个更广为人知的名字你就熟了——&lt;strong>链式启动&lt;/strong>。&lt;/p>
&lt;p>互联网公司通过自己的软件全家桶或和其他互联网公司相互合作，以&lt;strong>相互唤醒&lt;/strong>的方式保证自己全家人后台存活，然后团结一致完成通知推送（当然也可能顺便干一点别的东西）。&lt;/p>
&lt;p>简单来说，如果这些软件中有一个不慎倒下了（后台被杀死），&lt;strong>其他软件会迅速将其拉起&lt;/strong>，保证其在后台&lt;strong>始终处于唤醒状态&lt;/strong>，让共用的推送通道保持活跃而不被系统杀死，以便消息能及时送达。&lt;/p>
&lt;p>这一方法简单粗暴，不仅体现了化繁为简这一哲学思想，更是弘扬了社会主义团结互助的精神，再次告诉我们什么叫做团结就是力量！（此处应有掌声）&lt;/p>
&lt;p>当然，这种方法还是有一点点小小的弊端，那就是手机耗电有点快，可能还会有点烫有点卡。&lt;del>但是瑕不掩瑜，这点小问题和这天才般的创意比起来算什么呢？&lt;/del>&lt;/p>
&lt;h3 id="手机厂商的推送服务">手机厂商的推送服务&lt;/h3>
&lt;p>面对 &lt;del>群魔乱舞的&lt;/del> Android 推送问题，终究还是有手机厂商站了出来，模仿 Apple 和 404 小厂的做法建立了他们自己的推送服务，比如小米的「MiPush」。&lt;/p>
&lt;p>这些推送服务被集成在各厂商高度定制的 Android 系统中，作为系统级推送存在。手机厂商试图通过模仿 Apple 和 404 小厂实现同等程度的通知绿色与时效性。&lt;/p>
&lt;p>但想法是美好的，事实上，开发者不可能兼顾所有的厂商，为每个品牌的手机都适配对应的推送服务，能专门适配其中一家到两家已经是很良心了 &lt;del>(试图为某鹅狡辩)&lt;/del> 。除此之外，虽然手机厂商的推送服务也可以在其它品牌的手机上正常使用，但并不能像在自家定制系统上一样实现系统级的推送，推送服务依旧需要后台常驻。&lt;/p>
&lt;h3 id="也许是黎明的曙光统一推送联盟">也许是黎明的曙光——统一推送联盟&lt;/h3>
&lt;p>不知道你有没有听说过 &lt;a class="link" href="https://green-android.org/" target="_blank" rel="noopener"
>Android 绿色应用公约&lt;/a>。如果没有听说过也没关系，现在你知道了。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>宗旨&lt;/strong>&lt;/p>
&lt;p>这是一项旨在推动 Android 生态中的优秀应用共同维护一个更加良性的『设备体验』而发起的开放公约。&lt;/p>
&lt;p>&amp;hellip;&lt;/p>
&lt;p>&lt;strong>核心原则&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>完全遵照 Android 本身的演进方向（包括 &lt;a class="link" href="https://developer.android.google.cn/preview/behavior-changes.html" target="_blank" rel="noopener"
>Android O 所引入的新变化&lt;/a>），积极引导和协助应用开发团队平滑完成对接 Android 最新变化的节奏，在确保应用核心功能不受影响的前提下，减少不必要的应用后台行为，并以更加高效、节能的调度机制改善后台行为的调度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公约的必要规约中，只纳入可被明确验证的条款，不接受需要主观裁量或定义模糊的条款（例如涉及交互设计的内容）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所有约束条款均给出推荐的最佳实践或具有可操作性的调整方法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>涉及到功能与设备体验之间的潜在冲突时，遵循最终选择权给予用户的原则。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>——《Android 绿色应用公约 4.0》&lt;/p>
&lt;/blockquote>
&lt;p>&lt;del>虽然在我看来公约里的部分 App 也不怎么绿色。&lt;/del>&lt;/p>
&lt;p>我们可以看到，在 &lt;a class="link" href="https://green-android.org/" target="_blank" rel="noopener"
>Android 绿色应用公约&lt;/a>中的互联网大公司的软件屈指可数。&lt;del>（好吧，别自欺欺人了，是基本上没有，有的也不咋绿色）&lt;/del>&lt;/p>
&lt;p>这说明了，仅仅靠各公司的自觉或社区推动实现国内 Android 生态 App 绿色化是不现实的，而通知这个关键点更是每个公司都不愿意松手。&lt;/p>
&lt;p>这时候，需要有更强大的力量站出来，整顿当前国内 App 的通知推送乱象。于是，&lt;a class="link" href="http://m.chinaupa.com/" target="_blank" rel="noopener"
>统一推送联盟&lt;/a>出现了。&lt;/p>
&lt;blockquote>
&lt;p>　　统一推送联盟成立于2017年10月，挂靠单位是电信终端产业协会（TAF），接受工业和信息化部业务指导，住所设在北京。联盟核心任务是：探索推送行业创新，促进终端生产厂商、应用开发厂商和第三方服务提供商等进行深入合作，整合行业资源，助推形成统一的推送体系，创造绿色环境，减少与终端用户的利益冲突，提升整体行业形象，降低整体行业的实现成本，形成自律基础上的产业链协同发展，实现产业的共同繁荣。&lt;/p>
&lt;p>　　统一推送联盟是在自愿、平等、互利、合作的基础上，由国内外消息推送产业相关的企、事业单位、社团组织、高等院校、科研院所等自愿结成的跨行业、开放性、非营利性的社会组织。本联盟旨在促进相关主体之间的交流和深度合作，促进供需对接和知识共享，形成优势互补，有效推进消息推送产业的发展，切实解决产业现实问题。&lt;/p>
&lt;p>——统一推送联盟《关于我们》&lt;/p>
&lt;/blockquote>
&lt;p>事实证明统一推送联盟是实现了巨大的影响的。&lt;/p>
&lt;p>不到两年时间里，统一推送联盟就实现了由「全民讨论统一推送后 Android 美好的幸福生活」到「全民讨论 统一推送联盟 到底黄没黄」的巨大转变。&lt;/p>
&lt;p>但是，我们要客观、发展性地看待问题，统一推送联盟一直在时刻努力着，前段时间还发表了一篇名为 &lt;a class="link" href="https://mp.weixin.qq.com/s/JJ_cd3kHiggqb8pNqAOQkA" target="_blank" rel="noopener"
>《统一推送能给手机带来什么？》&lt;/a> 的科普性文章。文章底部留言中，官方更是回复「推必达将于近期上线」。
&lt;figure style="flex-grow: 326; flex-basis: 783px">
&lt;a href="https://blog.linioi.com/posts/3/ef81f741eee5fba23e6c1678aa187b4a.jpg" data-size="1080x331">&lt;img src="https://blog.linioi.com/posts/3/ef81f741eee5fba23e6c1678aa187b4a.jpg"
srcset="https://blog.linioi.com/posts/3/ef81f741eee5fba23e6c1678aa187b4a_hu8d01b0c9479d1c4cccefe07f14b8aa36_23595_480x0_resize_q75_box.jpg 480w, https://blog.linioi.com/posts/3/ef81f741eee5fba23e6c1678aa187b4a_hu8d01b0c9479d1c4cccefe07f14b8aa36_23595_1024x0_resize_q75_box.jpg 1024w"
width="1080"
height="331"
loading="lazy"
alt="官方回复「近期上线」">
&lt;/a>
&lt;figcaption>官方回复「近期上线」&lt;/figcaption>
&lt;/figure>&lt;/p>
&lt;p>&lt;del>我也不知道我有生之年能不能等到这天了。&lt;/del>&lt;/p>
&lt;h2 id="题外话让我们回头看看-qqwechat">题外话：让我们回头看看 QQ/WeChat&lt;/h2>
&lt;p>看到这里，你大概对手机系统推送有了比较全面的了解。&lt;/p>
&lt;p>那么你一定好奇，国民级软件 QQ 和 WeChat 是怎么实现手机通知推送的。&lt;/p>
&lt;p>iOS 当然没有任何疑问，通过 Apple Push Notification service。&lt;/p>
&lt;p>Android 上则一言难尽，因为&lt;strong>这两个 App 都没有注册任何一个推送服务&lt;/strong>。&lt;del>忘了 Google Play 版 WeChat 的 FCM 吧，它能不能推送完全看脸&lt;/del>&lt;/p>
&lt;p>没有注册推送服务意味着 QQ 和 WeChat 在 Android 上实现通知推送&lt;strong>全靠后台常驻&lt;/strong>。微信尤甚，&lt;strong>某个进程挂了，整个 App 都收不到通知&lt;/strong>。&lt;/p>
&lt;p>保证 QQ 和 WeChat 的通知时效性一直是困扰大部分开发者和所有国内手机厂商的难题。对此大部份国内手机厂商的解决方法都是对 QQ 和 WeChat 后台无限制以最大程度保活，实现通知推送正常。&lt;/p>
&lt;p>而此时，Telegram 支持 FCM 的优点就体现出来了——对于我来说，我能第一时间收到你发给我的消息并回复，而 QQ 和 WeChat 还得等上一阵子。我希望私聊我的人用 Telegram 而不是 QQ 和 WeChat 的原因很简单：&lt;/p>
&lt;blockquote>
&lt;p>我不想浪费我的时间在无意义的事情上，比如保证 QQ 和 WeChat 能及时收到消息。&lt;/p>
&lt;/blockquote>
&lt;p>如果你用某一品牌的手机，QQ 和 WeChat 经常收不到消息，请不要咒骂这个手机厂商。如果可以的话，请劝告你身边的人也不要这样做。手机厂商也在尽自己最大的努力，只不过他们只能尽人事听天命。&lt;/p>
&lt;hr>
&lt;p>参考链接：
太多了，有缘再整理吧…&lt;/p></description></item><item><title>Violet 机型 HT OS 刷入教程</title><link>https://blog.linioi.com/posts/12/</link><pubDate>Thu, 17 Sep 2020 13:05:37 +0000</pubDate><guid>https://blog.linioi.com/posts/12/</guid><description>&lt;blockquote>
&lt;p>Redmi Note 7 Pro 第一个非 Port Android 11，再怎么垃圾也不得不忍啊…&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="前言">前言&lt;/h2>
&lt;p>&lt;del>待会再补上&lt;/del>&lt;/p>
&lt;h2 id="刷入步骤">刷入步骤&lt;/h2>
&lt;blockquote>
&lt;p>注意：以下为 hentaiOS 作者 Dyneteve 给出的&lt;a class="link" href="https://t.me/hentaiOSViolet/238933" target="_blank" rel="noopener"
>官方刷入步骤&lt;/a>。其他刷机方法待更新。&lt;/p>
&lt;p>如果你无法理解本文的某些内容，你可以参照&lt;a class="link" href="https://blog.linioi.com/posts/10/" target="_blank" rel="noopener"
>这篇教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h3 id="你需要准备什么">你需要准备什么？&lt;/h3>
&lt;ul>
&lt;li>一台电脑 (Windows 和 Linux 皆可)&lt;/li>
&lt;li>一台能正常工作的 Redmi Note 7 Pro (Violet)&lt;/li>
&lt;li>一双能照着教程操作的手&lt;/li>
&lt;li>下载 &lt;a class="link" href="https://downloads.hentaios.com/" target="_blank" rel="noopener"
>hentaiOS 刷机包&lt;/a> 和 &lt;a class="link" href="https://drive.google.com/file/d/1q0IJzcWdxQWUoBRgBKfwZauLQveiZbJy/view?usp=sharing" target="_blank" rel="noopener"
>AOSP Recovery ROM Flasher V4.zip&lt;/a> 至电脑；
&lt;em>对于 Linux 用户，你还需要下载 &lt;a class="link" href="https://t.me/hentaiOSViolet/240957" target="_blank" rel="noopener"
>linux_flash.zip&lt;/a>&lt;/em>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>现已搬运 hentaiOS 刷机包和 AOSP Recovery 至我网盘。&lt;/p>
&lt;p>上面连接无法访问的可以试试下面的链接。&lt;/p>
&lt;p>hentaiOS 刷机包：&lt;a class="link" href="https://one.linioi.com/onedrive/%E5%88%B7%E6%9C%BA%E8%B5%84%E6%BA%90/Redmi%20Note%207%20Pro%20%28Violet%29/ROM/Hentai%20OS/" target="_blank" rel="noopener"
>Link&lt;/a>&lt;/p>
&lt;p>AOSP Recovery：&lt;a class="link" href="https://one.linioi.com/onedrive/%E5%88%B7%E6%9C%BA%E8%B5%84%E6%BA%90/Redmi%20Note%207%20Pro%20%28Violet%29/Recovery/AOSP%20Recovery%20ROM%20Flasher%20V4.zip" target="_blank" rel="noopener"
>Link&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="那么让我们开始">那么，让我们开始…&lt;/h3>
&lt;ol>
&lt;li>备份你的数据，准备好相应的救砖工具以备不时之需。&lt;/li>
&lt;li>关机下长按&lt;code>电源键&lt;/code>和&lt;code>音量-&lt;/code>进入 &lt;a class="link" href="https://baike.baidu.com/item/fastboot/3228436" target="_blank" rel="noopener"
>fastboot&lt;/a> 模式。&lt;/li>
&lt;li>使用 USB 数据线连接手机和电脑。如果可以，请尽量使用&lt;strong>原装数据线&lt;/strong>。&lt;/li>
&lt;li>输入&lt;code>fastboot devices&lt;/code>检查设备是否已正常连接。如果你电脑没有配置 ADB 环境，建议参照&lt;a class="link" href="https://sspai.com/post/40471" target="_blank" rel="noopener"
>这篇教程&lt;/a>配置 ADB 环境。&lt;em>对于 Linux 用户，请自行查阅你使用的发行版所需要安装的软件包。&lt;/em>&lt;/li>
&lt;li>解压你下载的 &lt;code>AOSP Recovery ROM Flasher V4.zip&lt;/code> 。
解压后文件夹目录如下&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>AOSP Recovery ROM Flasher V4
├── flashme.bat
├── images
├── sideload
└── windows
&lt;/code>&lt;/pre>&lt;p>&lt;em>你可能需要手动将你下载的 hentaiOS 刷机包放入解压后的 &lt;code>sideload&lt;/code> 文件夹&lt;/em>。&lt;/p>
&lt;ol start="6">
&lt;li>
&lt;p>对于 Windows 用户，请打开你解压后的文件夹，双击 &lt;code>flashme.bat&lt;/code> 并等待刷入结束；对于 Linux 用户，请解压你下载的&lt;code>linux_flash.zip&lt;/code>到 &lt;code>AOSP Recovery ROM Flasher V4.zip&lt;/code>解压后的文件夹中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>长按&lt;code>电源键&lt;/code>和&lt;code>音量+&lt;/code>进入 AOSP Recovery。&lt;em>如果屏幕显示 &lt;code>no comand&lt;/code> 或者 &lt;code>没有指令&lt;/code>，请按一次&lt;code>音量+&lt;/code>。&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>音量键&lt;/code>和&lt;code>电源键&lt;/code>选中&lt;code>Apply update from ADB&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>电脑在命令行回车，脚本会自动刷入 ROM。进度到 49% 时可能需要你手动确认，选择 &lt;code>Yes&lt;/code> 即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>输入过程结束后，使用&lt;code>电源键&lt;/code>和&lt;code>音量键&lt;/code>选中&lt;code>Factory Reset&lt;/code>，等待清除完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用&lt;code>电源键&lt;/code>和&lt;code>音量键&lt;/code>选中&lt;code>Reboot to system&lt;/code>，等待手机开机。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>至此，hentaiOS 已刷入完成&lt;/strong>&lt;/p>
&lt;h3 id="某些问题的简单解答待更新">某些问题的简单解答（待更新）&lt;/h3>
&lt;ul>
&lt;li>Magisk &lt;strong>所有版本不能正常工作&lt;/strong>&lt;/li>
&lt;li>TWRP 及 TWRP 魔改版本(如 OrangeFox)&lt;strong>无法正常工作&lt;/strong>&lt;/li>
&lt;li>ROM &lt;strong>无法解密&lt;/strong>，解密会导致&lt;code>The system has been destroyed&lt;/code>&lt;/li>
&lt;li>目前仅 AOSP Recovery 可以完全正常刷入 ROM，其他方式待验证&lt;/li>
&lt;/ul>
&lt;h2 id="后记">后记&lt;/h2>
&lt;p>&lt;del>待会再补上&lt;/del>&lt;/p></description></item><item><title>欧盟或将仿造中国建网络防火墙</title><link>https://blog.linioi.com/posts/13/</link><pubDate>Thu, 13 Aug 2020 15:52:45 +0000</pubDate><guid>https://blog.linioi.com/posts/13/</guid><description>&lt;blockquote>
&lt;p>一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>上个月，欧盟议会发布了一份关于数字经济未来发展策略的&lt;a class="link" href="https://www.europarl.europa.eu/committees/en/product/product-details/20200602CAN55527" target="_blank" rel="noopener"
>研究报告&lt;/a>，提出将建立欧盟的“互联网防火墙”，报告明确指出这个防火墙将“像中国的一样，会封锁一部分支持或者容忍（对欧盟而言的）非法行为的第三方国家的互联网服务。&lt;/p>
&lt;/blockquote>
&lt;h2 id="互联网防火墙可能是有预兆的必然">互联网防火墙可能是有预兆的必然&lt;/h2>
&lt;p>不禁让我想起了去年俄罗斯开始和中国交流“互联网防火墙”的建设。&lt;/p>
&lt;p>所谓“网络主权”正在被越来越多的国家挂在嘴上，而所谓“互联网自由”逐渐变成了一个笑话。一切真如很久以前有人说的，「互联网审查并将成为世界绝大多数国家的共识，互联网自由将随着互联网的发展而有名无实」。&lt;/p>
&lt;h2 id="历史总是相似的">历史总是相似的&lt;/h2>
&lt;p>此时被无数人想起的莫过于茨威格的《昨日的世界》&lt;/p>
&lt;blockquote>
&lt;p>自从第一次世界大战以来，世界所经历的能让人感觉到的最大倒退，莫过于对个人行动自由的限制，以及自由权利的缩小。
在1914年以前，地球属于所有的人。每个人可以去他想去的地方，想停留多长时间就停留多长时间。没有所谓的许可，没有准入。
当我跟现在的年轻人讲到我在1914年以前去了印度和美国，没有带护照，也根本没见过护照是什么样子，我总是看到他们脸上的惊奇。
人们上车下车，不需要问什么，也不被人盘问；今天人们被要求填写的上百份表格，当时一份也不用填写。没有居留许可，没有签证，没有刁难。
今天的国界线，因为大家彼此之间病态的不信任，已经被海关、警察、哨所变成了一道铁丝网，而那时的国界线无非是一条象征性的界线，谁都可以不假思索地越过，就如同格林尼治的子午线一样。&lt;/p>
&lt;p>　　　　——茨威格 《昨日的世界》&lt;/p>
&lt;/blockquote>
&lt;p>所谓自由只是在管制下的一点漏洞。当制度逐渐完善，自由只剩下狭义的自由，也就是政治中的「&lt;strong>真正的自由&lt;/strong>」。&lt;/p>
&lt;p>想起许多年前无数人苦苦追求的“言论自由”，又与无数人把西方某些国家当作自由的标杆，心中自由的圣地，便觉得可笑到了极点，世界总是这样让人意想不到、啼笑皆非。&lt;/p>
&lt;p>引用一位博主的一段话：&lt;/p>
&lt;blockquote>
&lt;p>互联网也曾撕开一个时代的裂缝，现在中文互联网上还有人在怀念上一个十年乃至上上个十年，怀念那时候自由的互联网风气，全世界的网站、服务须臾指间，点击可达——和茨威格一样，他们也认为那是理所当然。&lt;/p>
&lt;p>其实我们都不过是见证了裂缝渐渐闭合的过程而已，现在这个过程也要降临到欧洲了。&lt;strong>一直到有一天，我们也会像讲一个神话故事一样告诉下一代：“我们这个时代，访问外国的任何互联网服务都不需要护照。”&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>恍然间，昨日如梦。&lt;/p>
&lt;p>参考文章:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.evennotes.cn/2020/2FQHKJF/?s=09" target="_blank" rel="noopener"
>逸文笔记&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Arch Linux 服务器安装 LNMP</title><link>https://blog.linioi.com/posts/5/</link><pubDate>Sat, 30 May 2020 20:31:49 +0000</pubDate><guid>https://blog.linioi.com/posts/5/</guid><description>&lt;blockquote>
&lt;p>没有其他发行版的一键脚本/运维面板
Arch Linux 用它的方式体现着它的超凡脱俗
&lt;del>其实就是用的人太少，没人写脚本&lt;/del>&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="对-arch-linux-进行一次全面更新">对 Arch Linux 进行一次全面更新&lt;/h2>
&lt;p>&lt;del>话说，这不是每天开机第一件事吗&lt;/del>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -Syu
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="安装-nginx">安装 Nginx&lt;/h2>
&lt;p>Arch Linux 软件库中有两个版本的 Nginx，分别是
&lt;a class="link" href="https://www.archlinux.org/packages/extra/x86_64/nginx/" target="_blank" rel="noopener"
>nginx&lt;/a> 和 &lt;a class="link" href="https://www.archlinux.org/packages/community/x86_64/nginx-mainline/" target="_blank" rel="noopener"
>nginx-mainline&lt;/a>，与 Nginx 官方的两个版本对应。nginx 理论上更加稳定，但版本比较旧， 而 nginx-mainline 是 Nginx 最新的版本。
但这并不表示 nginx-mainline = 不稳定。实际上 nginx.org 官网说明，如果没有非常必要的原因，则推荐使用 nginx mainline。
输入如下命令安装旧版本 Nginx。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装 nginx-mainline。（本教程安装的是 mainline）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S nginx-mainline
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上两条命令默认会自动安装 geoip 和 geoip-database 两个软件包。安装完成后，使用 systemctl 来查看其状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl status nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">● nginx.service - A high performance web server and a reverse proxy server
Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/nginx.service&lt;span class="p">;&lt;/span> enabled&lt;span class="p">;&lt;/span> vendor preset: disabled&lt;span class="o">)&lt;/span>
Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span> since Tue 2016-04-12 13:10:57 CST&lt;span class="p">;&lt;/span> &lt;span class="m">1&lt;/span> day 7h ago
Main PID: &lt;span class="m">2010&lt;/span> &lt;span class="o">(&lt;/span>nginx&lt;span class="o">)&lt;/span>
Tasks: &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span>limit: 512&lt;span class="o">)&lt;/span>
CGroup: /system.slice/nginx.service
├─2010 nginx: master process /usr/bin/nginx -g pid /run/nginx.pid&lt;span class="p">;&lt;/span> daemon on&lt;span class="p">;&lt;/span> master_process on
└─2011 nginx: worker process
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 Nginx 未运行，则输入以下的命令启动它。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl start nginx &lt;span class="c1">#启动 Nginx&lt;/span>
sudo systemctl &lt;span class="nb">enable&lt;/span> nginx &lt;span class="c1">#设置 Nginx 开机自启动&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入如下命令可查看 Nginx 的版本号&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>user@arch ~&lt;span class="o">]&lt;/span>$ nginx -v
nginx version: nginx/1.9.14
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在浏览器中输入 Arch Linux 服务器的 IP 地址，如果看见如下文字，则说明 Nginx 在正常运行。
&lt;img src="https://cdn.jsdelivr.net/gh/RimuruW/PicGoBed/blog/images/nginx.png" alt="Nginx 欢迎界面" />&lt;/p>
&lt;p>如果你不知道服务器公网 IP，可以输入这条命令查看。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">curl http://icanhazip.com
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你是在本地主机安装，那么直接在浏览器地址栏输入 127.0.0.1 即可。&lt;/p>
&lt;h2 id="安装-mariadb">安装 MariaDB&lt;/h2>
&lt;p>2013 年开始，Arch Linux 将 MariaDB 作为默认的 SQL 数据库软件，Oracle 的 MySQL 则被丢进 AUR（（（&lt;/p>
&lt;p>输入如下命令安装 MariaDB&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S mariadb
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在启动 MariaDB 服务之前，需要使用用 &lt;code>mysql_install_db&lt;/code>命令初始化 MariaDB 的数据目录&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mysql_install_db --user&lt;span class="o">=&lt;/span>mysql --basedir&lt;span class="o">=&lt;/span>/usr --datadir&lt;span class="o">=&lt;/span>/var/lib/mysql
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动 MariaDB 服务。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl start mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 MariaDB 状态。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">systemctl status mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">● mysqld.service - MariaDB database server
Loaded: loaded &lt;span class="o">(&lt;/span>/usr/lib/systemd/system/mysqld.service&lt;span class="p">;&lt;/span> disabled&lt;span class="p">;&lt;/span> vendor preset: disabled&lt;span class="o">)&lt;/span>
Active: active &lt;span class="o">(&lt;/span>running&lt;span class="o">)&lt;/span> since Wed 2016-04-13 21:09:45 CST&lt;span class="p">;&lt;/span> 5s ago
Process: &lt;span class="m">8373&lt;/span> &lt;span class="nv">ExecStartPost&lt;/span>&lt;span class="o">=&lt;/span>/usr/bin/mysqld-post &lt;span class="o">(&lt;/span>&lt;span class="nv">code&lt;/span>&lt;span class="o">=&lt;/span>exited, &lt;span class="nv">status&lt;/span>&lt;span class="o">=&lt;/span>0/SUCCESS&lt;span class="o">)&lt;/span>
Main PID: &lt;span class="m">8372&lt;/span> &lt;span class="o">(&lt;/span>mysqld&lt;span class="o">)&lt;/span>
Tasks: &lt;span class="m">26&lt;/span> &lt;span class="o">(&lt;/span>limit: 512&lt;span class="o">)&lt;/span>
CGroup: /system.slice/mysqld.service
└─8372 /usr/bin/mysqld --pid-file&lt;span class="o">=&lt;/span>/run/mysqld/mysqld.pid
&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置 MariaDB 开机自启动。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemclt &lt;span class="nb">enable&lt;/span> mysqld
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行安全安装脚本。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo mysql_secure_installation
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它会询问你 MariaDB 的 root 密码，因为我们没有设置密码，所以按 Enter 键，再设置一个 root 密码。然后选择删除 test 数据库，anonymous 用户以及禁用 root 用户远程登录。&lt;/p>
&lt;p>查看 MariaDB 的版本。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>user@arch ~&lt;span class="o">]&lt;/span>$ mysql --version
mysql Ver 15.1 Distrib 10.1.13-MariaDB, &lt;span class="k">for&lt;/span> Linux &lt;span class="o">(&lt;/span>x86_64&lt;span class="o">)&lt;/span> using readline 5.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认的配置文件位置为 &lt;code>/etc/mysql/my.cnf&lt;/code>。&lt;/p>
&lt;p>第 4 步：安装 PHP7
Arch Linux 软件库的 PHP 一般都是最新版本（目前是 7.4 版本）&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S php-fpm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装后，修改 Nginx 配置文件以使 Nginx 使用 php-fpm 来运行 PHP。编辑/etc/nginx/nginx.conf 文件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo nano /etc/nginx/nginx.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>找到 location ~ .php$这部分的配置，将这部分配置修改成如下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-nginx" data-lang="nginx">&lt;span class="k">location&lt;/span> &lt;span class="p">~&lt;/span> &lt;span class="sr">\.php$&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kn">root&lt;/span> &lt;span class="s">/usr/share/nginx/html&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">fastcgi_pass&lt;/span> &lt;span class="s">unix:/run/php-fpm/php-fpm.sock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">fastcgi_index&lt;/span> &lt;span class="s">index.php&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">fastcgi_param&lt;/span> &lt;span class="s">SCRIPT_FILENAME&lt;/span> &lt;span class="nv">$document_root$fastcgi_script_name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kn">include&lt;/span> &lt;span class="s">fastcgi_params&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存文件。然后启动 php-fpm，并设置开机自启动。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl start php-fpm
sudo systemctl &lt;span class="nb">enable&lt;/span> php-fpm
&lt;/code>&lt;/pre>&lt;/div>&lt;p>第 5 步：测试 PHP
在网站根目录创建一个 test.php 文件。默认的网站根目录是/usr/share/nginx/html。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo nano /usr/share/nginx/html/test.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在文件中添加如下 PHP 代码。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="o">&amp;lt;?&lt;/span>&lt;span class="nx">php&lt;/span>
&lt;span class="nx">phpinfo&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="cp">?&amp;gt;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存文件。重新加载 Nginx。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo systemctl reload nginx
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在浏览器地址栏输入 &lt;code>http://你服务器或本地主机IP/test.php&lt;/code>。将 server-ip 替换成 Arch Linux 服务器或本地主机 IP。
此时，浏览器会显示有关 PHP 到底信息，这意味着你已修改成功。&lt;/p>
&lt;p>test.php 文件只是用来测试 PHP 的，为了不让他人看见服务器的信息，测试之后要将它删除。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo rm /usr/share/nginx/html/test.php
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启用 PHP 扩展
编辑 /etc/php/php.ini 配置文件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo nano /etc/php/php.ini
&lt;/code>&lt;/pre>&lt;/div>&lt;p>找到如下两行文字，去掉前面的#符号以启用 mysqli 和 pdo_mysql。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-php" data-lang="php">&lt;span class="p">;&lt;/span>&lt;span class="nx">extension&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">mysqli&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nx">so&lt;/span>
&lt;span class="p">;&lt;/span>&lt;span class="nx">extension&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nx">pdo_mysql&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="nx">so&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>mysqli.do&lt;/code> 用来建立数据库连接。&lt;code>pdo_mysql.so&lt;/code> 是 drupal 内容管理系统所必要的 PHP 扩展。如果需要在 WordPress, Drupal 内容管理系统中剪裁、旋转图片，那么需要启用 imagemagick 这个扩展。&lt;/p>
&lt;p>安装教程到此结束。&lt;/p>
&lt;p>转载自&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://www.linuxbabe.com/linux-server/install-lemp-nginx-mariadb-php7-arch-linux-server" target="_blank" rel="noopener"
>Install Nginx, MariaDB, PHP7 (LEMP) on Arch Linux Server in 2019&lt;/a>
转载略有修改&lt;/li>
&lt;/ul></description></item><item><title>GitHub Action 实现 Hexo 博客持续集成</title><link>https://blog.linioi.com/posts/9/</link><pubDate>Wed, 29 Apr 2020 01:47:09 +0000</pubDate><guid>https://blog.linioi.com/posts/9/</guid><description>&lt;blockquote>
&lt;p>无需配置 Hexo 环境~
在任何可以打开网页的设备上即可编辑你的 Hexo 博客并部署！&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="你要先清楚某些东西">你要先清楚某些东西…&lt;/h2>
&lt;ul>
&lt;li>在私有仓库下使用 GitHub Action 是&lt;strong>不完全免费的&lt;/strong>。
对于免费用户，&lt;strong>你每个月只能使用 GitHub Action 工作 2000 min&lt;/strong>。这个数据计算方法特别有意思，详见 &lt;a class="link" href="https://help.github.com/en/github/setting-up-and-managing-billing-and-payments-on-github/about-billing-for-github-actions" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>据我多次测试，对于我的博客，GitHub Action 每次部署大概要耗时 1 min。
假设你每次提交需要耗时 2 min，这意味着你如果使用私有仓库存放后续操作中的源码，你每个月只能提交 1000 次博客。折算下来，也就是说，你每天只能提交 33 次博客。&lt;/p>
&lt;p>需要特别说明的，上面的时间计算是在 Linux 环境下的计算。如果你在后续操作中使用的 Operating system 是 Windows 或 macOS ，则 GitHub Action 记录的时间分别是你实际使用时间的 2 倍和 10 倍。&lt;/p>
&lt;p>话说，如果你能做到每天提交 33 次博客，请务必留个联系方式让我认识一下。没别的意思，就是想瞻仰一下劳模的风采。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>在测试过程中，&lt;strong>我发现即使使用 Linux 作为 Operating system， GitHub Action 实际工作时间也和 GitHub 计费时间并不相同&lt;/strong>。
同时，我在 GitHub Action 界面发现如下文字：&lt;/li>
&lt;/ul>
&lt;pre>&lt;code>This is the workflow execution time which may be different than the billed time.
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>如果你需要自定义域名，你的&lt;code>CNAME&lt;/code>文件应放在 Hexo 源码仓库的 source 文件夹下。&lt;/li>
&lt;li>&lt;a href="mailto:hexo-action@v1.0.0">hexo-action@v1.0.0&lt;/a> 会自动删除项目仓库下的&lt;code>.deploy_git&lt;/code>文件。即每次提交源码后，部署 Hexo 的那个仓库的所有历史提交将会被清空。这个问题在 &lt;a href="mailto:hexo-action@1.0.1">hexo-action@1.0.1&lt;/a> 被修复。我认为这个修复是不合理的。&lt;/li>
&lt;li>如果需要添加额外的 node module，则在&lt;code>package.json&lt;/code>中添加相应依赖。&lt;/li>
&lt;/ul>
&lt;h2 id="默认已满足的条件">默认已满足的条件&lt;/h2>
&lt;ul>
&lt;li>已注册 GitHub 账号&lt;/li>
&lt;li>已有一个部署到 GitHub 且工作正常的 Hexo 博客&lt;/li>
&lt;li>有一定动手能力&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>接下来，让我们开始……&lt;/p>
&lt;h2 id="方法一">方法一&lt;/h2>
&lt;hr>
&lt;h3 id="部署集成环境">部署集成环境&lt;/h3>
&lt;ol>
&lt;li>GitHub 建立一个新的仓库，公有还是私有，取决于你的选择。建议此时生成 SSH 密匙简化后续提交过程。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>&lt;strong>特别提醒，对于 GitHub 免费用户，私有仓库每个月的数据传输上限为 1GB&lt;/strong>。 &amp;lt;===&lt;em>该部分内容源自 GitHub 文档，但是实际操作中并未发现该现象，目前还在考证中&lt;/em>。
GitHub Actions 部署时使用的数据不会计入数据传输上限。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>在博客源码中新建&lt;code>.github/workflows/hexo.yml&lt;/code>文件，在文件添加如下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># workflow 名字&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">push]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 触发事件&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">build&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Job 1 ID&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 设定运行环境为最新版 Ubuntu，如果你有把握的话，你也可以改成其它运行环境。参见文末备注。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy blog.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Step 1 获取源码&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 actions/checkout@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 条件&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">submodules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">## Checkout private submodules(themes or something else).参见文末备注。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Caching dependencies to speed up workflows. (GitHub will remove any cache entries that have not been accessed in over 7 days.) 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cache node modules&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Step 2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/cache@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cache&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node_modules&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ runner.os }}-node-${{ hashFiles(&amp;#39;**/package-lock.json&amp;#39;) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">restore-keys&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ runner.os }}-node-&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install Dependencies&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Step 3 &lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">if&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">steps.cache.outputs.cache-hit != &amp;#39;true&amp;#39;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 如果变量 cache-hit 不等于 true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">npm install&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 安装 NPM 相关依赖&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Deploy hexo blog website.&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Step 4&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">sma11black/hexo-action@v1.0.1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">deploy_key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ secrets.DEPLOY_KEY }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user_name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">your github name&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#你 GitHub 用户名。如果去除该行则使用 bot。去除该行是不推荐行为。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">user_email&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">yourgithubemail@example.com&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#你 GitHub 邮箱。如果去除该行则使用 bot。去除该行是不推荐行为。&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">commit_msg&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{ github.event.head_commit.message }}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#Hexo 部署博客的自动提交备注&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>部分内容需要根据你实际情况修改为相应内容&lt;/strong>&lt;/p>
&lt;ol start="3">
&lt;li>push 你的博客源码到刚刚新建的仓库。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>建议在 push 前进行一次 &lt;code>hexo clean&lt;/code>。且在每一次&lt;code>hexo g&lt;/code>后准备 push，都应该进行一次 &lt;code>hexo clean&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>输入如下命令再生成一对 SSH 密匙。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">ssh-keygen -t rsa -f ~/.ssh/id_rsa_a -C &lt;span class="s2">&amp;#34;example@example.com&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你使用的是未预安装 OpenSSH 软件的 Linux 发行版，你需要先安装 OpenSSH 再进行如下步骤。
命令中的邮箱填自己 GitHub 的邮箱。此时会在本地生成一对公匙和私匙。&lt;/p>
&lt;ol start="5">
&lt;li>
&lt;p>打开你 GitHub 存放源码的那个仓库，转到&lt;code>Settings &amp;gt; Secrets&lt;/code>，创建一个名为&lt;code>DEPLOY_KEY&lt;/code>的&lt;code>Secret&lt;/code>，复制上面生成的私匙内容。&lt;strong>复制内容应该包含私匙开始的&amp;mdash;&amp;ndash;BEGIN OPENSSH PRIVATE KEY&amp;mdash;&amp;ndash; 和结束的 &amp;mdash;&amp;ndash;END OPENSSH PRIVATE KEY&amp;mdash;&amp;ndash;&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开你部署博客的那个仓库，即仓库名为 yourgithubname.github.io 的那个仓库，转到&lt;code>Settings &amp;gt; Deploy Keys&lt;/code>，输入上面生成的公匙，勾选 “Allow write access”并确定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>享受你的 GitHub CI 吧~&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="备注内容可以不看">备注内容（可以不看）&lt;/h3>
&lt;ul>
&lt;li>其他可选的运行环境请参见 &lt;a class="link" href="https://github.com/actions/virtual-environments/tree/ubuntu18/20200406.2" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/li>
&lt;li>关于 Submodules 参见 &lt;a class="link" href="https://github.com/sma11black/hexo-action#use-submodule-in-your-hexo-repository" target="_blank" rel="noopener"
>GitHub&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="方法二">方法二&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>打开 github.com&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;code>Settings&lt;/code> - &lt;code>Developer settings&lt;/code> - &lt;code>Personal access tokens&lt;/code> - &lt;code>Generate new token&lt;/code> 中创建密钥，勾选 Repo，拉到最下面，Generate token，接着将生成的 Token 保存下来（Token 只会出现一次，请务必妥善保管）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在你 Hexo 博客文件仓库/分支所在的仓库 的 Settings - Secrets - Add a new secret 创建俩个变量分别是 &lt;code>GH_REF&lt;/code> 和 &lt;code>GH_TOKEN&lt;/code>。
GH_REF 内容为你 GitHub Pages 仓库的地址（不需要包含 https）
GH_TOKEN 内容为上面所获取的 Token。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如果你对自动部署细节不感兴趣，可以直接跳转 &lt;a class="link" href="https://blog.linioi.com/posts/9/#%E6%88%90%E5%93%81" target="_blank" rel="noopener"
>成品&lt;/a> 复制并根据自己情况修改即可。&lt;/p>
&lt;h3 id="配置内容">配置内容&lt;/h3>
&lt;p>1.名称(这个随意取)&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hexo Blog Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.指定触发 workflow 的事件，这里选择的是推送至指定分支的事件&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 这里是推送事件&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 这里指定了推送的分支&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3.设置时区，这里设置的是上海的&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4.指定 workflow 所运行的系统，此处设置的是最新 Ubuntu。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">blog-cicd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hexo build&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>5.检出代码，设置 Node 环境&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout codes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup node&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;12.x&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Node 的版本&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>6.同步子模块。如果没有使用子模块的话，这一步可以忽略。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout submodules&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> auth_header=&amp;#34;$(git config --local --get http.https://github.com/.extraheader)&amp;#34;
&lt;/span>&lt;span class="sd"> git submodule sync --recursive
&lt;/span>&lt;span class="sd"> git -c &amp;#34;http.extraheader=$auth_header&amp;#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>7.缓存 .npm 目录，加快构建速度&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cache Node Dependencies&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Npm 缓存，这一步报错的话，把这部分删掉即可&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cache&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/cache@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.npm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{runner.OS}}-npm-caches-${{ hashFiles(&amp;#39;package-lock.json&amp;#39;) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>8.安装依赖。我建议，如果可以，请每次都执行以下步骤。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> npm install hexo-cli -g
&lt;/span>&lt;span class="sd"> npm install&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>9.生成文件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Generate files&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hexo clean &amp;amp;&amp;amp; hexo generate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>10.将 GitHub Pages 仓库克隆下来，并将 .git 目录移动到生成文件的文件夹文件夹中（这样可以保留之前的 commit 记录），然后再将其推送到 GitHub Pages&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> git clone &amp;#34;https://${{ secrets.GH_REF }}&amp;#34; deploy_git
&lt;/span>&lt;span class="sd"> mv ./deploy_git/.git ./public/
&lt;/span>&lt;span class="sd"> cd ./public
&lt;/span>&lt;span class="sd"> git config --local user.email &amp;#34;your@email&amp;#34; # 你的邮箱
&lt;/span>&lt;span class="sd"> git config --local user.name &amp;#34;yourname&amp;#34; # 你的用户名
&lt;/span>&lt;span class="sd"> git add .
&lt;/span>&lt;span class="sd"> git commit -m &amp;#34;GitHub Actions Auto Builder at $(date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34;
&lt;/span>&lt;span class="sd"> git push --force &amp;#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}&amp;#34; master:master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="成品">成品&lt;/h3>
&lt;p>最后的 workflow&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Blog Deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">blog-cicd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hexo build and deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout codes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup node&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;12.x&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># 若需要同步子模块的话，将下面的注释删掉即可&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c">#&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># - name: Checkout submodules&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># run: |&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># auth_header=&amp;#34;$(git config --local --get http.https://github.com/.extraheader)&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># git submodule sync --recursive&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="c"># git -c &amp;#34;http.extraheader=$auth_header&amp;#34; -c protocol.version=2 submodule update --init --force --recursive --depth=1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cache Node Dependencies&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Npm 缓存，这一步报错的话，把这部分删掉即可&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cache&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/cache@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.npm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{runner.OS}}-npm-caches-${{ hashFiles(&amp;#39;package-lock.json&amp;#39;) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> npm install hexo-cli -g
&lt;/span>&lt;span class="sd"> npm install&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Generate files&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hexo clean &amp;amp;&amp;amp; hexo generate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> git clone &amp;#34;https://${{ secrets.GH_REF }}&amp;#34; deploy_git
&lt;/span>&lt;span class="sd"> mv ./deploy_git/.git ./public/
&lt;/span>&lt;span class="sd"> cd ./public
&lt;/span>&lt;span class="sd"> git config --local user.email &amp;#34;your@email&amp;#34; # 你的邮箱
&lt;/span>&lt;span class="sd"> git config --local user.name &amp;#34;yourname&amp;#34; # 你的用户名
&lt;/span>&lt;span class="sd"> git add .
&lt;/span>&lt;span class="sd"> git commit -m &amp;#34;GitHub Actions Auto Builder at $(date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34;
&lt;/span>&lt;span class="sd"> git push --force &amp;#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}&amp;#34; master:master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="我的配置文件">我的配置文件&lt;/h2>
&lt;p>如果你还是无法理解的话，可以直接复制我的配置文件，然后修改用户名和邮箱为自己 GitHub 的用户名和邮箱。&lt;/p>
&lt;blockquote>
&lt;p>Note：请注意修改 Clone themes 中的主题链接为你所用的主题的 URL&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GitHub Auto Buider For Blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">push&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">branches&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="l">master&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">cron&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s1">&amp;#39;0 21 * * *&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">TZ&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Asia/Shanghai&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="nt">jobs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">blog-cicd&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Hexo build and deploy&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">runs-on&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ubuntu-latest&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">steps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Checkout codes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/checkout@v2&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Setup node&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/setup-node@v1.1.0&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">node-version&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;12.x&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Clone themes&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">git clone -b dev https://github.com/YunYouJun/hexo-theme-yun.git themes/yun&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Cache Node Dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">id&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cache&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">uses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">actions/cache@v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">with&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">.npm&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">${{runner.OS}}-npm-caches-${{ hashFiles(&amp;#39;package-lock.json&amp;#39;) }}&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Install dependencies&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> npm install hexo-cli -g
&lt;/span>&lt;span class="sd"> npm install
&lt;/span>&lt;span class="sd"> npm audit fix&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Generate files&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hexo clean &amp;amp;&amp;amp; hexo generate&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deploy blog&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">run&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;span class="sd"> git clone &amp;#34;https://${{ secrets.GH_REF }}&amp;#34; deploy_git
&lt;/span>&lt;span class="sd"> mv ./deploy_git/.git ./public/
&lt;/span>&lt;span class="sd"> cd ./public
&lt;/span>&lt;span class="sd"> git config --local user.email &amp;#34;xxxx&amp;#34; # 你的邮箱
&lt;/span>&lt;span class="sd"> git config --local user.name &amp;#34;RimuruW&amp;#34; # 你的用户名
&lt;/span>&lt;span class="sd"> git add .
&lt;/span>&lt;span class="sd"> git commit -m &amp;#34;GitHub Actions Auto Builder at $(date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34;
&lt;/span>&lt;span class="sd"> git push --force &amp;#34;https://${{ secrets.GH_TOKEN }}@${{ secrets.GH_REF }}&amp;#34; master:master&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>参考文档：&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/sma11black/hexo-action" target="_blank" rel="noopener"
>Hexo-Action&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://isteed.cc/posts/hexo-github-action/" target="_blank" rel="noopener"
>Lufs&amp;rsquo;s blog&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>通过 ADB 给手机刷入第三方 Recovery</title><link>https://blog.linioi.com/posts/8/</link><pubDate>Mon, 13 Apr 2020 11:46:44 +0000</pubDate><guid>https://blog.linioi.com/posts/8/</guid><description>&lt;blockquote>
&lt;p>对于大多数刷机用户而言，好用的第三方 Recovery 可以无疑可以带来许多便利&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="刷入适合你机型的第三方--recoveryhttpswapbaikebaiducomitemrecovery9995978ms1rid11417116585990428221rt-err900rt-msgunkown">刷入适合你机型的第三方 &lt;a class="link" href="https://wapbaike.baidu.com/item/Recovery/9995978?ms=1&amp;amp;rid=11417116585990428221&amp;amp;rt-err=900&amp;amp;rt-msg=unkown" target="_blank" rel="noopener"
>Recovery&lt;/a>&lt;/h2>
&lt;p>目前推荐的第三方 Recovery 有 &lt;a class="link" href="https://wiki.orangefox.tech/en/home" target="_blank" rel="noopener"
>OrangeFox&lt;/a> 和 &lt;a class="link" href="https://twrp.me/" target="_blank" rel="noopener"
>TeamWinRecoveryProject&lt;/a> （即 TWRP）&lt;/p>
&lt;p>Windows 操作系统下 ADB 环境配置请参阅&lt;a class="link" href="https://sspai.com/post/40471" target="_blank" rel="noopener"
>该链接&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>OrangeFox 是基于 TWRP 制作的。你可以理解为 TWRP 的魔改版本&lt;/p>
&lt;/blockquote>
&lt;h2 id="刷入步骤">刷入步骤&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>手机关机，&lt;strong>长按 音量减键 + 电源键&lt;/strong> 进入 &lt;code>FASTBOOT&lt;/code> 模式。用数据线把手机和电脑连接起来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>以 OrangeFox 为示例。在上述步骤的下载后会得到一个压缩包，打开该压缩包，解压其中的 &lt;code>recovery.img&lt;/code> 到任意一个位置。(压缩包是为了在有第三方 Recovery 的情况下刷入/更新 OrangeFox ，但是我们目前并没有，所以我们需要解压其中的 &lt;code>recovery.img&lt;/code> 来使用 &lt;code>fastboot&lt;/code> 刷入。)&lt;/p>
&lt;p>如果你选择使用 LR.Team 定制版 TWRP，可以选择一键刷入版，就不会有下一步&lt;del>复杂&lt;/del>的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 cmd （或者其它终端），输入 &lt;code>fastboot flash recovery 上一步解压的 recovery.img 的文件地址&lt;/code> 。以下是一个示例：&lt;/p>
&lt;pre>&lt;code>C:\Users\XXXX&amp;gt;fastboot flash recovery D:\recovery.img
Sending 'recovery' (65536 KB) OKAY [ 2.040s]
Writing 'recovery' OKAY [ 0.368s]
Finished. Total time: 2.427s
&lt;/code>&lt;/pre>&lt;p>如果出现&lt;/p>
&lt;p>&lt;code>'fastboot' 不是内部或外部命令，也不是可运行的程序或批处理文件。&lt;/code> 说明你没有配置好 ADB 环境。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在上一步的状态下，&lt;strong>长按 音量加键 + 电源键&lt;/strong> 进入 &lt;code>Recovery&lt;/code> 模式。（当然你也可以使用 &lt;code>fastboot reboot recovery&lt;/code> 来进入 &lt;code>Recovery&lt;/code> 模式，但是我没成功过（&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般情况下，会出现一个英文界面，从上往下依次写着 &lt;code>Mount&lt;/code> &lt;code>Dectypt&lt;/code> ，这是让你解密 Data 。输入你的锁屏密码即可，记得输入完后点击右下角的勾。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>经过十秒左右秒钟的解密后，不出意外会显示欢迎界面，点击屏幕下方勾即可。然后就是挂载 &lt;code>System&lt;/code> 的界面，滑动下方滑块即可。最后就进入了主界面。下图依次是 欢迎界面 &amp;ndash;&amp;gt; 挂载 &lt;code>System&lt;/code> 界面 &amp;ndash;&amp;gt; 主界面。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/06/5bea670e5d857.png" alt="欢迎界面" />
&lt;img src="https://global.cdn.mikupics.cn/2020/04/06/1da0444377e5b.png" alt="挂载 System 界面" />
&lt;img src="https://global.cdn.mikupics.cn/2020/04/03/9e1ab647cc3a6.png" alt="主界面" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果需要改简体中文，点击底部的 &lt;code>Menu&lt;/code> &amp;ndash;&amp;gt; 右上角的齿轮图标 &amp;ndash;&amp;gt; &lt;code>Regional&lt;/code> &amp;ndash;&amp;gt; 点击 &lt;code>Language&lt;/code> 下的 &lt;code>English&lt;/code> ，选择 &lt;code>Chinese Simplified&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="一点小小的补充">一点小小的补充&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>给手机刷入 Recovery ，电脑不必是 Windows 系统。Linux 发行版同样可以安装相应软件包然后输入上述指令安装，这里不再赘述，请参阅 &lt;a class="link" href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noopener"
>Google 开发者文档&lt;/a>。&lt;strong>注意，Linux 下执行 &lt;code>fastboot&lt;/code> 需要在 ROOT 用户下执行。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>给手机刷入 Recovery 其实也不需要电脑，用另一部手机借助 &lt;a class="link" href="https://play.google.com/store/apps/details?id=com.termux" target="_blank" rel="noopener"
>Termux&lt;/a> 也是同样可以的。在 Termux 配置好 ADB 环境后，照上述步骤刷入即可。安装 Termux 的那部手机无需 ROOT。&lt;/p>
&lt;/li>
&lt;/ol></description></item><item><title>Violet 机型 PE/Plus 刷入教程</title><link>https://blog.linioi.com/posts/10/</link><pubDate>Mon, 13 Apr 2020 11:44:52 +0000</pubDate><guid>https://blog.linioi.com/posts/10/</guid><description>&lt;blockquote>
&lt;p>PE 即 Pixel Experience。Violet 为 Redmi Note 7 Pro 的机型代号，同时，该机型也是 PE 现维护机型之一。&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>注意：由于 Violet 机型 PE/Plus 已更换维护者，本教程刷入方法已作废，现 PE/Plus 刷入方法请参照 &lt;a class="link" href="https://blog.linioi.com/posts/11/" target="_blank" rel="noopener"
>Violet 通用刷机教程&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>PE/Plus 刷入教程又更新了！！&lt;/strong>
原先的&lt;a class="link" href="https://www.coolapk.com/feed/15857831?shareKey=OTdjZWMwNTk2N2E3NWU5M2M5ZmU~&amp;amp;shareUid=2815584&amp;amp;shareFrom=com.coolapk.market_10.0.4" target="_blank" rel="noopener"
>刷入教程&lt;/a>因为 Dyneteve 一番操作，目前已经完全没有作用……&lt;/p>
&lt;p>之所以写这篇教程，是因为我发现 PE/Plus 这么优秀的 ROM 推出后竟鲜见人上车…故此，我决定再写一篇刷入教程，&lt;del>拖你们下水&lt;/del> 带你们上车&lt;/p>
&lt;blockquote>
&lt;p>对于有一定英语水平的用户，直接看 Dyneteve 的 &lt;a class="link" href="https://telegra.ph/FlashingUpdating-PE-to-the-latest-version-using-AOSP-Recovery-v3-04-10-2" target="_blank" rel="noopener"
>Flash Guide&lt;/a> 即可。&lt;/p>
&lt;/blockquote>
&lt;h2 id="刷前需知">刷前需知&lt;/h2>
&lt;ul>
&lt;li>刷入 ROM 前，请确保你的设备已解锁 Bootloader。&lt;/li>
&lt;li>建议在刷入前退出 Google 帐号和小米帐号，以免卡 Google 开机验证。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>本文会提供两种刷入方式，请根据自己需求选择。
阅读本教程建议搭配这篇&lt;a class="link" href="https://riwihow.github.io/2020/04/03/How-to-flash-on-violet/" target="_blank" rel="noopener"
>教程&lt;/a>，食用效果更佳&lt;/p>
&lt;/blockquote>
&lt;h3 id="方法一">方法一：&lt;/h3>
&lt;blockquote>
&lt;p>如果你电脑是 Linux 发行版，请忽略此方法。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>下载 &lt;a class="link" href="https://t.me/pixelexperienceviolet/197641" target="_blank" rel="noopener"
>AOSP Recovery Flasher v4&lt;/a> 和 &lt;a class="link" href="https://download.pixelexperience.org/changelog/violet/PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip" target="_blank" rel="noopener"
>PE/Plus 刷机包&lt;/a>
&lt;em>如果你不使用 Telegram，可以从以下两个链接中选择一个下载。&lt;/em>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/RimuruW/qingxumo.github.io/releases/download/0.0.1/AOSP.Recovery.ROM.Flasher.V4.zip" target="_blank" rel="noopener"
>GitHub&lt;/a> （推荐）&lt;/li>
&lt;li>&lt;a class="link" href="https://drive.google.com/file/d/1-Gp1Mp_nHsH58zFc_iYMWlR3COgRAgcz/view?usp=drivesdk" target="_blank" rel="noopener"
>Google Drive&lt;/a> （不推荐，需要审核）&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>解压上面下载的 AOSP Recovery Flasher v4 至电脑某个不含中文的目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>复制下载好的刷机包至第 2 步解压后生成文件夹中 sideload 文件夹下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>手机长按电源键和音量-进入 Fastboot 模式并用数据线连接电脑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开第 2 步解压后生成的文件夹，双击 flashme.bat。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>坐和放宽，等待 Recovery 和 Vendor 刷入完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷入完成后，长按电源键和音量+ 进入 AOSP Recovery。若手机显示 &lt;em>no command&lt;/em> 或者&lt;em>没有指令&lt;/em>，请按一次音量 + 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用音量键控制光标，使用电源键选择 &lt;strong>Apply update from ADB&lt;/strong> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 Windows 命令行窗口回车后，选择要 sideload 的文件，输入文件前面的数字，回车，等待刷入到 47%，以下是一个示例。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>Press POWER + VOL UP till you get to the redmi screen after you get there release after 2s
Press enter after you put your recovery into sideload and the rom into the sideload folder
Check your device you might need to press yes to continue flashing after 47
To select the file press press the number in front of it
[1]. PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip
Enter a file to load: 1
You selected PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip
&lt;/code>&lt;/pre>&lt;ol start="10">
&lt;li>
&lt;p>输入到 47% 时，AOSP Recovery 会提示验证失败，是否继续刷入。使用手机的音量键和电源键，在上方的选项中选择 Yes，等待刷入完成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷入完成后，在 AOSP Recovery 中选择 &lt;strong>Wipe data/factory reset&lt;/strong> ,选择 &lt;strong>Factory data reset&lt;/strong> 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Factory Reset 完成后，选择 &lt;strong>Reboot system now&lt;/strong> 开机。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>至此，刷入完成。&lt;/p>
&lt;h3 id="方法二">方法二：&lt;/h3>
&lt;ol>
&lt;li>下载 &lt;a class="link" href="https://t.me/pixelexperienceviolet/197641" target="_blank" rel="noopener"
>AOSP Recovery Flasher v4&lt;/a> 和 &lt;a class="link" href="https://download.pixelexperience.org/changelog/violet/PixelExperience_Plus_violet-10.0-20200410-1304-OFFICIAL.zip" target="_blank" rel="noopener"
>PE/Plus 刷机包&lt;/a>
&lt;em>如果你不使用 Telegram，可以从以下两个链接中选择一个下载。&lt;/em>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/RimuruW/qingxumo.github.io/releases/download/0.0.1/AOSP.Recovery.ROM.Flasher.V4.zip" target="_blank" rel="noopener"
>GitHub&lt;/a> （推荐）&lt;/li>
&lt;li>&lt;a class="link" href="https://drive.google.com/file/d/1-Gp1Mp_nHsH58zFc_iYMWlR3COgRAgcz/view?usp=drivesdk" target="_blank" rel="noopener"
>Google Drive&lt;/a> （不推荐，需要审核）&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>
&lt;p>解压 AOSP Recovery Flasher v4 到手机任意一个你可以找到的目录。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开你第 2 步解压得到的文件夹。
文件夹前几层结构大致如下：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>├── flashme.bat
├── images
│   ├── BTFM.bin
│   ├── NON-HLOS.bin
│   ├── abl.elf
│   ├── aop.mbn
│   ├── cmnlib.mbn
│   ├── cmnlib64.mbn
│   ├── devcfg.mbn
│   ├── dspso.bin
│   ├── dtbo.img
│   ├── hyp.mbn
│   ├── imagefv.elf
│   ├── km4.mbn
│   ├── multi_image.mbn
│   ├── qupv3fw.elf
│   ├── recovery.img
│   ├── storsec.mbn
│   ├── tz.mbn
│   ├── uefi_sec.mbn
│   ├── vbmeta.img
│   ├── vendor.img
│   ├── xbl.elf
│   └── xbl_config.elf
├── sideload
├── t.md
└── windows
├── AdbWinApi.dll
├── AdbWinUsbApi.dll
├── NOTICE.txt
├── adb.exe
├── api
├── dmtracedump.exe
├── etc1tool.exe
├── fastboot.exe
├── hprof-conv.exe
├── lib64
├── libwinpthread-1.dll
├── make_f2fs.exe
├── mke2fs.conf
├── mke2fs.exe
├── sideload.bat
├── source.properties
├── sqlite3.exe
└── systrace
&lt;/code>&lt;/pre>&lt;p>找到 images 文件夹下 vendor.img 文件，并解压至任意一个你可以找到的目录下。&lt;/p>
&lt;ol start="4">
&lt;li>手机参照&lt;a class="link" href="https://blog.linioi.com/posts/8/" target="_blank" rel="noopener"
>此教程&lt;/a>刷入第三方 Recovery&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>据反馈，使用 TWRP 刷入可能出现不开机情况。
建议使用 OrangeFox 刷入。&lt;/p>
&lt;/blockquote>
&lt;ol start="5">
&lt;li>
&lt;p>手机长按音量+和电源键进入第三方 Recovery。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在第三方 Recovery 中点击清除-高级清除。勾选 Davilk Cache + Cache + Data + System，滑动清除。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按返回键返回主界面，选择安装，找到你解压的 vendor.img 刷入到 Vendor 分区。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>返回到安装界面，找到你下载的 PE/Plus 刷机包，滑动刷入。&lt;strong>不要勾选签名校验和自动重启&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>按返回键回到主界面，选择清除-格式化 Data。输入 yes 确定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PE/Plus 会将 Recovery 替换成 AOSP Recovery。如果不想 Recovery 被替换，请在开机前刷入 Magisk。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>刷入教程至此结束。&lt;/p>
&lt;p>&lt;strong>AOSP Recovery 现证实可以刷入 Magisk Installer&lt;/strong>
&lt;strong>如果需要刷入 Magisk，直接在 AOSP Recovery 中刷入即可&lt;/strong>&lt;/p>
&lt;h2 id="不借助-recovery-刷入-magisk">不借助 Recovery 刷入 Magisk&lt;/h2>
&lt;p>解压 PE 刷机包，结构大致如下：&lt;/p>
&lt;pre>&lt;code>├── META-INF
│   └── com
│   ├── android
│   │   ├── metadata
│   │   └── otacert
│   └── google
│   └── android
│   ├── update-binary
│   └── updater-script
├── boot.img
├── firmware-update
│   ├── BTFM.bin
│   ├── NON-HLOS.bin
│   ├── abl.elf
│   ├── aop.mbn
│   ├── cmnlib.mbn
│   ├── cmnlib64.mbn
│   ├── devcfg.mbn
│   ├── dspso.bin
│   ├── dtbo.img
│   ├── hyp.mbn
│   ├── imagefv.elf
│   ├── km4.mbn
│   ├── multi_image.mbn
│   ├── qupv3fw.elf
│   ├── storsec.mbn
│   ├── tz.mbn
│   ├── uefi_sec.mbn
│   ├── vbmeta.img
│   ├── xbl.elf
│   └── xbl_config.elf
├── install
│   └── bin
│   ├── backuptool.functions
│   └── backuptool.sh
├── system.new.dat.br
├── system.patch.dat
└── system.transfer.list
&lt;/code>&lt;/pre>&lt;ol>
&lt;li>找到其中的 boot.img 文件，复制至手机任何一个你可以找到的目录。&lt;/li>
&lt;li>下载并安装 Magisk Manager，打开 Magisk Manager，点击 Magisk 旁的安装，点击“修补一个文件”。&lt;/li>
&lt;li>选择你解压的 boot.img 文件，等待 Magisk Manager 修补完成。修补后的文件会自动存放于 Download 文件夹中。你需要将该文件传输至电脑任意一个你可以找到的目录。&lt;/li>
&lt;li>配置 ADB 环境，手机进入 Fastboot 模式并连接电脑，电脑输入 &lt;code>fastboot flash boot boot.img&lt;/code>。输入完后回车。
&lt;strong>其中， boot.img 需要替换为你 boot.img 的文件地址。&lt;/strong>
如果你不知道怎么获取文件地址，或者觉得太过麻烦，&lt;em>你其实只需要将文件用鼠标拖入命令框&lt;/em>。&lt;/li>
&lt;li>手机开机，享受你的 Magisk 吧~~&lt;/li>
&lt;/ol></description></item><item><title>如何在 Redmi Note 7 Pro 上刷机？</title><link>https://blog.linioi.com/posts/11/</link><pubDate>Fri, 03 Apr 2020 11:56:06 +0000</pubDate><guid>https://blog.linioi.com/posts/11/</guid><description>&lt;p>拿到手机后干什么？刷机！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>如果你的设备出现损坏，我不会对你的设备负责！&lt;/p>
&lt;p>如果你的设备出现损坏，我不会对你的设备负责！&lt;/p>
&lt;p>如果你的设备出现损坏，我不会对你的设备负责！&lt;/p>
&lt;/blockquote>
&lt;p>刷机前请先看看最下面的乱七八糟的问题（&lt;/p>
&lt;p>由于 Dyneteve 的骚操作，本篇文章不针对 PE 进行说明。如果你是为了刷入 PE ，请点击此&lt;a class="link" href="https://blog.linioi.com/posts/10/" target="_blank" rel="noopener"
>链接&lt;/a>来刷入。&lt;/p>
&lt;blockquote>
&lt;p>Redmi Note 7 Pro，是 Redmi 于 2019-3-18 发布的手机。机型代号为 &lt;code>violet&lt;/code> 。&lt;/p>
&lt;/blockquote>
&lt;h2 id="一得到这部手机">一、得到这部手机&lt;/h2>
&lt;p>小米商城已经没有了，去其它地方看看吧（&lt;/p>
&lt;h2 id="二解锁-bootloader">二、解锁 Bootloader&lt;/h2>
&lt;p>前往&lt;a class="link" href="https://www.miui.com/unlock/index.html" target="_blank" rel="noopener"
>小米官方解锁页面&lt;/a>申请权限并根据提示解锁。&lt;/p>
&lt;h2 id="三下载刷机所需文件">三、下载刷机所需文件&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Android Debug Bridge&lt;/p>
&lt;blockquote>
&lt;p>Android 调试桥 (adb) 是一种功能多样的命令行工具，可让您与设备进行通信。adb 命令可用于执行各种设备操作（例如安装和调试应用），并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。来自 &lt;a class="link" href="https://developer.android.com/studio/command-line/adb" target="_blank" rel="noopener"
>Google 官方页面&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>具体下载和配置可参考少数派的&lt;a class="link" href="https://sspai.com/post/40471" target="_blank" rel="noopener"
>这篇&lt;/a>文章。&lt;/strong>&lt;/p>
&lt;p>如果你使用一键刷入之类的应用，则不需要此操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recovery&lt;/p>
&lt;p>目前我只推荐两个 Recovery：&lt;a class="link" href="https://orangefox.download/zh-CN/device/violet" target="_blank" rel="noopener"
>OrangeFox&lt;/a> 和 &lt;a class="link" href="https://pan.baidu.com/s/1ASj4JaqCQBOdXF04gC8Y7Q" target="_blank" rel="noopener"
>LR.Team 定制版 TWRP&lt;/a>（提取码：xipd）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>底包&lt;/p>
&lt;p>前往&lt;a class="link" href="https://xiaomifirmwareupdater.com/" target="_blank" rel="noopener"
>这里&lt;/a>下载。一般来说，选择最新的开发版底包即可，除非 ROM 作者有特殊要求。&lt;/p>
&lt;p>有的系统自带底包，我们可以不刷入底包。&lt;/p>
&lt;p>如图，在 &lt;code>Device&lt;/code> 那搜索并选择 &lt;code>violet&lt;/code> ，点击 &lt;code>Download&lt;/code> ，在跳转的页面中选择你需要的底包，点击 &lt;code>Download&lt;/code> 来下载。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/24/852c32cb62ffa.png" alt="" />&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/24/e39efa0905324.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷机包&lt;/p>
&lt;p>看各位喜好啦~~&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="四刷入-recovery">四、刷入 Recovery&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>手机关机，&lt;strong>长按 音量减键 + 电源键&lt;/strong> 进入 &lt;code>FASTBOOT&lt;/code> 模式。用数据线把手机和电脑连接起来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这里我以 OrangeFox 为示例。在上述步骤的下载后会得到一个压缩包，打开该压缩包，解压其中的 &lt;code>recovery.img&lt;/code> 到任意一个位置。(压缩包是为了在有第三方 Recovery 的情况下刷入/更新 OrangeFox ，但是我们目前并没有，所以我们需要解压其中的 &lt;code>recovery.img&lt;/code> 来使用 &lt;code>fastboot&lt;/code> 刷入。)&lt;/p>
&lt;p>如果你选择使用 LR.Team 定制版 TWRP，可以选择一键刷入版，就不会有下一步&lt;del>复杂&lt;/del>的操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开 cmd （或者其它终端），输入 &lt;code>fastboot flash recovery 上一步解压的 recovery.img 的文件地址&lt;/code> 。以下是一个示例：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>C:\Users\XXXX&amp;gt;fastboot flash recovery D:\recovery.img
Sending 'recovery' (65536 KB) OKAY [ 2.040s]
Writing 'recovery' OKAY [ 0.368s]
Finished. Total time: 2.427s
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>如果出现 &lt;code>'fastboot' 不是内部或外部命令，也不是可运行的程序或批处理文件。&lt;/code> 说明你没有配置好 ADB 环境。&lt;/p>
&lt;/blockquote>
&lt;ol start="4">
&lt;li>
&lt;p>在上一步的状态下，&lt;strong>长按 音量加键 + 电源键&lt;/strong> 进入 &lt;code>Recovery&lt;/code> 模式。（当然你也可以使用 &lt;code>fastboot reboot recovery&lt;/code> 来进入 &lt;code>Recovery&lt;/code> 模式，但是我没成功过（&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般情况下，会出现一个英文界面，从上往下依次写着 &lt;code>Mount&lt;/code> &lt;code>Dectypt&lt;/code> ，这是让你解密 Data 。输入你的锁屏密码即可，记得输入完后点击右下角的勾。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>经过十秒左右秒钟的解密后，不出意外会显示欢迎界面，点击屏幕下方勾即可。然后就是挂载 &lt;code>System&lt;/code> 的界面，滑动下方滑块即可。最后就进入了主界面。下图依次是 欢迎界面 &amp;ndash;&amp;gt; 挂载 &lt;code>System&lt;/code> 界面 &amp;ndash;&amp;gt; 主界面。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/06/5bea670e5d857.png" alt="欢迎界面" />
&lt;img src="https://global.cdn.mikupics.cn/2020/04/06/1da0444377e5b.png" alt="挂载 System 界面" />
&lt;img src="https://global.cdn.mikupics.cn/2020/04/03/9e1ab647cc3a6.png" alt="主界面" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果需要改简体中文，点击底部的 &lt;code>Menu&lt;/code> &amp;ndash;&amp;gt; 右上角的齿轮图标 &amp;ndash;&amp;gt; &lt;code>Regional&lt;/code> &amp;ndash;&amp;gt; 点击 &lt;code>Language&lt;/code> 下的 &lt;code>English&lt;/code> ，选择 &lt;code>Chinese Simplified&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="五刷入-rom">五、刷入 ROM&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>在上一步的状态下，返回主界面，点击下方的 &lt;code>Menu&lt;/code> &amp;ndash;&amp;gt; &lt;code>Manage Parttions&lt;/code> &amp;ndash;&amp;gt; 选择 &lt;code>Data&lt;/code> &amp;ndash;&amp;gt; 点击右下方的勾 &amp;ndash;&amp;gt; 点击 &lt;code>Format Data&lt;/code> &amp;ndash;&amp;gt; 输入 &lt;code>yes&lt;/code> 来格式化 Data 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在上一步的状态下，回到主界面，点击下方的 &lt;code>Menu&lt;/code> &amp;ndash;&amp;gt; &lt;code>Reboot&lt;/code> &amp;ndash;&amp;gt; &lt;code>Recovery&lt;/code> 来重启一次 Recovery 。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重启到 Recovery 后，点击下方的 &lt;code>Wipe&lt;/code> &amp;gt; 选择你想选择清除的分区（以下是一个示例） &amp;gt; 滑动下方滑块来清除数据。清除完成后再次重启一次 Recovery 。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/03/951d19cd95606.png" alt="示例" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过数据线将刷机包，底包传到手机。先选择底包，滑动下方滑块来刷入，再刷入系统（有的系统自带底包，我们不需要额外刷入底包）。刷入完成后就可以重启到系统。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="六φ">六、φ(゜▽゜*)♪&lt;/h2>
&lt;p>不出意外，我们已经成功刷入了一个系统！！！&lt;/p>
&lt;h2 id="七乱七八糟的问题">七、乱七八糟的问题&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>重启到 Recovery 后显示 &lt;code>The system has been destoryed&lt;/code> （可能只会出现在官方 MIUI 系统上）？&lt;/p>
&lt;p>这个与 AVB 2.0 有关。具体请参见 &lt;a class="link" href="https://source.android.com/security/verifiedboot/avb" target="_blank" rel="noopener"
>Google 官方说明&lt;/a>。&lt;/p>
&lt;p>解决方法是打开你下载的刷机包（只要不是官方 MIUI 的刷机包），解压 &lt;code>vbmeta.img&lt;/code> （可能在 &lt;code>/firmware-update&lt;/code> 下）到任意一个位置。手机进入 &lt;code>FASTBOOT&lt;/code> 模式，电脑打开 cmd 输入 &lt;code>fastboot flash vbmeta 解压的 vbmeta.img 的文件地址&lt;/code> ，等待刷入完成，重启到 Recovery 即可。以下是一条示例命令：&lt;/p>
&lt;pre>&lt;code>C:\Users\XXXX&amp;gt;fastboot flash vbmeta D:\vbmeta.img
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>发现 Recovery 被替换？&lt;/p>
&lt;p>刷入 &lt;a class="link" href="https://github.com/topjohnwu/Magisk/releases" target="_blank" rel="noopener"
>Magisk&lt;/a> 。（如果你不想使用 Magisk，可以试试 OrangeFox 的防止还原 Recovery 的功能，在 &lt;code>设置&lt;/code> &amp;ndash;&amp;gt; &lt;code>OTA&lt;/code> 下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Google 开机向导无法跳过？&lt;/p>
&lt;p>看&lt;a class="link" href="https://bbs.letitfly.me/d/856" target="_blank" rel="noopener"
>这里&lt;/a>。（在刷机前退出原先系统登录的 Google 账户就行啦~&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 Dyneteve 的系统线刷到 MIUI 出现 &lt;code>The system has destoryed&lt;/code> ？&lt;/p>
&lt;p>找售后！！！&lt;/p>
&lt;p>你可能线刷选择了上锁（&lt;/p>
&lt;p>所以说，刷过 Dyneteve 的系统后，回 MIUI &lt;strong>千万不能上锁&lt;/strong>（（（（（&lt;/p>
&lt;/li>
&lt;li>
&lt;p>刷机后第一次开机无限重启到 Recovery ？&lt;/p>
&lt;p>大概率是你没格式化 Data （建议去格式化一下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recovery 乱码？&lt;/p>
&lt;ol>
&lt;li>格式化 Data&lt;/li>
&lt;li>换 Recovery&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>Google Camera 一直停止运行？&lt;/p>
&lt;p>如果你用的是基于 LOS 的系统的话，那么停止运行可能是因为你的系统中没有 GApps 。选择以下的其中之一从 Recovery 刷入即可：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;a class="link" href="https://opengapps.org/" target="_blank" rel="noopener"
>OpenGApps&lt;/a>，选择 &lt;code>ARM64&lt;/code> &lt;code>pico&lt;/code> ，&lt;code>Android&lt;/code> 那一列根据你的系统的安卓版本选择。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://nikgapps.github.io/" target="_blank" rel="noopener"
>NikGApps&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://forum.xda-developers.com/android/software/custom-bitgapps-android-t4012165/post81060589#post81060589" target="_blank" rel="noopener"
>BiTGApps&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="https://microg.org/" target="_blank" rel="noopener"
>MicroG&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>如果你确定已经安装了 GApps，仍然停止运行，那么可以换一个 Google Camera 的版本试试。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>DD 指令用法详解</title><link>https://blog.linioi.com/posts/6/</link><pubDate>Sun, 29 Mar 2020 23:42:43 +0000</pubDate><guid>https://blog.linioi.com/posts/6/</guid><description>&lt;blockquote>
&lt;p>平常用 dd 命令用的比较少，干脆记一点关于 dd 命令的笔记，自己之后可以看看&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;h2 id="dd-指令的解释">dd 指令的解释&lt;/h2>
&lt;p>dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。&lt;/p>
&lt;blockquote>
&lt;p>注意：指定数字的地方若以下列字符结尾，则乘以相应的数字
例如&lt;code>b=512；c=1；k=1024；w=2&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>参数注释：&lt;/p>
&lt;ul>
&lt;li>if=&amp;lt;文件名&amp;gt;：输入文件名，缺省为标准输入。即指定源文件。&lt;code>&amp;lt; if=input file &amp;gt;&lt;/code>&lt;/li>
&lt;li>of=&amp;lt;文件名&amp;gt;：输出文件名，缺省为标准输出。即指定目的文件。&lt;code>&amp;lt; of=output file &amp;gt;&lt;/code>&lt;/li>
&lt;li>ibs=&lt;!-- raw HTML omitted -->：一次读入bytes个字节，即指定一个块大小为bytes个字节。&lt;/li>
&lt;li>obs=&lt;!-- raw HTML omitted -->：一次输出bytes个字节，即指定一个块大小为bytes个字节。&lt;/li>
&lt;li>bs=&lt;!-- raw HTML omitted -->：同时设置读入/输出的块大小为bytes个字节。&lt;/li>
&lt;li>cbs=&lt;!-- raw HTML omitted -->：一次转换bytes个字节，即指定转换缓冲区大小。&lt;/li>
&lt;li>skip=&lt;!-- raw HTML omitted -->：从输入文件开头跳过blocks个块后再开始复制。&lt;/li>
&lt;li>seek=&lt;!-- raw HTML omitted -->：从输出文件开头跳过blocks个块后再开始复制。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。&lt;/li>
&lt;li>conv=conversion：用指定的参数转换文件。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>ascii：转换ebcdic为ascii
ebcdic：转换ascii为ebcdic
ibm：转换ascii为alternate ebcdic
block：把每一行转换为长度为cbs，不足部分用空格填充
unblock：使每一行的长度都为cbs，不足部分用空格填充
lcase：把大写字符转换为小写字符
ucase：把小写字符转换为大写字符
swab：交换输入的每对字节
noerror：出错时不停止
notrunc：不截短输出文件
sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。&lt;/p>
&lt;/blockquote>
&lt;h2 id="dd指令应用实例">dd指令应用实例&lt;/h2>
&lt;ul>
&lt;li>将本地的/dev/hdb整盘备份到/dev/hdd
&lt;code>#dd if=/dev/hdb of=/dev/hdd&lt;/code>&lt;/li>
&lt;li>将/dev/hdb全盘数据备份到指定路径的image文件
&lt;code>#dd if=/dev/hdb of=/root/image&lt;/code>&lt;/li>
&lt;li>将备份文件恢复到指定盘
&lt;code>#dd if=/root/image of=/dev/hdb&lt;/code>&lt;/li>
&lt;li>备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径
&lt;code>#dd if=/dev/hdb | gzip &amp;gt; /root/image.gz&lt;/code>&lt;/li>
&lt;li>将压缩的备份文件恢复到指定盘
&lt;code>#gzip -dc /root/image.gz | dd of=/dev/hdb&lt;/code>&lt;/li>
&lt;li>备份与恢复MBR
备份磁盘开始的512个字节大小的MBR信息到指定文件：
&lt;code>#dd if=/dev/hda of=/root/image count=1 bs=512&lt;/code>
恢复：
&lt;code>#dd if=/root/image of=/dev/had&lt;/code>
将备份的MBR信息写到磁盘开始部分&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>count=1指仅拷贝一个块；bs=512指块大小为512个字节。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>备份软盘
&lt;code>#dd if=/dev/fd0 of=disk.img count=1 bs=1440k&lt;/code>
(即块大小为1.44M)&lt;/li>
&lt;li>拷贝内存内容到硬盘
&lt;code>#dd if=/dev/mem of=/root/mem.bin bs=1024&lt;/code>
(指定块大小为1k)&lt;/li>
&lt;li>拷贝光盘内容到指定文件夹，并保存为cd.iso文件
&lt;code>#dd if=/dev/cdrom(hdc) of=/root/cd.iso&lt;/code>&lt;/li>
&lt;li>增加swap分区文件大小
第一步：创建一个大小为256M的文件：
&lt;code>#dd if=/dev/zero of=/swapfile bs=1024 count=262144&lt;/code>
第二步：把这个文件变成swap文件：
&lt;code>#mkswap /swapfile&lt;/code>
第三步：启用这个swap文件：
&lt;code>#swapon /swapfile&lt;/code>
第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：
&lt;code>swapfile swap swap default 0 0&lt;/code>&lt;/li>
&lt;li>销毁磁盘数据
&lt;code>#dd if=/dev/urandom of=/dev/hda1&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>注意：利用随机的数据填充硬盘，在某些必要的场合可以用来&lt;em>销毁数据&lt;/em>。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>测试硬盘的读写速度&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file&lt;span class="sb">`&lt;/span>
dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>64k &lt;span class="p">|&lt;/span> dd &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/dev/null
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。&lt;/p>
&lt;ul>
&lt;li>确定硬盘的最佳块大小：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1024&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1000000&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file
dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2048&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">500000&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file
dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4096&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">250000&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file
dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>/dev/zero &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">8192&lt;/span> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">125000&lt;/span> &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/root/1Gb.file
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。&lt;/p>
&lt;ul>
&lt;li>修复硬盘：
&lt;code>#dd if=/dev/sda of=/dev/sda&lt;/code>或&lt;code>dd if=/dev/hda of=/dev/hda&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>若硬盘较长时间(一年以上)放置不使用，磁盘上会产生magnetic flux point。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。
当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。并且这个过程是&lt;strong>安全、高效&lt;/strong>的。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>利用netcat远程备份
&lt;code>#dd if=/dev/hda bs=16065b | netcat &amp;lt; targethost-IP &amp;gt; 1234&lt;/code>
在源主机上执行此命令备份/dev/hda
&lt;code>#netcat -l -p 1234 | dd of=/dev/hdc bs=16065b&lt;/code>
在目的主机上执行此命令来接收数据并写入/dev/hdc&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">netcat -l -p &lt;span class="m">1234&lt;/span> &lt;span class="p">|&lt;/span> bzip2 &amp;gt; partition.img
netcat -l -p &lt;span class="m">1234&lt;/span> &lt;span class="p">|&lt;/span> gzip &amp;gt; partition.img
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上两条指令是目的主机指令的变化分别采用bzip2、gzip对数据进行压缩，并将备份文件保存在当前目录。&lt;/p>
&lt;ul>
&lt;li>将一个大视频文件的第i个字节的值改成0x41（大写字母A的ASCII值）
&lt;code>#echo A | dd of=bigfile seek=$i bs=1 count=1 conv=notrunc&lt;/code>&lt;/li>
&lt;li>建立linux虚拟盘，用文件模拟磁盘&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>在进行linux的实验中，如果没有多余的硬盘来做测试。则可以在linux下使用文件来模拟磁盘，以供测试目的。
其模拟过程如下所示，摘录自《Oracle数据库核心技术与实务详解－教你如何成为Oracle 10g OCP》一书。&lt;/p>
&lt;/blockquote>
&lt;p>1)以root用户创建一个ASM磁盘所在的目录。&lt;/p>
&lt;p>&lt;code>#mkdir –p /u01/asmdisks&lt;/code>&lt;/p>
&lt;p>2)通过dd命令创建6个400M大小的文件，每个文件代表一块磁盘。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>root@book u01&lt;span class="o">]&lt;/span>&lt;span class="c1"># cd asmdisks&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk1 bs=1024k count=400&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk2 bs=1024k count=400&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk3 bs=1024k count=400&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk4 bs=1024k count=400&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk5 bs=1024k count=400&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># dd if=/dev/zero of=asm_disk6 bs=1024k count=400&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>3)将这些文件与裸设备关联。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># chmod 777 asm_disk*&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop1 asm_disk1&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop2 asm_disk2&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop3 asm_disk3&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop4 asm_disk4&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop5 asm_disk5&lt;/span>
&lt;span class="o">[&lt;/span>root@book asmdisks&lt;span class="o">]&lt;/span>&lt;span class="c1"># losetup /dev/loop6 asm_disk6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：如果要删除通过dd模拟出的虚拟磁盘文件的话，直接删除模拟出的磁盘文件
（也就是asm_disk1、asm_disk2…asm_disk6）还不够，还必须执行losetup -d /dev/loopN，在这里N从1到6。否则，磁盘文件所占用的磁盘空间不能释放&lt;/p>
&lt;/blockquote></description></item><item><title>Arch Linux + Windows 双系统安装教程</title><link>https://blog.linioi.com/posts/18/</link><pubDate>Wed, 25 Mar 2020 11:56:38 +0000</pubDate><guid>https://blog.linioi.com/posts/18/</guid><description>&lt;blockquote>
&lt;p>在安装Arch Linux之前，相信你已经对它有了充分的了解
&lt;strong>这不是一个对新手友好的Linux发行版&lt;/strong>，可这并不影响它在世界各地受到热烈欢迎&lt;/p>
&lt;/blockquote>
&lt;!-- raw HTML omitted -->
&lt;blockquote>
&lt;p>&lt;strong>Note:&lt;/strong> 因为长期没有时间修改教程以适配 Arch Linux 最新变化，现暂且将该教程归档。&lt;/p>
&lt;/blockquote>
&lt;h2 id="有些话必须放在前面">有些话必须放在前面……&lt;/h2>
&lt;p>&lt;strong>无论从哪个角度看，Arch Linux 都不是一个新手友好型Linux发行版&lt;/strong>。无论你是因为什么原因选择安装 Arch Linux，我都希望你能够满足下条件：&lt;/p>
&lt;ul>
&lt;li>具有基本阅读理解水平，至少要能跟着教程来&lt;/li>
&lt;li>掌握电脑基础使用，能够正常开关机&lt;/li>
&lt;li>对电脑键盘键位和其按钮有基本了解（打字都不会的就不要打扰了）&lt;/li>
&lt;li>能够面对满屏的命令行保持基本冷静&lt;/li>
&lt;li>具有基础的英语水平，至少命令行报错的时候，你能反应过来该指令执行出现错误&lt;/li>
&lt;li>已经查阅相关资料，对 Linux 发行版和桌面环境有所了解&lt;/li>
&lt;li>有一定自主操作能力，能根据自己实际情况解决相应问题&lt;/li>
&lt;li>出现突发情况，能够自行解决或者上网查阅相关资料&lt;/li>
&lt;/ul>
&lt;p>即使目前网上的 Arch Linux 的安装教程极其繁多，Arch Wiki 也素以详尽而闻名，但是目前&lt;strong>包括本教程在内没有一个教程能保证让一个纯小白顺利安装 Arch Linux&lt;/strong>，何况是 Arch Linux + Windows 双系统。&lt;/p>
&lt;p>如果你是一个小白也不用太过担心，安装过程虽然是通过命令行一步一步操作，看似非常复杂繁琐。但是实际操作过程中你会发现，&lt;strong>大多数情况下你并不需要理解每一个步骤的原因、每一行指令的意思&lt;/strong>。一般来说，&lt;strong>安装过程也不会出现什么技术难点&lt;/strong>。&lt;/p>
&lt;p>如果你有一定的 Linux 使用经验，根据本教程，你可以轻松完成 Arch Linux + Windows 双系统的安装，部分指令可以根据你的习惯或者需求改为其他指令，本教程仅供参照。&lt;/p>
&lt;p>如果你并不是想安装双系统，只是单纯安装 Arch Linux 这一个系统，可以根据需求对教程进行改动。&lt;/p>
&lt;h2 id="为什么写这篇教程">为什么写这篇教程？&lt;/h2>
&lt;blockquote>
&lt;p>该部分内容还处于编辑中&lt;/p>
&lt;/blockquote>
&lt;h2 id="iso-镜像烧录">ISO 镜像烧录&lt;/h2>
&lt;ul>
&lt;li>Windows 建议使用 &lt;a class="link" href="http://rufus.akeo.ie/downloads/" target="_blank" rel="noopener"
>Rufus&lt;/a> 烧录镜像。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Rufus 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。麻雀虽小，五脏俱全，体积虽小，功能全面。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>注意，在某些 Linux 可用的软碟通(UItraISO)&lt;strong>不适用于&lt;/strong> Arch Linux&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>下载完成后，双击打开该文件，允许 Rufus 联网检查程序更新。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/6d1d86f6e363c.png" alt="检查更新" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入你的 U 盘，在 &lt;strong>设备&lt;/strong> 选项框中选择你的 U 盘（当然你也可以用别的设备）（以下图片均为示例）。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/0f603f3cf3f5f.png" alt="选择设备" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 &lt;strong>引导类型选择&lt;/strong> 下选择 &lt;strong>镜像文件（请选择）&lt;/strong>（默认），然后单击右侧的 &lt;strong>选择&lt;/strong> 来选择弄下载的镜像。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/f1f580a8a0ff3.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>持久分区大小&lt;/strong> 默认，&lt;strong>分区类别&lt;/strong> 请根据你的设备来进行选择。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/69aa1ec442d7a.png" alt="示例" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>格式化选项保持默认即可，单击开始来进行下一步。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/5377133faa985.png" alt="示例" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>选择 &lt;strong>以 ISO 镜像 模式写入（推荐）&lt;/strong>，单击 OK 进行下一步。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/ea1b166c824e3.png" alt="" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>单机开始来烧录镜像。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/b3191015dc98e.png" alt="示例" />&lt;/p>
&lt;/li>
&lt;li>
&lt;p>等待烧录完成即可。（下图即为烧录完成的一个示例）&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/07/7b7db13921e76.png" alt="示例" />&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Linux 使用 dd 指令 ：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash"> dd &lt;span class="k">if&lt;/span>&lt;span class="o">=&lt;/span>ISO镜像位置 &lt;span class="nv">of&lt;/span>&lt;span class="o">=&lt;/span>/dev/sdX &lt;span class="nv">bs&lt;/span>&lt;span class="o">=&lt;/span>4M
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>/dev/sdX &lt;/code>为用作启动盘的U盘标识。
输入如下指令确定获取电脑硬盘信息，所获取的信息中应该包含U盘标识
&lt;code>sudo fdisk -l&lt;/code>&lt;/p>
&lt;h2 id="目的">目的&lt;/h2>
&lt;p>话说，都准备装 Arch Linux 了，那肯定是为了 Windows+Arch Linux 双系统啊~~&lt;/p>
&lt;h2 id="启动前准备工作">启动前准备工作&lt;/h2>
&lt;p>首先打开电脑启动到 Windows。不管是 Windows XP 还是 Windows7 或 10，&lt;em>操作是一样的&lt;/em>。(话说，现在也不会有 Windows XP 的用户吧？Arch Linux 官方不支持 32 位已经很多年了……)
接着右键“我的电脑”，点击“管理”。Windows 10 默认貌似是“此电脑”（或者你把它改成了别的名字）。
总之用鼠标右键这玩意，然后点“管理”，然后在出现的界面，点“磁盘管理”。
这个界面显示的是你电脑上安装的所有存储设备的情况。
&lt;em>不止是电脑的硬盘&lt;/em>，其余如光驱和 U 盘（如果已经插入）也会在此处显示。&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/08/7fe58c1243b16.png" alt="示例" />&lt;/p>
&lt;p>一般情况下，在该界面中，深蓝色的分区是主分区，浅蓝色的分区是扩展分区，绿色的是空闲没有使用的空间。我们现在要做的是看看哪个分区里面资料少，空间大，能够空出来给我们的 Arch Linux 使用。&lt;/p>
&lt;blockquote>
&lt;p>&lt;em>以下分为两种情况处理&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>如果分区空间不是特别充裕，建议把最后一个分区空出来，即把该分区的数据全部备份到其他电脑分区然后把空出来的分区删掉。
注意，&lt;em>是删掉整个分区，不是格式化!!&lt;/em>
方法是，右键你要删除的分区，然后点击“删除卷”再确认。注意，该操作会擦除该分区的所有数据，而且过程不可逆。操作完成后该分区就会变成成绿色的“可用空间”。这就是为 Arch Linux 准备好的空间。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果你的 Windows 下的分区空闲空间足够大，则可以从空闲空间里压缩一部分空间来安装 Arch Linux。
先在磁盘管理器（上图界面）中该分区上点右键，然后点“压缩卷”，会让你输入一个数值。这个数值是以 MB 为单位，输入的是你要分割出来的空间大小。这个数值最大不能超过该分区的空闲空间大小。
然后点击确定，接着会有一个整理数据和分割的过程，等它整理完“空闲空间”出现就完成了。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>提醒：&lt;strong>不同分区压缩出来的空闲空间不会合并在一起给你用。所以，不要想着从每个分区里拿一个空间出来凑足需要的空闲空间。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>关于这个空间的大小，我认为对于初步的接触和学习来说，至少要 30G 以上。安装基本系统及其他一些后面讲到的目录，需要 15-20GB 左右，再加上一个至少相当于你内存大小，最好是内存 2 倍大的交换空间（你内存够大当然也可以不要），还有将来在 Linux 下供用户使用的空间&lt;code>/home&lt;/code>。
所以如果小于 30G 但是在 20G 以上，安装当然没有问题，不过&lt;em>基本上没有空间给用户存储数据使用了&lt;/em>。(如果你安装系统只是为了装 B 而非日用，当我没说)&lt;/p>
&lt;h2 id="禁用快速启动和安全启动">禁用快速启动和安全启动&lt;/h2>
&lt;blockquote>
&lt;p>该部分内容还处于编辑中&lt;/p>
&lt;/blockquote>
&lt;h2 id="电脑环境">电脑环境&lt;/h2>
&lt;p>进行到这一步时，我们默认你电脑目前处于以下环境中的某一种。&lt;/p>
&lt;ul>
&lt;li>电脑使用传统BIOS引导+MBR分区，且电脑已经安装一个运行正常的Windows。电脑无与Arch Linux安装有关的硬件问题。&lt;/li>
&lt;li>电脑使用UEFI引导+GPT分区，且电脑已经安装一个运行正常的Windows。电脑无与Arch Linux安装有关的硬件问题。&lt;/li>
&lt;/ul>
&lt;h2 id="启动盘使用">启动盘使用&lt;/h2>
&lt;p>首先让电脑从 U 盘启动。&lt;/p>
&lt;blockquote>
&lt;p>你问怎么从 U 盘启动？？我建议你点击此&lt;a class="link" href="https://www.baidu.com" target="_blank" rel="noopener"
>链接&lt;/a>获取帮助
如果你的电脑旧到不支持从 U 盘启动……
建议还是换台电脑吧…&lt;/p>
&lt;/blockquote>
&lt;p>从U盘启动后电脑会出现一个新界面，传统BIOS启动和UEFI启动在该界面显示结果不一样。&lt;/p>
&lt;p>BIOS 启动界面：&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/08/4cda84d1a6d0c.png" alt="BIOS" />&lt;/p>
&lt;p>​ UEFI 启动界面：&lt;/p>
&lt;p>&lt;img src="https://global.cdn.mikupics.cn/2020/04/08/303179878abc6.png" alt="UEFI" />&lt;/p>
&lt;p>无论你是哪种启动，用光标选中第一项然后回车即可启动镜像。
启动成功后你应该看到如图所示界面：
&lt;img src="https://global.cdn.mikupics.cn/2020/04/08/bf76fecd4806a.png" alt="示例" />&lt;/p>
&lt;blockquote>
&lt;p>如果未出现该提示符，则可能是启动盘出现了问题，建议重新烧录镜像…&lt;/p>
&lt;/blockquote>
&lt;h2 id="连接网络">连接网络&lt;/h2>
&lt;ul>
&lt;li>如果你能连接有线网络，则直接用网线连接&lt;/li>
&lt;li>如果你没有网线，则必须通过 WiFi 连接
在终端输入如下指令
&lt;code>wifi-menu&lt;/code>
此时电脑会自动搜索附近的可用 WiFi
剩下的就是输入 WiFi 密码，连接 WiFi 了&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;em>如果无搜索结果可能是你打错了指令或网卡挂了，你可以尝试用手机USB共享网络或插无线网卡&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果你的 WiFi 是用 &lt;em>WPA2-Enterpise&lt;/em> 验证的（输入用户名和密码连接网络），那还是放弃吧…… wifi-menu 目前貌似还不支持这个……&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>如果你没有有线网络也没有 WiFi，建议你下次安装&lt;/li>
&lt;/ul>
&lt;p>为了检测电脑是否连接上网络，我们可以输入如下指令
&lt;code>ping www.baidu.com&lt;/code>
ping 后面的网址可以是任何国内可以直连的网址。
如果已连接上网络，则电脑会疯狂输出一大堆 balabala 的结果。反之则只有简单的&lt;code>Timeout&lt;/code>报错或长时间无输出结果。
此时按&lt;code>Ctrl+C&lt;/code>以中止输出。&lt;/p>
&lt;h2 id="确定电脑的启动方式">确定电脑的启动方式&lt;/h2>
&lt;p>（&lt;em>如果你已经确定电脑启动方式则可忽略此步骤&lt;/em>）
目前电脑的启动方式只有 UEFI 启动和传统 BIOS 启动
在终端输入如下指令
&lt;code>efivar -l&lt;/code>
如果电脑疯狂输出满屏 balabala 的东西，则电脑说明是 UEFI 启动；反之则是传统 BIOS 启动。&lt;/p>
&lt;blockquote>
&lt;p>注意，不同启动方式在后续部分操作上也会有所不同!!
&lt;strong>请务必认真检测并记住自己电脑的启动方式！！&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>其实一般情况下是不需要专门步骤验证的……因为两种启动方式差距太明显…比如UEFI和传统BIOS从U盘启动的界面是不一样的。&lt;/p>
&lt;/blockquote>
&lt;h2 id="准备硬盘分区">准备硬盘分区&lt;/h2>
&lt;blockquote>
&lt;p>对于双系统而言，最麻烦的一部分无疑就是硬盘分区和双系统引导。完成这部分需要读者拥有发育健全的大脑并且有一定的自主操作能力。&lt;/p>
&lt;/blockquote>
&lt;p>你可以先输入&lt;code>fdisk -l&lt;/code>查看当前电脑硬盘的状态。
输出结果中的/dev/sdX 代表的是你电脑的硬盘。&lt;/p>
&lt;blockquote>
&lt;p>（&lt;em>输出结果不可能真的出现&lt;code>/dev/sdX&lt;/code>，此处的 X 只是代表如 a、b、c 这样的符号，如数学中用字母代替数的作用&lt;/em>）&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果你的电脑只有一个硬盘，你的输出结果应该仅含 &lt;code>/dev/sda&lt;/code>和&lt;code>/dev/sdb&lt;/code>。
其中，&lt;code>/dev/sda&lt;/code> 代表的是你电脑的硬盘，&lt;code>/dev/sdb &lt;/code>代表的是你的启动盘（U 盘）。
&lt;code>/dev/sda&lt;/code> 后的数字，如&lt;code>/dev/sda1&lt;/code>，则代表&lt;code>/dev/sda&lt;/code> 这个磁盘下的第几个分区。
如果这是一块新硬盘或者已经清空的硬盘的话，你大概看不到 &lt;code>/dev/sda1 &lt;/code>这样的分区。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>如果你看到了一些其它的东西,
比如&lt;code>/dev/nvme0n1&lt;/code> 这样的，则代表你的电脑上有一块 NVMe SSD
如果是&lt;code>/dev/mmcblk0&lt;/code> 这样的，则代表你的电脑上有 eMMC 存储
此时你的启动盘可能会被归为 &lt;code>/dev/sda &lt;/code>，所以&lt;strong>下面要根据你自己实际情况操作&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;del>再有其他情况我也不知道了&lt;/del>&lt;/p>
&lt;h2 id="对硬盘进行分区">对硬盘进行分区&lt;/h2>
&lt;p>在终端输入如下指令
&lt;code>cfdisk /dev/sda&lt;/code>
此时屏幕应该显示你电脑的第一块硬盘的信息。
同时，屏幕底部会显示几个［xxx］，其中有&lt;/p>
&lt;pre>&lt;code>[ Delete ] [ New ] [ Quit ] [ Help ] [ Write ] [ Dump ]
&lt;/code>&lt;/pre>&lt;p>这几个［xxx］的意思分别是&lt;/p>
&lt;pre>&lt;code>[删除] [新建] [退出] [帮助] [写入] [转储]
&lt;/code>&lt;/pre>&lt;p>（如果你有尚可的英语水平，你应该可以看懂的）&lt;/p>
&lt;blockquote>
&lt;p>如果你电脑有多块硬盘且需要对非第一块硬盘进行分区，则应该指明是是哪块硬盘。如，需要对第二块硬盘进行分区，你的指令应该为&lt;code>cfdisk /dev/sdb&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>在硬盘信息处，应该出现一个绿色的&lt;code>Free space&lt;/code>，这个就是你在 Windows 中压缩给 Arch Linux 的空间。
将光标通过键盘上下方向键移至&lt;code>Free space&lt;/code>，再通过键盘左右方向键选择&lt;code>[New]&lt;/code>，以新建分区。&lt;/p>
&lt;blockquote>
&lt;p>新建分区需要手动输入分区大小。
例如新建一个30G大小的分区，你应该将光标通过键盘上下方向键移至&lt;code>Free space&lt;/code>，再通过键盘左右方向键选择&lt;code>[New]&lt;/code>，敲回车后输入&lt;code>30G&lt;/code>，然后回车确认&lt;/p>
&lt;/blockquote>
&lt;p>对于双系统来说，你应该分以下几个区&lt;/p>
&lt;ul>
&lt;li>&lt;code>/mnt&lt;/code>分区，即根目录，用来存储系统和将来安装的软件，这个分区一般需要20G-50G，根据你的需求和剩余空间大小而定。&lt;/li>
&lt;li>&lt;code>/boot&lt;/code>分区，用来存储启动信息，该分区一般200M足够。
&lt;strong>UEFI引导在这时不要分出&lt;code>/boot&lt;/code>分区，因为要双系统启动需要把Windows的EFI分区挂载到&lt;code>/boot&lt;/code>上。&lt;/strong>&lt;/li>
&lt;li>&lt;code>/swap&lt;/code>分区，交换分区，相当于Windows的虚拟内存。该分区大小视电脑内存大小而定。电脑小于或等于2G内存则建议设为内存大小的2倍及以上(不过太大也没有意义)。电脑内存大于2G可以设置为内存大小。如果你的内存足够大，也可以考虑不分这个区&lt;/li>
&lt;li>&lt;code>/home&lt;/code>分区，即用户分区，用于存储用户的数据。该分区是用户自己数据存储的地方，所以建议把磁盘剩余的所有空间都留给这个分区。&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果电脑是传统BIOS启动，选择&lt;code>[ New ]&lt;/code>回车后有可能需要选择建立&lt;code>主分区&lt;/code>还是&lt;code>扩展分区&lt;/code>。(该情形会在硬盘中没有分区或者主分区不足4个时询问。如果硬盘已经有4个主分区则不会询问，默认建立扩展分区。)
EFI启动可以建立无限个主分区，所以不会询问，直接建立主分区。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>原则上尽量使用主分区。如果主分区用尽，建立扩展分区时注意&lt;strong>不要修改分区大小&lt;/strong>，直接回车。因为扩展分区本身&lt;em>不是一个分区&lt;/em>。
回车后会发现扩展分区下的硬盘还是剩余空间，只是被划分到扩展分区下了。&lt;/p>
&lt;/blockquote>
&lt;p>按上面建议的分区大小，分别建立四个分区后，选择&lt;code>[ Write ]&lt;/code>写入再选择&lt;code>[ Quit ]&lt;/code>退出。退出时你需要输入&lt;code>yes&lt;/code>确认。&lt;em>输入完整的&lt;code>yes&lt;/code>不是输入一个&lt;code>y&lt;/code>&lt;/em>。&lt;/p>
&lt;h2 id="挂载分区">挂载分区&lt;/h2>
&lt;p>在终端输入如下指令以检查分区情况：
&lt;code>fdisk -l&lt;/code>
此时屏幕应该显示你当前电脑的硬盘及各硬盘的分区情况。
分区表应该出现你所新建的分区，且大小与你输入的分区大小一致。
确认新分区建立无误后，输入如下指令对新建分区进行格式化。&lt;/p>
&lt;blockquote>
&lt;p>下面所有的分区符号如&lt;code>/dev/sda1&lt;/code>仅为示例，实际操作时应该结合自己实际情况进行格式化。
假设新建的&lt;code>/mnt&lt;/code>分区符号为&lt;code>/dev/sdb3&lt;/code>，则应该输入&lt;code>mkfs.ext4 /dev/sdb3&lt;/code>以格式化&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>格式化&lt;code>/mnt&lt;/code>分区：
&lt;code>mkfs.ext4 /dev/sda1&lt;/code>&lt;/li>
&lt;li>格式化&lt;code>/boot&lt;/code>分区
为了通用性，建议该分区格式化为&lt;code>fat32&lt;/code>格式：
&lt;code>mkfs.vfat -F32 /dev/sda2&lt;/code>
&lt;strong>同上，UEFI引导忽略此步&lt;/strong>&lt;/li>
&lt;li>格式化&lt;code>/swap&lt;/code>分区：
&lt;code>mkswap /dev/sda3&lt;/code>&lt;/li>
&lt;li>格式化&lt;code>/home&lt;/code>分区：
&lt;code>mkfs.ext4 /dev/sda4&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>格式化分区为ext4分区时通常需要输入&lt;code>y&lt;/code>以确认。
其他分区格式化，没有报错则意味着操作成功。&lt;/p>
&lt;/blockquote>
&lt;p>接下来挂载分区&lt;/p>
&lt;ol>
&lt;li>挂载&lt;code>/mnt&lt;/code>分区：
&lt;code>mount /dev/sda1 /mnt&lt;/code>&lt;/li>
&lt;li>挂载&lt;code>/boot&lt;/code>分区：
&lt;em>此处分为传统BIOS启动和UEFI启动&lt;/em>
a. 传统BIOS启动输入如下指令：
&lt;code>mkdir /mnt/boot&lt;/code>
&lt;code>mount /dev/sda2 /mnt/boot&lt;/code>
b. UEFI启动输入如下指令：
&lt;code>mkdir -p /mnt/boot&lt;/code>
&lt;code>mount /dev/sda2 /mnt/boot&lt;/code>
&lt;strong>对于UEFI引导，&lt;code>/dev/sda2&lt;/code>应该改为Windows的EFI分区&lt;/strong>&lt;/li>
&lt;li>&lt;code>/swap&lt;/code>分区无需挂载，但是需要输入如下指令启用：
&lt;code>swapon /dev/sda3&lt;/code>&lt;/li>
&lt;li>建立&lt;code>/home&lt;/code>分区目录并挂载分区：
&lt;code> mkdir /mnt/home&lt;/code>
&lt;code> mount /dev/sda4 /mnt/home&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>至此，硬盘分区和相应目录挂载已经全部完成。&lt;/p>
&lt;blockquote>
&lt;p>建议再次输入&lt;code>fdisk -l&lt;/code>指令检查硬盘分区情况，一般情况下，每个相应的分区后面应该标注其挂载的目录。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>以上过程中若出现报错不通过的情况，为了节约排查问题时间，可以直接从重新执行&lt;code>cfdisk&lt;/code>指令重新分区开始。&lt;strong>重新分区前，已经挂载好的目录需要进行卸载。&lt;/strong>
例，卸载&lt;code>/home&lt;/code>分区目录的指令如下：
&lt;code>unmount /dev/sda4 /mnt/home&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装-arch-linux-基本系统">安装 Arch Linux 基本系统&lt;/h2>
&lt;blockquote>
&lt;p>Arch Linux 的安装不仅需要连接网络，而且还要从网络下载大量数据。因为 Arch Linux 主服务器在国外，加之某些众所周知的原因，国内网络使用国外服务器下载会非常慢。因此，建议使用国内镜像网站进行下载和安装工作。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>修改源为国内镜像源：
&lt;code>nano /etc/pacman.d/mirrorlist&lt;/code>
&lt;em>该步骤亦可用vim等编辑器编辑，但是系统可能并不自带除nano外的编辑器，请自行选择&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>如果你对 Linux 下编辑有所了解，尤其是nano编辑有所了解的话，这一步对于你来说应该不算陌生。
如果你对 Linux 下编辑不算熟悉，或者对 nano 不熟悉，也不要紧。你只要同时按&lt;code>Ctrl+F&lt;/code>，接着输入 China 再回车进行搜索。
如果一切顺利，你应该看到以下字符&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#China&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> https://mirrors.tuna.tsinghua.edu.cn/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时，你的终端光标应该也在此闪烁。
同时按住&lt;code>Ctrl+K&lt;/code>剪切镜像网址，接着同时按住Ctrl和键盘的上方向键返回顶端，然后同时按住&lt;code>Ctrl+U&lt;/code>粘贴你剪切的镜像源，最后同时按住&lt;code>Ctrl+X&lt;/code>，输入&lt;code>y&lt;/code>确认退出。&lt;/p>
&lt;p>当然，你也可以选择下面镜像源中的某一个以完成后续安装。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1"># 网易&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> http://mirrors.163.com/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;span class="c1"># 阿里&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> http://mirrors.aliyun.com/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;span class="c1"># 中国科学技术大学&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> https://mirrors.ustc.edu.cn/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;span class="c1"># 西安交通大学&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> https://mirrors.xjtu.edu.cn/archlinux/&lt;span class="nv">$repo&lt;/span>/os/&lt;span class="nv">$arch&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改完镜像源之后，输入如下指令刷新镜像源
&lt;code>sudo pacman -Syy&lt;/code>&lt;/p>
&lt;ul>
&lt;li>真正开始安装基本系统
输入如下指令开始安装&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">pacstrap /mnt base base-devel linux linux-firmware nano dhcpcd
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>可以将上述指令中的&lt;code>linux&lt;/code>替换为 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Kernel" target="_blank" rel="noopener"
>Kernel&lt;/a> 页面中介绍的内核软件包。如果知道自己的需求，可以不安装内核和固件软件包。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>安装过程中会出现几个选择软件包的提示，建议“默认=all”，即直接敲回车默认安装，输入一个“y”确认安装。
在网络不佳的情况下，下载过程可能会出现意外断流。对自己网络没有自信的话，建议在上述修改镜像源步骤中&lt;strong>多添加几个镜像源&lt;/strong>。当某个源出现问题时，系统会自动从其他源尝试下载。&lt;/p>
&lt;/blockquote>
&lt;p>当安装停止且成功后，输入如下指令以生成fstab文件：
&lt;code>genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&lt;/code>&lt;/p>
&lt;p>为了确认文件生成，建议输入如下指令以确认
&lt;code>nano /mnt/etc/fstab&lt;/code>
确认无误后，输入&lt;code>Ctrl + X&lt;/code>退出&lt;/p>
&lt;p>如果一切正常的话，此时你应该成功在电脑硬盘安装了 Arch Linux 基本系统。&lt;/p>
&lt;h2 id="安装基本系统后的环境配置">安装基本系统后的环境配置&lt;/h2>
&lt;p>输入如下指令进入新安装的系统：
&lt;code>arch-chroot /mnt /bin/bash&lt;/code>
现在你进入了电脑硬盘上的 Arch Linux 。
如果一切正常的话，细心的你会发现提示符由&lt;code>root@archiso ~ #&lt;/code>变为&lt;code>[root@archiso /]#&lt;/code>。&lt;/p>
&lt;p>Linux中默认有一个用户叫&lt;code>root&lt;/code>，即超级用户(根用户)，拥有对系统的一切权力。这意味着，即使让系统删除自己本身也会执行无误，比如著名指令&lt;code>rm -rf /*&lt;/code>，&lt;strong>千万不要输入这个指令，否则后果自负&lt;/strong>。
现在安装系统默认使用的是root用户。
输入下面命令来设置root用户密码：
&lt;code>passwd&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>输入密码后需要回车确认，密码需要输入两次。
密码在输入的时候不会显示，不用担心是自己键盘坏了。&lt;/p>
&lt;/blockquote>
&lt;p>因为root用户权力过大大，即使删掉系统本身，也会被执行。为了避免日常使用因为权限过高造成某些不可逆而又本可以避免的损失，Linux 需要添加一个普通用户，且该用户可以获取临时root权限。
一般情况下，这个新添加的用户将会是你后续登录 Linux 的&lt;em>主要用户&lt;/em>。&lt;/p>
&lt;p>执行以下命令新建一个隶属于wheel组的新用户：
&lt;code>useradd -m -G wheel -s /bin/bash 你的用户名 &lt;/code>&lt;/p>
&lt;p>输入如下指令为新建用户设置密码：
&lt;code>passwd 你的用户名&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>同上，密码需要输入两次，且密码不会显示&lt;/p>
&lt;/blockquote>
&lt;p>为了该普通用户能获取临时root权限，我们需要修改wheel的权限设置。
输入如下指令打开sudoers文件：
&lt;code>nano /etc/sudoers&lt;/code>&lt;/p>
&lt;p>在打开的文件中找到以下两行：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">## Uncomment to allow members of group wheel to execute any command&lt;/span>
&lt;span class="c1"># %wheel ALL=(ALL) ALL&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>确认无误后， 把&lt;code>%wheel&lt;/code>前面的注释符号（#）去掉，（%）要留下。
最后的结果应该是下面这样：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">## Uncomment to allow members of group wheel to execute any command&lt;/span>
%wheel &lt;span class="nv">ALL&lt;/span>&lt;span class="o">=(&lt;/span>ALL&lt;span class="o">)&lt;/span> ALL
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时按&lt;code>Ctrl + X&lt;/code>，然后保存退出。&lt;/p>
&lt;blockquote>
&lt;p>后续若需要普通用户在执行某条指令时临时获得 root 权限，则在该条指令前加上&lt;code>sudo&lt;/code>
例：&lt;code>sudo pacman -Syu&lt;/code>
　　&lt;code>sudo rm -rf /*&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>如同用户有一个名字一样，Linux 下电脑也需要一个名字。
输入如下指令配置电脑的主机名：
&lt;code>echo 你电脑的主机名 &amp;gt; /etc/hostname&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>主机名可以是任何你喜欢的名字，但是不能含空格等字符。&lt;/p>
&lt;/blockquote>
&lt;p>然后输入以下命令：
&lt;code>nano /etc/hosts&lt;/code>
你应该会看到如下符号&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#&amp;lt;ip-address&amp;gt; &amp;lt;hostname.domain.org&amp;gt; &amp;lt;hostname&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>你需要添加相应字符，使得界面如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">127.0.0.1 localhost
::1 localhost
127.0.1.1 你电脑主机名.localdomain 你电脑主机名
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;em>如果系统有一个永久的 IP 地址，请使用这个永久的 IP 地址而不是 &lt;code>127.0.1.1&lt;/code>&lt;/em>。&lt;/p>
&lt;/blockquote>
&lt;p>确认无误后，同时按住&lt;code>Ctrl + X&lt;/code>，输入&lt;code>y&lt;/code>，回车再退出。&lt;/p>
&lt;h2 id="安装grub引导">安装Grub引导&lt;/h2>
&lt;p>&lt;em>以下操作分为传统BIOS引导和UEFI引导&lt;/em>&lt;/p>
&lt;ul>
&lt;li>如果你是传统BIOS引导，则输入以下指令：
&lt;code>pacman -S grub os-prober&lt;/code>
然后输入以下指令安装到硬盘：
&lt;code>grub-install --target=i386-pc /dev/sda --recheck&lt;/code>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>第二条指令中&lt;code>/dev/sda&lt;/code>应该根据你实际情况，改为你自己硬盘名字&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>如果你是UEFI引导，则输入以下指令：
&lt;code>pacman -S grub efibootmgr os-prober&lt;/code>
然后输入以下指令安装到硬盘：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">grub-install --target&lt;span class="o">=&lt;/span>x86_64-efi --efi-directory&lt;span class="o">=&lt;/span>/boot --bootloader-id&lt;span class="o">=&lt;/span>grub --recheck
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果你未按照上述过程将 EFI 系统分区挂载到 /boot ，&lt;em>请自行修改 &amp;ndash;efi-directory 的值&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>然后输入如下指令生成必要的配置文件：
&lt;code>grub-mkconfig -o /boot/grub/grub.cfg&lt;/code>
注意，你一定要确定输入上面指令有输出结果
输出结果大致如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">Generating grub configuration file ...
Found linux image: /boot/vmlinuz-linux
Found initrd image&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> in /boot: initramfs-linux.img
Found fallback initrd image&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> in /boot: initramfs-linux-fallback.img
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果输入上一条指令没有任何输出结果，&lt;strong>请务必停下来检查&lt;/strong>上面所有步骤有没有哪一处出现问题，或者重新进行所有安装步骤！！&lt;/p>
&lt;/blockquote>
&lt;p>为了重启后还能连接到当前网络，输入如下指令：
&lt;code>systemctl enable dhcpcd.service&lt;/code>&lt;/p>
&lt;p>接着输入如下指令退回U盘安装环境：
&lt;code>exit&lt;/code>
然后输入如下指令重启电脑：
&lt;code>reboot&lt;/code>
在电脑关机的时候拔掉你的启动盘。&lt;/p>
&lt;blockquote>
&lt;p>系统重新启动时会显示 Grub 的启动选单，&lt;em>此时选单中没有Windows系统&lt;/em>，这是&lt;strong>正常现象&lt;/strong>，下面将会解决这个问题。&lt;/p>
&lt;/blockquote>
&lt;p>成功启动后会显示登录界面。
此时使用默认用户 root 登录。
输入用户名 root，回车，再输入你在前面给 root 用户设置的密码。
成功登录后，输如下指令重新生成一次 Grub 的配置文件：
&lt;code>grub-mkconfig -o /boot/grub/grub.cfg&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>如果一切正常的话，你的输出结果倒数第二行应该出现&lt;code>Windows&lt;/code>字样。如果没有出现，则可能是 Windows 被加密，这个问题在后面会给出解决方法。&lt;/p>
&lt;/blockquote>
&lt;h2 id="配置语言和区域">配置语言和区域&lt;/h2>
&lt;p>/etc/locale.gen 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号&lt;code>＃&lt;/code>即可。（建议选择带 UTF-8 的项）
输入如下指令修改 locale.gen 文件，配置语言环境：
&lt;code>nano /etc/locale.gen&lt;/code>&lt;/p>
&lt;p>分别找到以下字符，删除该行最前面的&lt;code>#&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="c1">#en_US.UTF-8 UTF-8&lt;/span>
&lt;span class="c1">#zh_CN.UTF-8 UTF-8&lt;/span>
&lt;span class="c1">#zh_TW.UTF-8 UTF-8&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>比如，你看到&lt;code>#en_US.UTF-8 UTF-8&lt;/code>时，你需要删除该行最前面的&lt;code>#&lt;/code>，使之变成&lt;code>en_US.UTF-8 UTF-8&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>你也可以根据自己需求，添加其他环境。&lt;/p>
&lt;/blockquote>
&lt;p>编辑完成后同时按住&lt;code>Ctrl + X&lt;/code>退出。&lt;/p>
&lt;p>退出后输入如下指令刷新区域信息：
&lt;code>locale-gen&lt;/code>
如果你上一步操作无误的话，指令输出结果应该包含&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">en_US.UTF-8 UTF-8
zh_CN.UTF-8 UTF-8
zh_TW.UTF-8 UTF-8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输入如下指令将区域信息写入 locale-conf 文件：
&lt;code>echo LANG=en_US.UTF-8 &amp;gt; /etc/locale.conf&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>毫无疑问，你可以选择将上一条指令的&lt;code>en_US.UTF-8&lt;/code>改为&lt;code>zh_CN.UTF-8&lt;/code>。&lt;strong>但请谨慎考虑后进行操作&lt;/strong>。
locale.conf 文件是全局设置，如果这里设成中文或者其他非英文环境，桌面环境下字符会正常显示，&lt;strong>但是在命令行下会变成乱码&lt;/strong>。
如果看不懂请忽略此步。&lt;/p>
&lt;/blockquote>
&lt;p>输入如下指令设置时区为亚洲上海：
&lt;code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime&lt;/code>&lt;/p>
&lt;p>将系统时区设置为 localhost：
&lt;code>hwclock --systohc --localtime&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>如果你选择单系统安装，请输入以下指令
&lt;code>hwclock --systohc --utc&lt;/code>
&lt;code>timedatectl set-ntp true&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>使用 localhost 有一定弊端，详见 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Dual_boot_with_Windows_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E6%97%B6%E9%97%B4%E6%A0%87%E5%87%86" target="_blank" rel="noopener"
>Arch Wiki&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装桌面环境">安装桌面环境&lt;/h2>
&lt;p>Arch Linux 可选择的桌面环境很多，可以根据自己需求进行选择。
此处只介绍 KDE 的安装。&lt;/p>
&lt;ol>
&lt;li>安装Xorg。
Xorg是所有桌面环境的基础，安装所有桌面环境都要依赖它：
&lt;code>pacman -S xorg&lt;/code>&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>安装过程中，系统会询问你安装其中哪些软件包。如无其他需求或考虑，直接回车即可。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>安装登录管理器和桌面环境&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>登录管理器负责衔接终端和桌面环境，使用桌面环境登录系统。登录管理器在某些地方也叫显示管理器（其实是一个意思）。
登录管理器有很多种，而且可以与不同的桌面环境相互交叉组合使用。&lt;/p>
&lt;/blockquote>
&lt;p>配合 KDE-Plasma 使用的最佳选择是 SDDM 登录管理器， KDE 和 Arch Wiki 都推荐使用此组合。
输入如下指令安装 SDDM 和 KDE 基础包：
&lt;code>pacman -S plasma sddm kdebase&lt;/code>
输入如下指令设置 SDDM 开机自启：
&lt;code>systemctl enable sddm&lt;/code>
输入完指令后，下次开机会直接进入图形界面，而非命令行界面。&lt;/p>
&lt;h2 id="对系统进行本地化">对系统进行本地化&lt;/h2>
&lt;ol>
&lt;li>安装中文字体
可选的字体含以下几种：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Google Noto Fonts 系列
noto-fonts
noto-fonts-cjk
noto-fonts-emoji&lt;/li>
&lt;li>思源黑体
adobe-source-han-sans-otc-fonts&lt;/li>
&lt;li>文泉驿
wqy-microhei
wqy-zenhei&lt;/li>
&lt;/ul>
&lt;p>以文泉驿为例，输入如下指令安装文泉驿米黑字体：
&lt;code>pacman -S wqy-microhei&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>特别说明，文泉驿以外的字体，在某些环境下&lt;strong>均存在一定的显示异常&lt;/strong>。请根据自己的需求进行选择。&lt;/p>
&lt;/blockquote>
&lt;ol start="2">
&lt;li>设置中文区域
输入如下指令新建.xprofile文件：
&lt;code>nano ~/.xprofile&lt;/code>
&lt;em>如果已有此文件，也可以输入如上指令打开此文件&lt;/em>
在文件中添加以下内容：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">export&lt;/span> &lt;span class="nv">LANG&lt;/span>&lt;span class="o">=&lt;/span>zh_CN.UTF-8
&lt;span class="nb">export&lt;/span> &lt;span class="nv">LANGUAGE&lt;/span>&lt;span class="o">=&lt;/span>zh_CN:en_US
&lt;span class="nb">export&lt;/span> &lt;span class="nv">LC_CTYPE&lt;/span>&lt;span class="o">=&lt;/span>en_US.UTF-8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时按住&lt;code>Ctrl + X&lt;/code>，然后保存退出。&lt;/p>
&lt;p>如果你是一步步按照本教程操作，则你此时是在 root 用户目录创建了.xprofile文件。因此，此时.xprofile只会影响root用户。
输入如下指令，将该文件复制到你创建的普通用户目录下：
&lt;code>cp .xprofile /home/你的用户名&lt;/code>
此时，你创建的普通用户区域也配置完成。&lt;/p>
&lt;p>此时输入&lt;code>reboot&lt;/code>重启。安装教程到此正式结束。&lt;/p>
&lt;h2 id="安装完成后的一些基本配置和某些问题的解决">安装完成后的一些基本配置和某些问题的解决&lt;/h2>
&lt;ul>
&lt;li>安装中文输入法
安装fcitx输入法模块：
&lt;code>sudo pacman -S fcitx-im fcitx-configtool&lt;/code>
配置输入法的环境变量，输入如下指令编辑.xprofile文件
&lt;code>nano ~/.xprofile&lt;/code>
在文件中添加以下内容：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="nb">export&lt;/span> &lt;span class="nv">GTK_IM_MODULE&lt;/span>&lt;span class="o">=&lt;/span>fcitx
&lt;span class="nb">export&lt;/span> &lt;span class="nv">QT_IM_MODULE&lt;/span>&lt;span class="o">=&lt;/span>fcitx
&lt;span class="nb">export&lt;/span> &lt;span class="nv">XMODIFIERS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;@im=fcitx&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>　　修改完成后，保存退出。&lt;/p>
&lt;blockquote>
&lt;p>重启电脑后在 fcitx 设置即可选择中文输入法。你也可以根据自己的需求安装其他输入法，如搜狗输入法。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>此时配置的输入法只会对&lt;strong>当前用户&lt;/strong>生效，如需对其他用户生效，则输入&lt;code>cp .xprofile /home/其他用户的用户名&lt;/code>复制文件。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>安装 Firefox 浏览器
输入如下指令安装 Firefox 浏览器：
&lt;code>sudo pacman -S firefox&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>你也可以根据自己需求安装其他浏览器，如 Chrome&lt;/p>
&lt;ul>
&lt;li>添加 Arch Linux CN
输入如下指令编辑 pacman.conf 文件：
&lt;code>sudo nano /etc/pacman.conf&lt;/code>
在该文件末尾添加以下内容&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="o">[&lt;/span>archlinuxcn&lt;span class="o">]&lt;/span>
&lt;span class="nv">Server&lt;/span> &lt;span class="o">=&lt;/span> https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/&lt;span class="nv">$arch&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着输入如下指令刷新源：
&lt;code>sudo pacman -Syy&lt;/code>
然后安装密匙：
&lt;code>sudo pacman -S archlinuxcn-keyring&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>若密匙安装出错，则依次输入以下指令解决：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -Syu haveged
systemctl start haveged
systemctl &lt;span class="nb">enable&lt;/span> haveged
rm -rf /etc/pacman.d/gnupg
sudo pacman-key --init
sudo pacman-key --populate archlinux
sudo pacman-key --populate archlinuxcn
sudo pacman -S archlinuxcn-keyring
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>Arch Linux 中文社区仓库是由 Arch Linux 中文社区驱动的非官方软件仓库，包含许多官方仓库未提供的额外的软件包，以及已有软件的 git 版本等变种。一部分软件包的打包脚本来源于 AUR，但也有许多包与 AUR 不一样。
详情见 &lt;a class="link" href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener"
>Arch 中文社区&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>安装 yay
安装 yay 之前，你需要先了解一下什么是 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Arch_User_Repository_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener"
>AUR&lt;/a>
输入如下指令安装 yay&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">sudo pacman -S git
&lt;span class="nb">cd&lt;/span>
git clone https://aur.archlinux.org/yay.git
&lt;span class="nb">cd&lt;/span> yay
makepkg -si
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>yay 使用上与 Pacman 大致一致。
应避免以 root 权限运行 yay，即避免&lt;code>sudo yay&lt;/code>这样的指令。
你也可以选择其他的 AUR 助手。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>解决 Windows 加密问题
若在前面步骤中 Windows 无法挂载，则输入以下指令安装 dislocker 。
&lt;code>yay -S dislocker&lt;/code>
然后输入如下指令再次生成配置文件：
&lt;code>grub-mkconfig -o /boot/grub/grub.cfg&lt;/code>
如果一切正常，现在输出结果中应该含有&lt;code>Windows&lt;/code>字样
&lt;del>如果没有的话，我也不知道怎么办了&lt;/del>&lt;/li>
&lt;/ul>
&lt;p>你还可以选择安装 zsh 和 Yakuake，这里不再介绍。&lt;/p>
&lt;h2 id="相关内容补充">相关内容补充&lt;/h2>
&lt;h3 id="pacman-常用指令">Pacman 常用指令：&lt;/h3>
&lt;ul>
&lt;li>核心指令
&lt;code>sudo pacman -Syu&lt;/code> ：进行全面系统更新(即通俗意义的“滚”)
&lt;code>sudo pacman -Syy&lt;/code> ： 刷新数据库&lt;/li>
&lt;li>安装软件
&lt;code>sudo pacman -S packagename&lt;/code> ： 安装指定软件
&lt;code>sudo pacman -Sy packagename&lt;/code> ： 刷新数据库后安装指定软件
&lt;code>sudo pacman -Sv packagename&lt;/code> ： 显示一些操作信息后安装指定软件
&lt;code>sudo pacman -U pkg.tar.xz&lt;/code> ：安装本地包
&lt;code>sudo pacman -U link.tar.xz&lt;/code> ：安装远程包&lt;/li>
&lt;li>删除软件
&lt;code>sudo pacman -R packagename&lt;/code> ：删除指定软件，保留其全部已经安装的依赖关系
&lt;code>sudo pacman -Rs packagename&lt;/code> ：删除指定软件，并删除仅与该软件存在依赖关系的其他软件
&lt;code>sudo pacman -Rsc packagename&lt;/code> ：删除指定软件，并删除所有与该软件存在依赖关系的其他软件
&lt;code>sudo pacman -Rd packagename&lt;/code> ：删除指定软件，不检查依赖&lt;/li>
&lt;li>搜索软件
&lt;code>sudo pacman -Ss keyword&lt;/code>：在仓库中搜索含关键字的软件
&lt;code>sudo pacman -Qs keyword&lt;/code>：在已安装软件中搜索含关键词的软件
&lt;code>sudo pacman -Qi packagename&lt;/code>：搜索指定软件的详细信息
&lt;code>sudo pacman -Ql packagename&lt;/code>：列出指定软件的文件&lt;/li>
&lt;li>其他指令
&lt;code>sudo pacman -Sw packagename&lt;/code>：只下载指定软件而不安装
&lt;code>sudo pacman -Sc&lt;/code> ：清理未安装的软件包
&lt;code>sudo pacman -Scc&lt;/code> ：清理所有的缓存文件&lt;/li>
&lt;/ul>
&lt;h3 id="arch-相关链接">Arch 相关链接&lt;/h3>
&lt;p>Arch Wiki：&lt;a class="link" href="https://wiki.archlinux.org/index.php/Main_page_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener"
>Link&lt;/a>
Arch 官方软件仓库：&lt;a class="link" href="https://www.archlinux.org/packages/" target="_blank" rel="noopener"
>Link&lt;/a>
Arch Linux CN软件仓库：&lt;a class="link" href="https://build.archlinuxcn.org/packages/#/" target="_blank" rel="noopener"
>Link&lt;/a>
AUR：&lt;a class="link" href="https://aur.archlinux.org/" target="_blank" rel="noopener"
>Link&lt;/a>&lt;/p></description></item><item><title>First Blog</title><link>https://blog.linioi.com/posts/7/</link><pubDate>Tue, 24 Mar 2020 19:01:10 +0000</pubDate><guid>https://blog.linioi.com/posts/7/</guid><description>&lt;p>第一篇博客，Hello world~~&lt;/p>
&lt;blockquote>
&lt;p>&lt;del>希望自己删库跑路不要那么快&lt;/del>&lt;/p>
&lt;/blockquote></description></item></channel></rss>